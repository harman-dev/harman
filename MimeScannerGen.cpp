#define YY_CHAR unsigned char
/* A lexical scanner generated by flex */
/* scanner skeleton version:
 * $Header: c:\\Program\040Files\\Development\\CVS\040Repository/flex++/flexskel.cc,v 1.1.1.1 2002/04/13 06:01:32 Bear Exp $
 */
/* MODIFIED FOR C++ CLASS BY Alain Coetmeur: coetmeur(at)icdc.fr */
/* Note that (at) mean the 'at' symbol that I cannot write */
/* because it is expanded to the class name */
/* made at Informatique-CDC, Research&development department */
/* company from the Caisse Des Depots et Consignations */
/* institutional financial group  */

/* theses symbols are added before this file */
/* #define YY_CHAR 'unsigned char' if 8bit or 'char' if 7bit */
/* #define FLEX_DEBUG if debug mode */
#define FLEX_SCANNER
/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif
/* Old MSC, before c7 */
#ifdef MSDOS
#ifndef _MSDOS
#define _MSDOS
#endif
#endif
/* turboc */
#ifdef __MSDOS__
#ifndef _MSDOS
#define _MSDOS
#endif
#endif

#ifdef __cplusplus
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#ifndef YY_USE_CLASS
#define YY_USE_CLASS
#endif
#ifndef _MSDOS
/* #include <osfcn.h> */
#endif
#else   /* ! __cplusplus */
#ifdef __STDC__
#ifdef __GNUC__
#include <stddef.h>
void *malloc( size_t );
void free( void* );
int read();
#else
#include <stdlib.h>
#endif  /* __GNUC__ */
#define YY_USE_PROTOS
#define YY_USE_CONST
#endif  /* __STDC__ */
#endif  /* ! __cplusplus */
#ifdef __TURBOC__
#define YY_USE_CONST
#endif
#include <stdio.h>


/*********************************************/
/* COMPILER DEPENDENT   MACROS               */
/*********************************************/
/* use prototypes in function declarations */
/* the "const" storage-class-modifier is valid */
#ifndef YY_USE_CONST
#define const
#endif
/* use prototypes in function declarations */
#ifndef YY_PROTO
#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif
#endif


/*********************/
/* parameters        */

/* amount of stuff to slurp up with each read */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif
/* size of default input buffer */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE (YY_READ_BUF_SIZE * 2) 
#endif

/***********************************/
/* to be redefined for application */

/* returned upon end-of-file */
#define YY_END_TOK 0
/* no semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#define yyterminate() return ( YY_NULL )

/* code executed at the end of each rule */
#define YY_BREAK break;

/* #define YY_USER_ACTION */
/* #define YY_USER_INIT */


#ifndef YY_USE_CLASS
/* copy whatever the last rule matched to the standard output */
/* cast to (char *) is because for 8-bit chars, yy___text is (unsigned char *) */
/* this used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite()
 */
#define ECHO (void) fwrite( (char *) yy___text, yy___leng, 1, yy___out )

/* gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifdef _MSDOS
#define YY_INPUT(buf,result,max_size) \
	if ( (result = fread(buf,1,max_size,yy___in)) < 0 ) \
	    YY_FATAL_ERROR( "fread() in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if ( (result = read( fileno(yy___in), (char *) buf, max_size )) < 0 ) \
	    YY_FATAL_ERROR( "read() in flex scanner failed" );

#endif
/* report a fatal error */

/* The funky do-while is used to turn this macro definition into
 * a single C statement (which needs a semi-colon terminator).
 * This avoids problems with code like:
 *
 *      if ( something_happens )
 *              YY_FATAL_ERROR( "oops, the something happened" );
 *      else
 *              everything_okay();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the YY_FATAL_ERROR() call.
 */

#define YY_FATAL_ERROR(msg) \
	do \
		{ \
		(void) fputs( msg, yy___stderr  ); \
		(void) putc( '\n', yy___stderr  ); \
		exit( 1 ); \
		} \
	while ( 0 )

/* default yywrap function - always treat EOF as an EOF */
#define yywrap() 1


/* default declaration of generated scanner - a define so the user can
 * easily add parameters
 */
#define YY_DECL int yylex YY_PROTO(( void )) 
#else 
/* c++ */
#define ECHO yy___echo()
#define YY_INPUT(buf,result,max_size) \
	if ( yy___input((char *)buf, result,max_size) < 0 ) \
	    YY_FATAL_ERROR( "YY_INPUT() in flex scanner failed" );

#define YY_FATAL_ERROR(msg) yy___fatal_error(msg)
#define yywrap() yy___wrap()

#endif
/***********************************/
/* not to be changed */
#define YY_NULL 0
#define YY_END_OF_BUFFER_CHAR 0
/* special action meaning "start processing a new file" */
#define YY_NEW_FILE yy___newfile 
/* enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN
 */
#define BEGIN yy_start = 1 + 2 *

/* action number for EOF rule of a given start state */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)



/* % section 1 definitions go here */ 
#define INITIAL 0
/******************************************************************************
 *  COMPANY               :  Harman/Becker Automotive Systems GmbH / Ulm
 *  PROJECT               :  SCP / Tools / ParserCollection
 * ----------------------------------------------------------------------------
 *  Module                :  MimeScannerGen.l
 *  Version               :  1.0.0
 *  Date                  :  2008-08-19
 *  Programmer            :  Peter Lindner / Daniel Humme
 * ----------------------------------------------------------------------------
 *  Programming Language  :  CPP - FLEX Grammar
 * ============================================================================
 *
 *   module description   :
 *
 *
 *
 *
 *****************************************************************************/
/* ------ Name des Lexers + Klassenname -------- */
#define YY_CMimeScannerGen_FLEX_SCANNER
/* ------- Defines für Lexer-Einstellung ------- */
/* ------- Start States ------- */
#define STATE_EMPTY_LINE 1
#define STATE_ADDRESSES 2
#define STATE_IDENTIFICATION 3
#define STATE_TRACE 4
#define STATE_DATE 5
#define STATE_SUBJECT 6
#define STATE_COMMENTS 7
#define STATE_KEYWORDS 8
#define STATE_MIME_VERSION 9
#define STATE_CONTENT_ID 10
#define STATE_CONTENT_TYPE 11
#define STATE_DISPOSITION 12
#define STATE_TRANSFER_ENCODING 13
#define STATE_CONTENT_DESCRIPTION 14
#define STATE_BODY 15
#define STATE_BOUNDARY 16
#define STATE_COMMENT 17
/* ------- Input Macro redefinition to Scan a Buffer ------ */
/* ------- this Code is put to HPP and CPP files ------- */
/* ------- this Code is put to CPP file only ------- */
   #undef  YY_READ_BUF_SIZE
   #define YY_READ_BUF_SIZE 65536

   #define RC_PCCHAR(var) reinterpret_cast<const StarRec_Char*>( (var) )

   //flags from yacc
   extern bool entity;
   extern bool boundaryBefore;
   extern bool insideBody;
   extern bool receivedDate;

   bool startEMail = true;
   bool eofReached = false;

   int commentCount = 0;
   int commentState = 0;
/* ---------- Set-Deklarationen --------- */
//encoded word
/* ----------- Lexikalische Analyse - Regelteil -------- */
/* ----------- Darauf achten, dass ein Token nicht wie der zu erkennende String heisst! */
/* ----------- Keine Kommentare im Regelteil!! -------- */
#include "MimeScannerGen.hpp"

#define yy___stderr YY_CMimeScannerGen_ERRFILE
#define yy___text YY_CMimeScannerGen_TEXT
#define yy___leng YY_CMimeScannerGen_LENG
#define yy___in YY_CMimeScannerGen_IN
#define yy___out YY_CMimeScannerGen_OUT
#define yy___newfile \
	do \
		{ \
		YY_CMimeScannerGen_INIT_BUFFER( YY_CMimeScannerGen_CURRENT_BUFFER, yy___in ); \
		YY_CMimeScannerGen_LOAD_BUFFER_STATE(); \
		} \
	while ( 0 )
#if YY_CMimeScannerGen_DEBUG != 0
#define yy___flex_debug YY_CMimeScannerGen_DEBUG_FLAG
#endif


#ifdef YY_USE_CLASS

#define yy___echo YY_CMimeScannerGen_ECHO
#define yy___input YY_CMimeScannerGen_INPUT
#define yy___fatal_error YY_CMimeScannerGen_FATAL_ERROR
#define yy___wrap YY_CMimeScannerGen_WRAP

#endif

/* done after the current pattern has been matched and before the
 * corresponding action - sets up yy___text
 */
#define YY_DO_BEFORE_ACTION \
	yy___text = yy_bp; \
/* % code to fiddle yy___text and yy___leng for yymore() goes here */ \
	yy___text -= yy_more_len; \
	yy___leng = yy_cp - yy___text; \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* return all but the first 'n' matched characters back to the input stream */
#define yyless(n) \
	do \
		{ \
		/* undo effects of setting up yy___text */ \
		*yy_cp = yy_hold_char; \
		yy_c_buf_p = yy_cp = yy_bp + n; \
		YY_DO_BEFORE_ACTION; /* set up yy___text again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yy___text )



struct yy_buffer_state
    {
    YY_CMimeScannerGen_IFILE  *yy_input_file;

    YY_CMimeScannerGen_CHAR *yy_ch_buf;               /* input buffer */
    YY_CMimeScannerGen_CHAR *yy_buf_pos;      /* current position in input buffer */

    /* size of input buffer in bytes, not including room for EOB characters */
    int yy_buf_size;    

    /* number of characters read into yy_ch_buf, not including EOB characters */
    int yy_n_chars;

    int yy_eof_status;          /* whether we've seen an EOF on this buffer */
#define EOF_NOT_SEEN 0
    /* "pending" happens when the EOF has been seen but there's still
     * some text process
     */
#define EOF_PENDING 1
#define EOF_DONE 2
    };

/* we provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state"
 */

#ifndef YY_USE_CLASS

#if YY_CMimeScannerGen_DEBUG != 0
int YY_CMimeScannerGen_DEBUG_FLAG=YY_CMimeScannerGen_DEBUG_INIT;
#endif
#define YY_CURRENT_BUFFER YY_CMimeScannerGen_CURRENT_BUFFER
static YY_BUFFER_STATE YY_CMimeScannerGen_CURRENT_BUFFER;
/* yy_hold_char holds the character lost when yy___text is formed */
static YY_CMimeScannerGen_CHAR yy_hold_char;

static int yy_n_chars;          /* number of characters read into yy_ch_buf */

/* GLOBAL */
YY_CMimeScannerGen_CHAR *yy___text;
int yy___leng;

YY_CMimeScannerGen_IFILE  *yy___in = (YY_CMimeScannerGen_IFILE  *) 0;
YY_CMimeScannerGen_OFILE *yy___out = (YY_CMimeScannerGen_OFILE  *) 0;

#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
/* these variables are all declared out here so that section 3 code can
 * manipulate them
 */
/* points to current character in buffer */
static YY_CMimeScannerGen_CHAR *yy_c_buf_p = (YY_CMimeScannerGen_CHAR *) 0;
static int yy_init = 1;         /* whether we need to initialize */
static int yy_start = 0;        /* start state number */

/* flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yy___in.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

static int yy_get_next_buffer YY_PROTO(( void ));
static void yyunput YY_PROTO(( YY_CMimeScannerGen_CHAR c, YY_CMimeScannerGen_CHAR *buf_ptr ));

#else
/* c++ */
#ifndef YY_CMimeScannerGen_ECHO_NOCODE
void YY_CMimeScannerGen_CLASS::yy___echo()
{YY_CMimeScannerGen_ECHO_CODE
}
#endif
#ifndef YY_CMimeScannerGen_INPUT_NOCODE
int  YY_CMimeScannerGen_CLASS::yy___input(char * buffer,int &result,int max_size)
{YY_CMimeScannerGen_INPUT_CODE
}
#endif
#ifndef YY_CMimeScannerGen_FATAL_ERROR_NOCODE
void YY_CMimeScannerGen_CLASS::yy___fatal_error(char *msg)
{YY_CMimeScannerGen_FATAL_ERROR_CODE
}
#endif
#ifndef YY_CMimeScannerGen_WRAP_NOCODE
int  YY_CMimeScannerGen_CLASS::yy___wrap()
{YY_CMimeScannerGen_WRAP_CODE
}
#endif
void YY_CMimeScannerGen_CLASS::yy_initialize()
{
 yy___in=0;yy___out=0;yy_init = 1;
 yy_start=0;
 yy___text=0;yy___leng=0;
 YY_CMimeScannerGen_CURRENT_BUFFER=0;
 yy_did_buffer_switch_on_eof=0;
 yy_c_buf_p=0;yy_hold_char=0;yy_n_chars=0;
#if YY_CMimeScannerGen_DEBUG != 0
 YY_CMimeScannerGen_DEBUG_FLAG=YY_CMimeScannerGen_DEBUG_INIT;
#endif
}

YY_CMimeScannerGen_CLASS::YY_CMimeScannerGen_CLASS(YY_CMimeScannerGen_CONSTRUCTOR_PARAM) YY_CMimeScannerGen_CONSTRUCTOR_INIT
{yy_initialize();
 YY_CMimeScannerGen_CONSTRUCTOR_CODE;
}
YY_CMimeScannerGen_CLASS::~YY_CMimeScannerGen_CLASS() 
{YY_CMimeScannerGen_DESTRUCTOR_CODE;
 if(YY_CMimeScannerGen_CURRENT_BUFFER)
  YY_CMimeScannerGen_DELETE_BUFFER(YY_CMimeScannerGen_CURRENT_BUFFER);
}

#endif


#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

#ifndef YY_USER_INIT
#define YY_USER_INIT
#endif

/* % data tables for the DFA go here */ 
#define YY_END_OF_BUFFER 72
typedef int yy_state_type;
static const short int yy_acclist[3427] =
    {   0,
       14,   14,   24,   24,   28,   28,   30,   30,   52,   52,
       57,   57,   72,   70,   71,   71,   70,   71,   67,   70,
       71,   54,   70,   71,   61,   70,   71,   62,   70,   71,
       59,   70,   71,   60,   70,   71,   63,   70,   71,   66,
       70,   71,   64,   70,   71,   65,   70,   71,   51,   70,
       71,   51,   51,   70,   71,   70,   71,   51,   51,   67,
       70,   71,   51,   54,   70,   71,   51,   61,   70,   71,
       51,   62,   70,   71,   51,   59,   70,   71,   51,   60,
       70,   71,   51,   63,   70,   71,   51,   66,   70,   71,
       51,   64,   70,   71,   51,   65,   70,   71,   51,   70,

       71,   51,   70,   71,   51,   70,   71,   51,   70,   71,
       51,   70,   71,   51,   70,   71,   51,   70,   71,   51,
       70,   71,   51,   70,   71,   51,   70,   71,    8,   70,
       71,   70,   71,    8,   66,   70,   71,   70,   71,    8,
       51,   70,   71,   51,   70,   71,    8,   51,   66,   70,
       71,   51,   70,   71,    8,   51,   70,   71,    8,   51,
       70,   71,    8,   51,   70,   71,    8,   51,   70,   71,
        8,   51,   70,   71,    8,   51,   70,   71,    8,   51,
       70,   71,    8,   51,   70,   71,    8,   51,   70,   71,
        8,   51,   70,   71,   14,   70,   71,   70,   71,   14,

       66,   70,   71,   70,   71,   14,   51,   70,   71,   51,
       70,   71,   14,   51,   66,   70,   71,   51,   70,   71,
       14,   51,   70,   71,   14,   51,   70,   71,   14,   51,
       70,   71,   14,   51,   70,   71,   14,   51,   70,   71,
       14,   51,   70,   71,   14,   51,   70,   71,   14,   51,
       70,   71,   14,   51,   70,   71,   14,   51,   70,   71,
       33,   70,   71,   33,   66,   70,   71,   32,   33,   70,
       71,   33,   51,   70,   71,   33,   51,   66,   70,   71,
       32,   33,   51,   70,   71,   32,   33,   51,   70,   71,
       32,   33,   51,   70,   71,   32,   33,   51,   70,   71,

       32,   33,   51,   70,   71,   32,   33,   51,   70,   71,
       32,   33,   51,   70,   71,   32,   33,   51,   70,   71,
       32,   33,   51,   70,   71,   32,   33,   51,   70,   71,
       32,   33,   51,   70,   71,   70,   71,   19,   70,   71,
       70,   71,   70,   71,   70,   71,   70,   71,   70,   71,
       70,   71,   70,   71,   70,   71,   51,   70,   71,   19,
       51,   70,   71,   51,   70,   71,   51,   70,   71,   51,
       70,   71,   51,   70,   71,   51,   70,   71,   51,   70,
       71,   51,   70,   71,   51,   70,   71,   24,   67,   70,
       71,   26,   70,   71,   26,   54,   70,   71,   26,   61,

       70,   71,   26,   62,   70,   71,   26,   59,   70,   71,
       26,   60,   70,   71,   26,   63,   70,   71,   26,   66,
       70,   71,   26,   64,   70,   71,   26,   65,   70,   71,
       24,   51,   51,   67,   70,   71,   26,   51,   70,   71,
       26,   51,   54,   70,   71,   26,   51,   61,   70,   71,
       26,   51,   62,   70,   71,   26,   51,   59,   70,   71,
       26,   51,   60,   70,   71,   26,   51,   63,   70,   71,
       26,   51,   66,   70,   71,   26,   51,   64,   70,   71,
       26,   51,   65,   70,   71,   26,   51,   70,   71,   26,
       51,   70,   71,   26,   51,   70,   71,   26,   51,   70,

       71,   26,   51,   70,   71,   26,   51,   70,   71,   26,
       51,   70,   71,   26,   51,   70,   71,   26,   51,   70,
       71,   26,   51,   70,   71,   28,   70,   71,   28,   67,
       70,   71,   28,   54,   70,   71,   28,   61,   70,   71,
       28,   62,   70,   71,   28,   59,   70,   71,   28,   60,
       70,   71,   28,   63,   70,   71,   28,   66,   70,   71,
       28,   64,   70,   71,   28,   65,   70,   71,   28,   51,
       70,   71,   28,   51,   51,   70,   71,   28,   51,   51,
       67,   70,   71,   28,   51,   54,   70,   71,   28,   51,
       61,   70,   71,   28,   51,   62,   70,   71,   28,   51,

       59,   70,   71,   28,   51,   60,   70,   71,   28,   51,
       63,   70,   71,   28,   51,   66,   70,   71,   28,   51,
       64,   70,   71,   28,   51,   65,   70,   71,   28,   51,
       70,   71,   28,   51,   70,   71,   28,   51,   70,   71,
       28,   51,   70,   71,   28,   51,   70,   71,   28,   51,
       70,   71,   28,   51,   70,   71,   28,   51,   70,   71,
       28,   51,   70,   71,   28,   51,   70,   71,   30,   67,
       70,   71,   30,   70,   71,   30,   66,   70,   71,   30,
       51,   51,   67,   70,   71,   30,   51,   70,   71,   30,
       51,   66,   70,   71,   30,   51,   70,   71,   30,   51,

       70,   71,   30,   51,   70,   71,   30,   51,   70,   71,
       30,   51,   70,   71,   30,   51,   70,   71,   30,   51,
       70,   71,   30,   51,   70,   71,   30,   51,   70,   71,
       30,   51,   70,   71,   35,   70,   71,   35,   66,   70,
       71,   35,   51,   70,   71,   35,   51,   66,   70,   71,
       35,   51,   70,   71,   35,   51,   70,   71,   35,   51,
       70,   71,   35,   51,   70,   71,   35,   51,   70,   71,
       35,   51,   70,   71,   35,   51,   70,   71,   35,   51,
       70,   71,   35,   51,   70,   71,   35,   51,   70,   71,
       37,   70,   71,   37,   66,   70,   71,   37,   51,   70,

       71,   37,   51,   66,   70,   71,   37,   51,   70,   71,
       37,   51,   70,   71,   37,   51,   70,   71,   37,   51,
       70,   71,   37,   51,   70,   71,   37,   51,   70,   71,
       37,   51,   70,   71,   37,   51,   70,   71,   37,   51,
       70,   71,   37,   51,   70,   71,   39,   70,   71,   70,
       71,   39,   51,   70,   71,   51,   70,   71,   39,   51,
       70,   71,   39,   51,   70,   71,   39,   51,   70,   71,
       39,   51,   70,   71,   39,   51,   70,   71,   39,   51,
       70,   71,   39,   51,   70,   71,   39,   51,   70,   71,
       39,   51,   70,   71,   39,   51,   70,   71,   42,   70,

       71,   70,   71,   42,   51,   70,   71,   51,   70,   71,
       42,   51,   70,   71,   42,   51,   70,   71,   42,   51,
       70,   71,   42,   51,   70,   71,   42,   51,   70,   71,
       42,   51,   70,   71,   42,   51,   70,   71,   42,   51,
       70,   71,   42,   51,   70,   71,   42,   51,   70,   71,
       46,   70,   71,   46,   66,   70,   71,   46,   51,   70,
       71,   46,   51,   66,   70,   71,   46,   51,   70,   71,
       46,   51,   70,   71,   46,   51,   70,   71,   46,   51,
       70,   71,   46,   51,   70,   71,   46,   51,   70,   71,
       46,   51,   70,   71,   46,   51,   70,   71,   46,   51,

       70,   71,   46,   51,   70,   71,   50,   70,   71,   50,
       70,   71,   50,   54,   70,   71,   50,   61,   70,   71,
       50,   62,   70,   71,   50,   59,   70,   71,   50,   60,
       70,   71,   50,   63,   70,   71,   50,   66,   70,   71,
       50,   64,   70,   71,   50,   65,   70,   71,   50,   51,
       70,   71,   50,   51,   70,   71,   50,   51,   54,   70,
       71,   50,   51,   61,   70,   71,   50,   51,   62,   70,
       71,   50,   51,   59,   70,   71,   50,   51,   60,   70,
       71,   50,   51,   63,   70,   71,   50,   51,   66,   70,
       71,   50,   51,   64,   70,   71,   50,   51,   65,   70,

       71,   50,   51,   70,   71,   50,   51,   70,   71,   50,
       51,   70,   71,   50,   51,   70,   71,   50,   51,   70,
       71,   50,   51,   70,   71,   50,   51,   70,   71,   50,
       51,   70,   71,   50,   51,   70,   71,   50,   51,   70,
       71,   52,   53,   71,   52,   53,   71,   53,   71,   52,
       53,   71,   58,   71,   57,   58,   71,   57,   58,   71,
       57,   58,   71,   55,   58,   71,   56,   58,   71,   58,
       71,   69,   67,   61,   62,   59,   60,   63,   66,   64,
       65,   68,   69,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,   14,   14,

       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   33,   33,   32,   33,   32,   33,   32,   33,
       32,   33,   32,   33,   32,   33,   32,   33,   32,   33,
       32,   33,   32,   33,   32,   33,   32,   33,   32,   33,
       32,   33,   20,   24,   67,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       28,   28,   28,   67,   28,   61,   28,   62,   28,   59,
       28,   60,   28,   63,   28,   66,   28,   64,   28,   65,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   30,   67,   30,   30,   30,   66,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   42,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   50,   50,   50,   50,   50,   50,   50,
       61,   50,   62,   50,   59,   50,   60,   50,   63,   50,

       66,   50,   50,   64,   50,   65,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   52,
       52,   52,   57,   57,   57,   57,    5,    4,    9,    9,
        8,    8,   10,   10,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,   15,   15,
       16,   16,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   32,   33,   32,   33,
       32,   33,   32,   33,   32,   33,   33,   32,   33,   32,
       33,   32,   33,   32,   33,   32,   33,   32,   33,   32,
       33,   32,   33,   22,   26,   26,   26,    5,   26,   26,

       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,    4,   26,   28,   28,    5,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,    4,   28,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   40,   40,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   44,   44,   42,   42,   42,   42,

       42,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   49,   49,   50,   49,   50,   50,
       50,   50,   50,   50,   50,    5,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,    4,   50,    6,    5,    4,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   32,   33,   32,   33,   32,
       33,   32,   33,   32,   33,   32,   33,   32,   33,   32,

       33,   32,   33,   32,   33,   32,   33,   32,   33,   32,
       33,   21,   26,   26,   26,    6,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       28,    6,   28,    5,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,    4,   28,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   37,   37,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   46,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   46,   46,   50,
       50,   50,   50,    6,   50,    5,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
        4,   50,    6,   17,    1,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       32,   33,   32,   33,   32,   33,   32,   33,   32,   33,
       33,   32,   33,   32,   33,   32,   33,   32,   33,   32,

       33,   18,   26,   26,   26,   26,   26,   17,   26,    1,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
        6,   28,   28,   28,   28,   17,   28,   28,    1,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   37,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   39,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   39,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   42,   42,   46,   46,   46,   46,

       46,   46,   46,   46,   46,   46,   46,   49,   50,   50,
       50,    6,   50,   50,   50,   50,   17,   50,   50,    1,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       17,    1,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   32,   33,   32,
       33,   32,   33,   32,   33,   32,   33,   32,   33,   32,
       33,   32,   33,   33,   32,   33,   32,   33,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   28,   28,   17,   28,    1,   28,   28,   28,

       28,   28,   28,   28,   28,   28,   28,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   35,   35,
       35,   35,   35,   35,   35,   35,   35,   35,   35,   37,
       37,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   39,
       39,   42,   42,   42,   42,   42,   42,   42,   42,   42,
       42,   42,   46,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   50,   50,   50,   50,   50,   17,   50,
        1,   50,   50,   50,   50,   50,   50,   50,   50,   50,
       50,    2,    8,    8,    8,    8,    8,    8,    8,    8,

        8,    8,    8,    8,    8,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   32,   33,   32,   33,   32,
       33,   32,   33,   32,   33,   32,   33,   32,   33,   32,
       33,   32,   33,   32,   33,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,    2,   26,   26,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
        2,   28,   28,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   35,   35,   35,   35,   35,   35,
       35,   35,   35,   35,   37,   37,   37,   37,   37,   37,
       37,   37,   37,   37,   39,   39,   39,   39,   39,   39,

       39,   39,   39,   39,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   42,   46,   46,   46,   46,   46,   46,
       46,   46,   46,   46,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,   50,   50,   50,    2,   50,   50,
        2,   23,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   32,   33,   33,   32,   33,   32,   33,
       33,   32,   33,   32,   33,   32,   33,   32,   33,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   23,   26,   28,   28,   28,   28,   28,   28,   28,

       28,   28,    2,   28,   28,   23,   28,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   35,   35,   35,
       35,   35,   35,   35,   35,   35,   37,   37,   37,   37,
       37,   37,   37,   37,   37,   39,   39,   39,   39,   39,
       39,   39,   39,   39,   42,   42,   42,   42,   42,   42,
       42,   42,   42,   46,   46,   46,   46,   46,   46,   46,
       46,   46,   50,   50,   50,   50,   50,   50,   50,   50,
       50,   50,   50,   50,    2,   50,   50,   23,   50,   27,
       29,   31,    3,   23,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,   14,   14,   14,   14,   14,   14,

       14,   32,   33,   32,   33,   32,   33,   33,   32,   33,
       32,   33,   32,   33,   26,   26,   26,   26,   27,   26,
       26,   26,   26,   26,   29,   26,   26,   26,   31,   26,
        3,   26,   28,   27,   28,   28,   28,   28,   28,   28,
       28,   29,   28,   28,   28,   28,   31,   28,   28,    3,
       28,   23,   28,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   35,   35,   35,   35,   35,   35,
       35,   37,   37,   37,   37,   37,   37,   37,   39,   39,
       39,   39,   39,   39,   39,   42,   42,   42,   42,   42,
       42,   42,   46,   46,   46,   46,   46,   46,   46,   50,

       50,   50,   50,   27,   50,   50,   50,   50,   50,   50,
       29,   50,   50,   50,   50,   31,   50,   50,   50,    3,
       50,   23,   50,   27,   29,   31,    3,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   32,   33,   32,
       33,   32,   33,   32,   33,   32,   33,   32,   33,   32,
       33,   32,   33,   32,   33,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   27,   28,   28,   28,
       28,   28,   28,   28,   28,   29,   28,   28,   28,   31,
       28,    3,   28,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   35,   35,   35,   35,   35,   35,   35,   35,
       35,   37,   37,   37,   37,   37,   37,   37,   37,   37,
       39,   39,   39,   39,   39,   39,   39,   39,   39,   42,
       42,   42,   42,   42,   42,   42,   42,   42,   46,   46,
       46,   46,   46,   46,   46,   46,   46,   50,   50,   27,
       50,   50,   50,   50,   50,   50,   50,   29,   50,   50,
       50,   31,   50,   50,    3,   50,   36,   11,   13,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,   14,
       14,   14,   14,   14,   14,   32,   33,   32,   33,   32,
       33,   32,   33,   32,   33,   32,   33,   26,   26,   26,

       26,   26,   26,   26,   36,   26,   26,   26,   11,   26,
       26,   13,   26,   28,   28,   28,   28,   36,   28,   28,
       28,   28,   11,   28,   28,   28,   13,   28,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   35,   35,   35,
       35,   35,   35,   37,   37,   37,   37,   37,   37,   39,
       39,   39,   39,   39,   39,   42,   42,   42,   42,   42,
       42,   46,   46,   46,   46,   46,   46,   50,   50,   50,
       50,   50,   50,   50,   36,   50,   50,   50,   50,   50,
       11,   50,   50,   50,   13,   50,   36,   12,   11,   13,
        8,    8,    7,    8,    8,    8,    8,    8,    8,   14,

       14,   14,   14,   14,   32,   33,   32,   33,   32,   33,
       32,   33,   32,   33,   26,   26,   25,   26,   26,   26,
       26,   26,   12,   26,   26,   28,   28,   28,   36,   28,
       28,   28,   12,   28,   11,   28,   28,   13,   28,   30,
       30,   30,   30,   30,   30,   35,   35,   35,   35,   35,
       37,   37,   37,   37,   37,   39,   39,   39,   39,   39,
       44,   42,   42,   42,   42,   42,   46,   46,   46,   46,
       46,   50,   50,   48,   50,   50,   50,   36,   50,   50,
       50,   50,   12,   50,   11,   50,   50,   13,   50,   38,
       12,   34,    7,    8,    8,    8,   14,   14,   14,   32,

       33,   32,   33,   32,   33,   26,   26,   26,   26,   26,
       38,   26,   34,   28,   28,   28,   28,   28,   38,   12,
       28,   28,   28,   34,   30,   30,   30,   30,   30,   35,
       35,   35,   37,   37,   37,   39,   39,   39,   44,   42,
       42,   42,   46,   46,   46,   50,   50,   50,   50,   50,
       38,   50,   12,   50,   50,   34,   50,   38,   34,    8,
        8,    8,   14,   14,   14,   32,   33,   32,   33,   32,
       33,   26,   26,   26,   28,   28,   28,   28,   38,   28,
       34,   30,   30,   30,   35,   35,   35,   37,   37,   37,
       39,   39,   39,   43,   44,   42,   42,   42,   46,   46,

       46,   50,   50,   50,   38,   50,   34,   50,    8,    8,
        8,   14,   14,   14,   32,   33,   32,   33,   32,   33,
       26,   26,   26,   28,   28,   28,   30,   30,   30,   35,
       35,   35,   37,   37,   37,   39,   39,   39,   43,   42,
       42,   42,   46,   46,   46,   50,   50,   50,    8,    8,
        8,   14,   14,   14,   32,   33,   32,   33,   32,   33,
       26,   26,   26,   28,   28,   28,   30,   30,   30,   35,
       35,   35,   37,   37,   37,   39,   39,   39,   42,   42,
       42,   46,   46,   46,   50,   50,   50,    8,    8,    8,
       14,   14,   14,   32,   33,   32,   33,   33,   26,   26,

       26,   28,   28,   28,   30,   30,   30,   35,   35,   35,
       37,   37,   37,   39,   39,   39,   42,   42,   42,   46,
       46,   46,   50,   50,   50,    8,    8,    8,   14,   14,
       14,   32,   33,   32,   33,   32,   33,   26,   26,   26,
       28,   28,   28,   30,   30,   30,   35,   35,   35,   37,
       37,   37,   39,   39,   39,   42,   42,   42,   46,   46,
       46,   50,   50,   50,    8,    8,    8,   14,   14,   14,
       32,   33,   32,   33,   32,   33,   26,   26,   26,   28,
       28,   28,   30,   30,   30,   35,   35,   35,   37,   37,
       37,   39,   39,   39,   42,   42,   42,   46,   46,   46,

       50,   50,   50,   47,   41,    8,   14,   32,   33,   26,
       47,   26,   41,   26,   28,   28,   47,   28,   28,   41,
       28,   30,   30,   30,   35,   37,   39,   42,   46,   50,
       47,   50,   50,   41,   50,   50,   47,   41,    8,   14,
       32,   33,   26,   28,   47,   28,   41,   28,   30,   35,
       37,   39,   42,   46,   47,   50,   41,   50,   50,    8,
       14,   32,   33,   26,   28,   30,   35,   37,   39,   42,
       46,   50,    8,   14,   32,   33,   26,   28,   30,   35,
       37,   39,   42,   46,   50,    8,   14,   32,   33,   26,
       28,   30,   35,   37,   39,   42,   46,   50,    8,   14,

       32,   33,   26,   28,   30,   35,   37,   39,   42,   46,
       50,   45,   26,   45,   28,   28,   45,   30,   50,   45,
       50,   45,   28,   45,   45,   50
    } ;

static const short int yy_accept[2590] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    2,    3,    3,
        3,    3,    3,    4,    5,    6,    7,    8,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,   10,   11,   11,   11,   12,   13,   14,   16,   17,
       19,   22,   25,   28,   31,   34,   37,   40,   43,   46,
       49,   52,   56,   58,   63,   67,   71,   75,   79,   83,
       87,   91,   95,   99,  102,  105,  108,  111,  114,  117,
      120,  123,  126,  129,  132,  134,  138,  140,  144,  147,
      152,  155,  159,  163,  167,  171,  175,  179,  183,  187,
      191,  195,  198,  200,  204,  206,  210,  213,  218,  221,

      225,  229,  233,  237,  241,  245,  249,  253,  257,  261,
      264,  268,  272,  276,  281,  286,  291,  296,  301,  306,
      311,  316,  321,  326,  331,  336,  338,  341,  343,  345,
      347,  349,  351,  353,  355,  357,  360,  364,  367,  370,
      373,  376,  379,  382,  385,  388,  392,  395,  399,  403,
      407,  411,  415,  419,  423,  427,  431,  437,  441,  446,
      451,  456,  461,  466,  471,  476,  481,  486,  490,  494,
      498,  502,  506,  510,  514,  518,  522,  526,  529,  533,
      537,  541,  545,  549,  553,  557,  561,  565,  569,  573,
      578,  584,  589,  594,  599,  604,  609,  614,  619,  624,

      629,  633,  637,  641,  645,  649,  653,  657,  661,  665,
      669,  673,  676,  680,  686,  690,  695,  699,  703,  707,
      711,  715,  719,  723,  727,  731,  735,  738,  742,  746,
      751,  755,  759,  763,  767,  771,  775,  779,  783,  787,
      791,  794,  798,  802,  807,  811,  815,  819,  823,  827,
      831,  835,  839,  843,  847,  850,  852,  856,  859,  863,
      867,  871,  875,  879,  883,  887,  891,  895,  899,  902,
      904,  908,  911,  915,  919,  923,  927,  931,  935,  939,
      943,  947,  951,  954,  958,  962,  967,  971,  975,  979,
      983,  987,  991,  995,  999, 1003, 1007, 1010, 1013, 1017,

     1021, 1025, 1029, 1033, 1037, 1041, 1045, 1049, 1053, 1057,
     1062, 1067, 1072, 1077, 1082, 1087, 1092, 1097, 1102, 1106,
     1110, 1114, 1118, 1122, 1126, 1130, 1134, 1138, 1142, 1145,
     1148, 1150, 1153, 1155, 1158, 1161, 1164, 1167, 1170, 1172,
     1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182,
     1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1184, 1185, 1185, 1185, 1185, 1185, 1186,
     1186, 1186, 1186, 1186, 1187, 1188, 1189, 1190, 1191, 1192,
     1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1200, 1200,
     1200, 1200, 1200, 1200, 1201, 1202, 1203, 1204, 1205, 1206,

     1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1217,
     1219, 1221, 1223, 1225, 1227, 1229, 1231, 1233, 1235, 1237,
     1239, 1241, 1243, 1243, 1244, 1244, 1244, 1244, 1244, 1244,
     1244, 1244, 1244, 1244, 1244, 1244, 1246, 1247, 1248, 1249,
     1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259,
     1260, 1261, 1262, 1263, 1265, 1267, 1269, 1271, 1273, 1275,
     1277, 1279, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288,
     1289, 1290, 1291, 1292, 1293, 1294, 1296, 1297, 1298, 1300,
     1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310,
     1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320,

     1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330,
     1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340,
     1341, 1342, 1342, 1342, 1342, 1342, 1343, 1344, 1345, 1346,
     1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356,
     1357, 1357, 1357, 1357, 1357, 1357, 1358, 1359, 1360, 1361,
     1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371,
     1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381,
     1382, 1383, 1384, 1385, 1386, 1386, 1387, 1388, 1389, 1390,
     1392, 1394, 1396, 1398, 1400, 1402, 1403, 1405, 1407, 1408,
     1409, 1410, 1411, 1412, 1413, 1414, 1415, 1416, 1417, 1418,

     1419, 1420, 1421, 1422, 1423, 1424, 1425, 1426, 1426, 1427,
     1427, 1427, 1428, 1428, 1428, 1428, 1428, 1428, 1428, 1428,
     1428, 1428, 1428, 1428, 1428, 1428, 1428, 1429, 1430, 1431,
     1431, 1432, 1433, 1434, 1435, 1435, 1436, 1437, 1438, 1439,
     1440, 1441, 1442, 1443, 1444, 1445, 1446, 1447, 1448, 1449,
     1450, 1451, 1451, 1452, 1453, 1453, 1454, 1455, 1456, 1457,
     1458, 1459, 1460, 1461, 1462, 1463, 1464, 1465, 1466, 1467,
     1469, 1471, 1473, 1475, 1477, 1478, 1480, 1482, 1484, 1486,
     1488, 1490, 1492, 1494, 1494, 1494, 1495, 1496, 1497, 1498,
     1500, 1501, 1502, 1503, 1504, 1505, 1506, 1507, 1508, 1509,

     1510, 1511, 1512, 1513, 1515, 1516, 1517, 1519, 1520, 1521,
     1522, 1523, 1524, 1525, 1526, 1527, 1528, 1529, 1530, 1531,
     1532, 1533, 1535, 1536, 1537, 1538, 1539, 1540, 1541, 1542,
     1543, 1544, 1545, 1546, 1547, 1548, 1549, 1550, 1551, 1552,
     1553, 1554, 1555, 1556, 1557, 1558, 1559, 1560, 1561, 1562,
     1563, 1564, 1565, 1566, 1567, 1568, 1569, 1570, 1571, 1572,
     1573, 1574, 1575, 1576, 1577, 1578, 1579, 1580, 1581, 1581,
     1582, 1583, 1584, 1585, 1586, 1587, 1588, 1589, 1590, 1591,
     1592, 1593, 1594, 1595, 1596, 1597, 1597, 1597, 1598, 1599,
     1600, 1601, 1602, 1603, 1604, 1605, 1606, 1607, 1608, 1609,

     1610, 1611, 1612, 1613, 1614, 1615, 1616, 1617, 1618, 1619,
     1620, 1621, 1622, 1623, 1624, 1625, 1626, 1628, 1630, 1630,
     1631, 1632, 1633, 1634, 1635, 1636, 1638, 1639, 1640, 1641,
     1642, 1643, 1644, 1645, 1646, 1647, 1648, 1649, 1650, 1651,
     1652, 1654, 1654, 1655, 1656, 1656, 1656, 1656, 1656, 1656,
     1656, 1656, 1656, 1656, 1656, 1656, 1656, 1656, 1657, 1658,
     1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668,
     1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678,
     1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1688, 1690,
     1692, 1694, 1696, 1698, 1700, 1702, 1704, 1706, 1708, 1710,

     1712, 1712, 1713, 1714, 1715, 1716, 1718, 1719, 1720, 1721,
     1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731,
     1732, 1734, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743,
     1744, 1745, 1746, 1747, 1748, 1749, 1751, 1752, 1753, 1754,
     1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764,
     1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774,
     1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784,
     1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794,
     1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804,
     1804, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812,

     1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822,
     1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1830, 1830,
     1830, 1831, 1832, 1833, 1834, 1836, 1838, 1839, 1840, 1841,
     1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851,
     1853, 1854, 1854, 1854, 1854, 1855, 1855, 1856, 1856, 1856,
     1856, 1856, 1856, 1856, 1856, 1856, 1856, 1857, 1858, 1859,
     1860, 1861, 1862, 1863, 1864, 1865, 1866, 1867, 1868, 1869,
     1870, 1871, 1872, 1873, 1874, 1875, 1876, 1877, 1878, 1879,
     1880, 1881, 1883, 1885, 1887, 1889, 1891, 1892, 1894, 1896,
     1898, 1900, 1902, 1903, 1904, 1905, 1906, 1907, 1908, 1910,

     1912, 1913, 1914, 1915, 1916, 1917, 1918, 1919, 1920, 1921,
     1923, 1924, 1925, 1926, 1928, 1929, 1931, 1932, 1933, 1934,
     1935, 1936, 1937, 1938, 1939, 1940, 1941, 1942, 1943, 1944,
     1945, 1946, 1947, 1948, 1949, 1950, 1951, 1952, 1953, 1954,
     1955, 1956, 1957, 1958, 1959, 1960, 1961, 1962, 1963, 1964,
     1965, 1966, 1967, 1968, 1969, 1970, 1971, 1972, 1973, 1974,
     1975, 1976, 1977, 1978, 1979, 1980, 1981, 1982, 1983, 1984,
     1985, 1986, 1986, 1986, 1986, 1987, 1988, 1989, 1990, 1991,
     1992, 1993, 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001,
     2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,

     2012, 2014, 2015, 2016, 2017, 2019, 2020, 2022, 2023, 2024,
     2025, 2026, 2027, 2028, 2029, 2030, 2031, 2031, 2031, 2032,
     2033, 2033, 2033, 2033, 2033, 2033, 2033, 2033, 2033, 2033,
     2034, 2035, 2036, 2037, 2038, 2039, 2040, 2041, 2042, 2043,
     2044, 2045, 2046, 2047, 2048, 2049, 2050, 2051, 2052, 2053,
     2054, 2055, 2056, 2057, 2058, 2060, 2062, 2064, 2066, 2068,
     2070, 2072, 2074, 2075, 2077, 2079, 2080, 2081, 2082, 2083,
     2084, 2085, 2086, 2087, 2088, 2089, 2090, 2091, 2092, 2093,
     2094, 2095, 2097, 2099, 2100, 2101, 2102, 2103, 2104, 2105,
     2106, 2107, 2108, 2109, 2110, 2111, 2112, 2113, 2114, 2115,

     2116, 2117, 2118, 2119, 2120, 2121, 2122, 2123, 2124, 2125,
     2126, 2127, 2128, 2129, 2130, 2131, 2132, 2133, 2134, 2135,
     2136, 2137, 2138, 2139, 2140, 2141, 2142, 2143, 2144, 2145,
     2146, 2147, 2148, 2149, 2150, 2151, 2152, 2152, 2152, 2152,
     2153, 2154, 2155, 2156, 2157, 2158, 2159, 2160, 2161, 2162,
     2163, 2164, 2165, 2166, 2167, 2168, 2169, 2170, 2171, 2172,
     2173, 2174, 2175, 2176, 2177, 2178, 2179, 2181, 2183, 2184,
     2185, 2186, 2187, 2188, 2189, 2190, 2191, 2192, 2192, 2192,
     2192, 2192, 2192, 2192, 2192, 2192, 2192, 2192, 2193, 2193,
     2194, 2195, 2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203,

     2204, 2205, 2206, 2207, 2208, 2209, 2210, 2211, 2212, 2213,
     2214, 2215, 2216, 2218, 2220, 2222, 2224, 2226, 2228, 2230,
     2232, 2234, 2236, 2237, 2238, 2239, 2240, 2241, 2242, 2243,
     2244, 2245, 2246, 2247, 2248, 2250, 2251, 2252, 2253, 2254,
     2255, 2256, 2257, 2258, 2259, 2260, 2261, 2263, 2264, 2265,
     2266, 2267, 2268, 2269, 2270, 2271, 2272, 2273, 2274, 2275,
     2276, 2277, 2278, 2279, 2280, 2281, 2282, 2283, 2284, 2285,
     2286, 2287, 2288, 2289, 2290, 2291, 2292, 2293, 2294, 2295,
     2296, 2297, 2298, 2299, 2300, 2301, 2302, 2303, 2304, 2305,
     2305, 2305, 2305, 2306, 2307, 2308, 2309, 2310, 2311, 2312,

     2313, 2314, 2315, 2316, 2317, 2318, 2319, 2320, 2321, 2322,
     2323, 2324, 2325, 2326, 2327, 2328, 2329, 2330, 2331, 2332,
     2333, 2334, 2335, 2336, 2337, 2338, 2340, 2341, 2341, 2341,
     2341, 2341, 2341, 2341, 2341, 2341, 2341, 2342, 2342, 2343,
     2344, 2345, 2346, 2347, 2348, 2349, 2350, 2351, 2352, 2353,
     2354, 2355, 2356, 2357, 2358, 2359, 2360, 2361, 2362, 2363,
     2364, 2366, 2367, 2369, 2371, 2372, 2374, 2376, 2378, 2380,
     2381, 2382, 2383, 2384, 2385, 2386, 2387, 2388, 2389, 2390,
     2391, 2392, 2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401,
     2402, 2403, 2405, 2406, 2408, 2409, 2410, 2411, 2412, 2413,

     2414, 2415, 2416, 2417, 2418, 2419, 2420, 2421, 2422, 2423,
     2424, 2425, 2426, 2427, 2428, 2429, 2430, 2431, 2432, 2433,
     2434, 2435, 2436, 2437, 2438, 2439, 2440, 2441, 2442, 2443,
     2444, 2445, 2445, 2445, 2445, 2446, 2447, 2448, 2449, 2450,
     2451, 2452, 2453, 2454, 2455, 2456, 2457, 2458, 2459, 2460,
     2461, 2462, 2463, 2464, 2465, 2466, 2467, 2468, 2469, 2470,
     2471, 2472, 2473, 2474, 2475, 2477, 2478, 2480, 2480, 2481,
     2481, 2481, 2481, 2481, 2481, 2482, 2482, 2482, 2482, 2483,
     2483, 2483, 2484, 2485, 2486, 2487, 2488, 2489, 2490, 2491,
     2492, 2493, 2494, 2495, 2496, 2497, 2498, 2499, 2500, 2501,

     2502, 2504, 2506, 2508, 2509, 2511, 2513, 2515, 2516, 2517,
     2518, 2520, 2521, 2522, 2523, 2524, 2526, 2527, 2528, 2530,
     2531, 2533, 2534, 2536, 2537, 2538, 2539, 2540, 2541, 2543,
     2544, 2545, 2546, 2548, 2549, 2550, 2552, 2554, 2555, 2556,
     2557, 2558, 2559, 2560, 2561, 2562, 2563, 2564, 2565, 2566,
     2567, 2568, 2569, 2570, 2571, 2572, 2573, 2574, 2575, 2576,
     2577, 2578, 2579, 2580, 2581, 2582, 2583, 2584, 2585, 2586,
     2586, 2586, 2586, 2587, 2588, 2589, 2590, 2591, 2592, 2593,
     2594, 2595, 2596, 2597, 2598, 2599, 2600, 2601, 2602, 2603,
     2604, 2606, 2607, 2608, 2609, 2610, 2611, 2613, 2614, 2615,

     2616, 2618, 2619, 2620, 2622, 2624, 2625, 2625, 2625, 2625,
     2625, 2625, 2625, 2626, 2626, 2626, 2627, 2627, 2628, 2629,
     2630, 2631, 2632, 2633, 2634, 2635, 2636, 2637, 2638, 2639,
     2640, 2641, 2642, 2643, 2644, 2645, 2646, 2647, 2648, 2650,
     2652, 2654, 2656, 2658, 2660, 2662, 2664, 2666, 2667, 2668,
     2669, 2670, 2671, 2672, 2673, 2674, 2675, 2676, 2677, 2679,
     2680, 2681, 2682, 2683, 2684, 2685, 2687, 2688, 2689, 2691,
     2692, 2694, 2695, 2696, 2697, 2698, 2699, 2700, 2701, 2702,
     2703, 2704, 2705, 2706, 2707, 2708, 2709, 2710, 2711, 2712,
     2713, 2714, 2715, 2716, 2717, 2718, 2719, 2720, 2721, 2722,

     2723, 2724, 2725, 2726, 2727, 2728, 2729, 2730, 2730, 2730,
     2730, 2731, 2732, 2733, 2734, 2735, 2736, 2737, 2738, 2739,
     2740, 2741, 2742, 2743, 2744, 2745, 2746, 2747, 2748, 2749,
     2750, 2752, 2753, 2754, 2755, 2756, 2757, 2758, 2760, 2761,
     2762, 2764, 2765, 2767, 2767, 2767, 2767, 2768, 2768, 2768,
     2768, 2768, 2769, 2769, 2769, 2770, 2771, 2772, 2772, 2773,
     2774, 2775, 2776, 2777, 2778, 2779, 2780, 2781, 2782, 2783,
     2784, 2785, 2786, 2788, 2790, 2792, 2794, 2796, 2798, 2799,
     2800, 2801, 2802, 2803, 2804, 2806, 2807, 2808, 2809, 2811,
     2812, 2814, 2815, 2816, 2817, 2819, 2820, 2821, 2822, 2823,

     2825, 2826, 2827, 2829, 2830, 2831, 2832, 2833, 2834, 2835,
     2836, 2837, 2838, 2839, 2840, 2841, 2842, 2843, 2844, 2845,
     2846, 2847, 2848, 2849, 2850, 2851, 2852, 2853, 2854, 2855,
     2856, 2856, 2856, 2857, 2858, 2859, 2860, 2861, 2862, 2863,
     2864, 2865, 2866, 2867, 2868, 2869, 2870, 2871, 2872, 2873,
     2874, 2875, 2877, 2878, 2879, 2880, 2881, 2883, 2884, 2885,
     2887, 2887, 2887, 2888, 2888, 2888, 2888, 2889, 2890, 2890,
     2891, 2892, 2892, 2892, 2893, 2895, 2896, 2897, 2898, 2899,
     2900, 2901, 2902, 2903, 2904, 2905, 2907, 2909, 2911, 2913,
     2915, 2916, 2917, 2919, 2920, 2921, 2922, 2923, 2925, 2926,

     2927, 2928, 2930, 2931, 2932, 2933, 2935, 2937, 2938, 2940,
     2941, 2942, 2943, 2944, 2945, 2946, 2947, 2948, 2949, 2950,
     2951, 2952, 2953, 2954, 2955, 2956, 2957, 2958, 2959, 2960,
     2961, 2961, 2961, 2962, 2962, 2962, 2962, 2963, 2964, 2965,
     2966, 2967, 2968, 2969, 2970, 2971, 2972, 2973, 2974, 2976,
     2977, 2978, 2980, 2981, 2982, 2983, 2985, 2987, 2988, 2990,
     2990, 2990, 2990, 2990, 2991, 2992, 2992, 2993, 2993, 2994,
     2995, 2996, 2997, 2998, 2999, 3000, 3002, 3004, 3006, 3007,
     3008, 3009, 3010, 3012, 3014, 3015, 3016, 3017, 3018, 3020,
     3022, 3023, 3025, 3026, 3027, 3028, 3029, 3030, 3031, 3032,

     3033, 3034, 3035, 3036, 3037, 3038, 3039, 3039, 3039, 3040,
     3040, 3040, 3040, 3040, 3040, 3040, 3040, 3041, 3042, 3043,
     3044, 3045, 3046, 3047, 3048, 3049, 3050, 3051, 3053, 3055,
     3056, 3058, 3058, 3058, 3058, 3059, 3060, 3061, 3062, 3063,
     3064, 3065, 3066, 3068, 3070, 3072, 3073, 3074, 3075, 3076,
     3077, 3078, 3080, 3082, 3083, 3084, 3085, 3086, 3087, 3088,
     3089, 3090, 3091, 3092, 3093, 3094, 3094, 3094, 3096, 3096,
     3097, 3098, 3099, 3100, 3101, 3102, 3103, 3104, 3105, 3107,
     3109, 3109, 3109, 3109, 3110, 3111, 3112, 3113, 3114, 3115,
     3117, 3119, 3121, 3122, 3123, 3124, 3125, 3126, 3127, 3128,

     3129, 3130, 3131, 3132, 3133, 3134, 3135, 3136, 3137, 3138,
     3139, 3140, 3141, 3142, 3143, 3144, 3145, 3146, 3147, 3148,
     3149, 3149, 3149, 3149, 3150, 3151, 3152, 3153, 3154, 3155,
     3157, 3159, 3161, 3162, 3163, 3164, 3165, 3166, 3167, 3168,
     3169, 3170, 3171, 3172, 3173, 3174, 3175, 3176, 3177, 3178,
     3179, 3180, 3181, 3182, 3183, 3184, 3185, 3186, 3187, 3188,
     3188, 3188, 3188, 3189, 3190, 3191, 3192, 3193, 3194, 3196,
     3198, 3199, 3200, 3201, 3202, 3203, 3204, 3205, 3206, 3207,
     3208, 3209, 3210, 3211, 3212, 3213, 3214, 3215, 3216, 3217,
     3218, 3219, 3220, 3221, 3222, 3223, 3224, 3225, 3226, 3226,

     3226, 3226, 3227, 3228, 3229, 3230, 3231, 3232, 3234, 3236,
     3238, 3239, 3240, 3241, 3242, 3243, 3244, 3245, 3246, 3247,
     3248, 3249, 3250, 3251, 3252, 3253, 3254, 3255, 3256, 3257,
     3258, 3259, 3260, 3261, 3262, 3263, 3264, 3265, 3265, 3265,
     3265, 3266, 3267, 3268, 3269, 3270, 3271, 3273, 3275, 3277,
     3278, 3279, 3280, 3281, 3282, 3283, 3284, 3285, 3286, 3287,
     3288, 3289, 3290, 3291, 3292, 3293, 3294, 3295, 3296, 3297,
     3298, 3299, 3300, 3301, 3302, 3303, 3304, 3304, 3305, 3305,
     3306, 3306, 3307, 3308, 3310, 3312, 3314, 3315, 3316, 3318,
     3319, 3321, 3322, 3323, 3324, 3325, 3326, 3327, 3328, 3329,

     3330, 3331, 3333, 3334, 3336, 3337, 3338, 3339, 3339, 3340,
     3341, 3343, 3344, 3346, 3348, 3349, 3350, 3351, 3352, 3353,
     3354, 3355, 3357, 3359, 3360, 3360, 3361, 3362, 3364, 3365,
     3366, 3367, 3368, 3369, 3370, 3371, 3372, 3373, 3373, 3374,
     3375, 3377, 3378, 3379, 3380, 3381, 3382, 3383, 3384, 3385,
     3386, 3386, 3387, 3388, 3390, 3391, 3392, 3393, 3394, 3395,
     3396, 3397, 3398, 3399, 3399, 3400, 3401, 3403, 3404, 3405,
     3406, 3407, 3408, 3409, 3410, 3411, 3412, 3412, 3413, 3415,
     3416, 3418, 3419, 3420, 3422, 3423, 3425, 3427, 3427
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    5,    6,    7,    6,    6,    6,    6,    6,    8,
        9,    6,   10,   11,   12,   13,   14,   15,   16,   17,
       17,   17,   18,   19,   19,   20,   21,   22,   23,   24,
       25,   26,   27,   28,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   39,   55,   39,
       29,   30,   31,    6,    6,    6,   32,   33,   34,   35,

       36,   37,   38,   39,   40,   41,   42,   43,   44,   45,
       46,   47,   48,   49,   50,   51,   52,   53,   54,   39,
       55,   39,    6,    6,    6,    6,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[56] =
    {   0,
        1,    2,    3,    3,    4,    5,    6,    6,    6,    5,
        7,    5,    8,    9,    5,    5,    5,    5,    5,    5,
        5,    7,    7,    7,    9,    7,    5,    7,    7,    7,
        7,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5
    } ;

static const short int yy_base[2642] =
    {   0,
        0,   28,   81,    0,  109,  140,  195,  226,  281,  336,
      382,  423,  473,  501,  554,  582,  637,  668,  723,  754,
      809,  840,  895,  926,  981, 1012, 1067, 1098, 1153, 1181,
       12,   16,    0,    0, 1236, 1266, 5883, 5884, 5884, 5879,
     5876, 5884, 5875, 5874, 5873, 5872, 5871, 5870, 5869, 5868,
     5884, 5884, 5869, 5866, 5884, 5865, 5864, 5863, 5862, 5861,
     5860, 5859, 5858, 5828,   53, 5829, 5811, 5814, 5822,   55,
     5821,   72, 5810,    0,  404,   88, 1247,    0,  449,   92,
     1252, 5821,   54, 5822, 5804, 5807, 5815,   62, 5814,  360,
     5803,    0, 1257, 5843, 1287,    0, 1296, 5842, 1303, 5812,

      167, 5813, 5795, 5798, 5806,   85, 5805,  368, 5794,    0,
     5834, 1313,    0, 5833, 1325, 1335, 1345,  384,  376,  402,
      176,  425,  436, 1276,  403,  472,  553,   49, 5801, 5800,
      361, 5803, 5788, 5799, 5796,  636,  722,   76,   94,  779,
      363,  175, 5785, 5796,  393, 5824,    0,    0, 5823, 5822,
     5821, 5820, 5819,  419, 5818, 5817, 5816,    0,    0, 5815,
     5814, 5813, 5812, 5811,  458, 5810, 5809, 5779,  529, 5780,
     5762, 5765, 5773,  169, 5772, 1211, 5761, 5801, 5800, 5799,
     5798, 5797, 5796, 5795, 5794, 5793, 5792, 5791, 5790, 5789,
     5788, 5787, 5786, 5785, 5784, 5783, 5782, 5781, 5780, 5779,

     1260, 1275, 1279, 1237, 1297,  426, 1308, 1288, 1325, 1274,
     5778, 5777, 5776, 5775, 5774, 5773, 1280, 1341, 1324, 1331,
     1338, 1348, 1349, 1358, 1359, 1353,    0, 5772,    0, 5771,
     5741,  790, 5742, 5724, 5727, 5735,  524, 5734, 1329, 5723,
        0, 5763,    0, 5762, 5732,  867, 5733, 5715, 5718, 5726,
      607, 5725, 1330, 5714,    0, 1399,    0, 1411, 5725,  876,
     5726, 5708, 5711, 5719,  693, 5718, 1338, 5707, 5739, 1418,
     5738, 1429,  974, 1363, 1354,  408, 1360, 1259, 1404, 1411,
     1413, 1414,    0, 5745,    0, 5744, 5714, 1039, 5715, 5697,
     5700, 5708,  783, 5707, 1356, 5696, 5736, 1465, 5735, 5734,

     5733, 5732, 5731, 5730, 1366, 5729, 5728, 5727, 1472, 5726,
     5725, 5724, 5723, 5722, 5721, 1383, 5720, 5719, 1373, 1437,
     1423, 1432, 1393, 1446, 1448, 1451, 1453, 1434,    4,    5,
     5884,  478, 5884, 1488, 1489, 1494, 5884, 5884,    0, 5884,
     5718, 5717, 5716, 5715, 5714, 5713, 5712, 5711, 5710, 5884,
     5680, 1072,  781, 5662, 5666, 5699, 5655, 5659, 5664, 1125,
     5662, 5673, 1158,    0, 5698, 1505, 1524,    0, 1405, 5673,
     1512, 1535,    0, 5669, 1430,  785, 5651, 5655, 5688, 5644,
     5648, 5653, 1464, 5651, 5662, 1441,    0, 5687, 1543,    0,
     5662, 1554,    0, 5658, 1456,  867, 5640, 5644, 5677, 5633,

     5637, 5642, 1486, 5640, 5651, 1481,    0, 1574, 1416, 1451,
     1529, 1526, 1528, 1458, 1564, 1554, 1553, 1534, 1567, 1571,
     1573, 1606,  981, 1606, 5634, 5644, 5647, 5647, 5634,   84,
      445, 5625, 5626, 5629,  169, 5670,    0, 1509, 5640, 1547,
      870, 5622, 5626, 5659, 5615, 5619, 5624, 1595, 5622, 5633,
     1613, 5660, 5659, 5658, 5657, 5656, 5655, 5654, 5653, 5652,
     5651, 5650, 1548, 1625, 1592,   85, 1597, 1074, 1576, 1517,
     1607, 1628, 1610, 1363, 1634, 5649, 5648, 5647, 5646, 1629,
     1636, 1633, 1639, 1640, 1076, 1591, 1527, 1643, 1645, 1644,
     1648, 1649,    0, 5616, 1652, 1038, 5598, 5602, 5635, 5591,

     5595, 5600, 1633, 5598, 5609, 1654,    0, 5607, 1661, 1123,
     5589, 5593, 5626, 5582, 5586, 5591, 1651, 5589, 5600, 1679,
        0, 5625, 1692, 1701,    0, 5597, 1695, 1125, 5579, 5583,
     5616, 5572, 5576, 5581, 1673, 5579, 5590, 1704, 5609, 5608,
     5613, 1711, 1731, 1741,    0, 1487, 1706, 1708, 1678, 1710,
     1161, 1711, 1712, 1714, 1717, 1724,  548, 1750,    0, 5585,
     1735, 1616, 5567, 5571, 5604, 5560, 5564, 5569, 1713, 5567,
     5578, 1754, 5605, 5604, 5601, 1776, 1783,  900, 1667, 5602,
     5601, 5600, 5599, 5598, 5597, 1760, 5596, 5595, 1762, 1769,
     1765, 1744, 1768, 1770, 1734, 1787, 1788, 1789, 1793, 1792,

     1794, 1082, 1799, 1800, 1813, 1815, 1817,    0, 1819, 1806,
     1822, 5594, 5554, 5546, 5560, 5551, 5545, 5539, 5542, 5555,
     5554, 5553, 5545, 5552, 5545, 1824, 5580, 5884, 5577, 1849,
     5533, 1757, 5884, 5551, 1856, 1826, 5537, 5529, 5543, 5534,
     5528, 5522, 5525, 5538, 5537, 5536, 5528, 5535, 5528, 5884,
     5561, 1861, 5884, 5536, 1868, 1862, 5522, 5514, 5528, 5519,
     5513, 5507, 5510, 5523, 5522, 5521, 5513, 5520, 5513, 1870,
     1796, 1842, 1844, 1861, 5504, 1848, 1862, 1867, 1875, 1881,
     1876, 1889, 1884, 1921, 1928, 5884, 5502, 1783, 1878, 5546,
     5506, 5498, 5512, 5503, 5497, 5491, 5494, 5507, 5506, 5505,

     5497, 5504, 5497, 5532, 1884, 1909, 5531, 1830, 1915, 1921,
     1923, 1924, 1927, 1928, 1929, 1946, 1947, 1798, 1945, 1948,
     1949, 5530, 1950, 1953, 1951, 1954, 1955, 1956, 1957, 1958,
     1959, 1963, 1965, 1971, 1834, 1969, 1972, 1964, 1974, 5490,
     5482, 5496, 5487, 5481, 5475, 5478, 5491, 5490, 5489, 5481,
     5488, 5481, 1980, 5477, 5469, 5483, 5474, 5468, 5462, 5465,
     5478, 5477, 5476, 5468, 5475, 5468, 5884, 5501, 2013, 1988,
     5463, 5455, 5469, 5460, 5454, 5448, 5451, 5464, 5463, 5462,
     5454, 5461, 5454, 5884, 5487, 2043, 2021, 2014, 1977, 1979,
     1975, 1985, 1984, 1981, 1990, 1995, 2019, 2021, 2024, 2025,

     2028, 2034, 5449, 5441, 5455, 5446, 5440, 5434, 5437, 5450,
     5449, 5448, 5440, 5447, 5440, 5884,  986, 5475, 2061, 2073,
     2083, 2044, 2047, 2037, 2048, 5474, 2049, 2053, 2056, 2066,
     2067, 2074, 2076, 2084, 2091, 2094, 2095, 2077, 2096, 2097,
     5473, 2100, 5472, 5471, 5439, 5438, 2101, 2102, 5437, 5426,
     5439, 5458, 5429, 5419, 5412, 5430, 5429, 5459, 5417, 5450,
     5424, 5424, 5423, 2103, 2109, 5422, 5411, 5424, 5443, 5414,
     5404, 5397, 5415, 5414, 5413, 5412, 2110, 2112, 5411, 5400,
     5413, 5432, 5403, 5393, 5386, 5404, 5403, 2075, 2099, 2124,
     2131, 2105, 2106, 2110, 2135, 2109, 2114, 2116, 2130, 2138,

     2170, 5884, 5392, 5425, 5399, 5430, 5398, 5397, 2156, 2170,
     5396, 5385, 5398, 5411, 5339, 5312, 5297, 5307, 5298, 2174,
     5320, 5311, 2162, 2163, 2175, 2178, 2168, 2113, 2177, 2189,
     2188, 2190, 2152, 2197, 2198, 5302, 2200, 2201, 2205, 2203,
     2207, 2206, 2208, 2211, 2209, 2210, 2212, 2213, 2215, 2219,
     5262, 5256, 2214, 2218, 5253, 5235, 5230, 5249, 5220, 5199,
     5192, 5199, 5198, 5197, 5194, 2222, 2225, 5193, 5182, 5193,
     5212, 5183, 5165, 5150, 5168, 5167, 5164, 5163, 2226, 2227,
     5162, 5131, 5144, 5163, 5114, 5104, 5097, 4983, 4982, 2255,
     2305, 2233, 2239, 2258, 2259, 2240, 2232, 2252, 2254, 2257,

     2225, 2222, 2260, 2266, 4981, 4980, 2277, 2278, 4979,  420,
      534,  637,  618,  615,  680,  708,  714, 2285, 2315,    0,
     2286, 2289, 2288, 2299,  816,  822, 2290, 2293, 2306, 2308,
     2298, 2318, 2309, 2319, 2322, 2328, 2331, 2332, 2333,  911,
     1160, 1126, 1201, 2335, 1310, 2337, 1459, 1483, 1615, 1635,
     1802, 1828, 1948, 1975, 2105, 2192, 2327, 2311, 2332, 2301,
     2302, 2301, 2300, 2312, 2298, 2299, 2317, 2342, 2309, 2326,
     2316, 2318, 2318, 2317, 2329, 2317, 2318, 2336, 2361, 2325,
     2341, 2342, 2344, 2345, 2347, 2360, 2327, 2349, 2363, 2370,
     2366, 2367, 5884, 2372, 2353, 2391, 2360, 2362, 2403, 2405,

     2364, 2365, 2379, 2365, 2366, 2384, 2409, 2373, 2389, 2419,
     2420, 2421, 2422, 2423, 2424, 2425, 2426, 2427, 2429, 2428,
     2430, 2432, 2431, 2433, 2435, 2434, 2440, 2436, 2437, 2442,
     2443, 2446, 2444, 2445, 2450, 2448, 2447, 2456, 2409, 2411,
     2410, 2413, 2425, 2411, 2417, 2435, 2460, 2425, 2441, 2432,
     2433, 2433, 2438, 2450, 2438, 2440, 2458, 2483, 2450, 2466,
     2456, 2457, 2456, 2455, 2467, 2453, 2454, 2472, 2497, 2461,
     2477, 2511, 2518, 2530, 2504, 2511, 2514, 2513, 2515, 2516,
     2523, 2527, 2526, 2529, 2530, 2499, 2500, 2499, 2498, 2512,
     2498, 2499, 2518, 2543, 2509, 2525, 2558, 2561, 2563, 2565,

     2566, 2567, 2569, 2570, 2574, 2575, 2576, 2577, 2578, 2579,
     2580, 2581, 2582, 2584, 2583, 2585, 2540, 2542, 2589, 2593,
     2556, 2565, 2565, 2566, 2567, 2559, 2554, 2601, 2556, 2588,
     2559, 2590, 2560, 2562, 2572, 2581, 2584, 2585, 2586, 2580,
     2575, 2623, 2578, 2579, 2580, 2592, 2601, 2601, 2602, 2603,
     2595, 2590, 2637, 2592, 2610, 2612, 2614, 2616, 2618, 2619,
     2632, 2635, 2596, 2662, 2636, 2629, 2621, 2652, 2622, 2623,
     2632, 2641, 2641, 2643, 2647, 2640, 2635, 2683, 2638, 2685,
     2686, 2687, 2688, 2689, 2690, 2692, 2693, 2694, 2695, 2696,
     2697, 2698, 2699, 2701, 2702, 2704, 2705, 2706, 2707, 2708,

     2709, 2711, 2710, 2666, 2667, 2677, 2686, 2686, 2687, 2688,
     2681, 2676, 2726, 2683, 2684, 2687, 2701, 2711, 2715, 2718,
     2719, 2711, 2706, 2753, 2708, 2711, 2712, 2721, 2730, 2730,
     2731, 2732, 2724, 2719, 2766, 2721, 2775, 2788, 2795, 2760,
     2761, 2770, 2768, 2772, 2773, 2781, 2771, 2788, 2801, 2791,
     2759, 2764, 2776, 2786, 2786, 2788, 2790, 2782, 2777, 2824,
     2779, 2827, 2826, 2828, 2829, 2830, 2831, 2832, 2835, 2833,
     2836, 2838, 2839, 2840, 2844, 2845, 2846, 2802, 2841, 2799,
     2805, 2844, 2808, 2823, 2825, 2814, 2857, 2856, 2860, 2843,
     2830, 2839, 2819, 2858, 2816, 2823, 2865, 2834, 2849, 2852,

     2841, 2883, 2839, 2878, 2836, 2842, 2881, 2845, 2861, 2864,
     2853, 2895, 2868, 2889, 2869, 2870, 2894, 2873, 2875, 2879,
     2892, 2907, 2888, 2877, 2900, 2880, 2919, 2877, 2883, 2922,
     2887, 2902, 2905, 2896, 2938, 2939, 2940, 2942, 2941, 2943,
     2944, 2945, 2946, 2950, 2952, 2947, 2953, 2954, 2955, 2958,
     2957, 2959, 2960, 2961, 2962, 2966, 2968, 2963, 2969, 2925,
     2965, 2923, 2929, 2968, 2933, 2948, 2952, 2941, 2984, 2938,
     2980, 2940, 2949, 2989, 2953, 2968, 2970, 2961, 3003, 2961,
     3001, 2960, 2966, 3005, 2969, 2984, 2986, 2975, 3017, 3025,
     3033, 3045, 3010, 3029, 3011, 3018, 3031, 3020, 3038, 3040,

     3041, 3054, 3006, 3045, 3003, 3011, 3050, 3015, 3035, 3037,
     3026, 3072, 3073, 3074, 3075, 3076, 3077, 3079, 3080, 3083,
     3086, 3081, 3085, 3087, 3091, 3092, 3093, 3095, 3069, 3087,
     3096, 3063, 3055, 3101, 3071, 3105, 3106, 3107, 3109, 3103,
     3082, 3091, 3120, 3096, 3116, 3127, 3097, 3088, 3135, 3105,
     3138, 3139, 3111, 3133, 3143, 3110, 3102, 3148, 3118, 3150,
     3151, 3123, 3147, 3161, 3124, 3134, 3164, 3141, 3166, 3149,
     3136, 3146, 3177, 3166, 3166, 3186, 3149, 3140, 3187, 3160,
     3197, 3198, 3199, 3200, 3206, 3208, 3209, 3210, 3211, 3217,
     3215, 3218, 3219, 3220, 3221, 3222, 3224, 3223, 3226, 3227,

     3233, 3229, 3234, 3237, 3239, 3212, 3234, 3245, 3208, 3204,
     3253, 3228, 3263, 3264, 3236, 3258, 3267, 3234, 3228, 3274,
     3244, 3276, 3277, 3253, 3271, 3279, 3250, 3241, 3287, 3258,
     3290, 3312, 3319, 3332, 3305, 3290, 3293, 3333, 3289, 3294,
     3335, 3295, 3338, 3306, 3310, 3285, 3342, 3260, 3302, 3349,
     3320, 3353, 3358, 3360, 3361, 3362, 3363, 3365, 3364, 3367,
     3368, 3369, 3374, 3373, 3375, 3377, 3376, 3380, 3378, 3352,
     3352, 3341, 3338, 3399, 3388, 3362, 3361, 3400, 3401, 3358,
     3406, 3407, 3408, 3394, 3376, 3390, 3383, 3385, 3375, 3374,
     3391, 3387, 3379, 3395, 3397, 3384, 3383, 3401, 3397, 3388,

     3406, 3409, 3407, 3394, 3413, 3417, 3415, 3429, 3414, 3431,
     3455, 3428, 3431, 3418, 3418, 3465, 3436, 3432, 3469, 3425,
     3471, 3472, 3473, 3474, 3476, 3475, 3477, 3478, 3479, 3480,
     3481, 3482, 3483, 3484, 3485, 3486, 3487, 3490, 3491, 3488,
     3492, 3493, 3494, 3497, 3496, 3498, 3500, 3503, 3473, 3471,
     3480, 3466, 3483, 3479, 3472, 3497, 3491, 3490, 3487, 3505,
     3502, 3493, 3512, 3511, 3500, 3500, 3518, 3514, 3506, 3556,
     3563, 3603, 3549, 3556, 3560, 3562, 3559, 3558, 3564, 3540,
     3543, 3532, 3528, 3547, 3543, 3534, 3590, 3583, 3585, 3594,
     3587, 3591, 3595, 3592, 3597, 3596, 3612, 3614, 3615, 3616,

     3617, 3619, 3620, 3621, 3623, 3624, 3582, 3584, 3630, 3605,
     3592, 3594, 3638, 3639, 3599, 3641, 3645, 3648, 3642, 3663,
     3606, 3607, 3653, 3627, 3613, 3616, 3658, 3618, 3660, 3616,
     3618, 3673, 3641, 3630, 3633, 3676, 3637, 3679, 3662, 3663,
     3694, 3668, 3671, 3669, 3699, 3673, 3701, 3698, 3695, 3661,
     3674, 3720, 3694, 3680, 3683, 3726, 3684, 3727, 3729, 3731,
     3732, 3733, 3734, 3736, 3738, 3739, 3741, 3745, 3746, 3747,
     3748, 3749, 3751, 3752, 3753, 3755, 3754, 3756, 3757, 3765,
     3714, 3715, 3766, 3735, 3721, 3726, 3768, 3729, 3771, 3727,
     3729, 3775, 3754, 3742, 3746, 3789, 3749, 3791, 3748, 3754,

     3800, 3774, 3760, 3762, 3804, 3764, 3807, 3813, 3834, 3843,
     3806, 3808, 3818, 3817, 3812, 3811, 3847, 3815, 3849, 3777,
     3782, 3846, 3801, 3795, 3807, 3850, 3817, 3860, 3871, 3861,
     3862, 3870, 3872, 3873, 3874, 3876, 3875, 3879, 3880, 3882,
     3884, 3885, 3886, 3858, 3846, 3889, 3891, 3852, 3862, 3894,
     3895, 3896, 3858, 3903, 3899, 3913, 3928, 3885, 3880, 3884,
     3879, 3867, 3870, 3882, 3921, 3874, 3890, 3880, 3893, 3904,
     3939, 3897, 3914, 3928, 3931, 3932, 3958, 3936, 3967, 3920,
     3942, 3921, 3915, 3917, 3966, 3927, 3937, 3974, 3984, 3945,
     3986, 3988, 3989, 3990, 3992, 3993, 3994, 3995, 3996, 3997,

     3998, 4001, 4000, 4003, 4002, 4004, 4005, 4006, 4009, 4010,
     4008, 4011, 3985, 3973, 3976, 3988, 4022, 3980, 3994, 3982,
     3989, 3999, 4034, 3995, 4007, 3998, 4001, 4011, 4043, 4006,
     4056, 4086, 4039, 4049, 4053, 4041, 4059, 4054, 4021, 4022,
     4025, 4035, 4070, 4029, 4089, 4075, 4090, 4078, 4080, 4071,
     4079, 4073, 4074, 4092, 4099, 4107, 4077, 4115, 4117, 4118,
     4075, 4079, 4121, 4077, 4125, 4126, 4127, 4128, 4129, 4130,
     4125, 4111, 4112, 4119,    0, 4096, 4100, 4099, 4145, 4148,
     4105, 4109, 4106, 4152, 4153, 4127, 4125, 4131, 4157, 4158,
     4167, 4139, 4143, 4120, 4126, 4128, 4183, 4181, 4184, 4182,

     4188, 4185, 4190, 4191, 4192, 4193, 4194, 4195, 4196, 4197,
     4202, 4203, 4204, 4205, 4206, 4163, 4169, 4166, 4213, 4214,
     4171, 4175, 4172, 4219, 4220, 4174, 4183, 4180, 4227, 4228,
     4253, 4283, 4236, 4313, 4275, 4274, 4231, 4232, 4239, 4246,
     4299, 4188, 4192, 4189, 4242, 4260, 4314, 4297, 4272, 4257,
     4261, 4262, 4276, 4306, 4320, 4293, 4298, 4322, 4300, 4269,
     4273, 4296, 4329, 4330, 4331, 4332, 4334, 4320, 5884, 4306,
     4298, 4312, 4310, 4302, 4316, 4321, 4322, 4323, 4331, 4319,
     4312, 4326, 4359, 4360, 4361, 4365, 4366, 4368, 4369, 4370,
     4371, 4372, 4373, 4374, 4375, 4376, 4377, 4343, 4334, 4348,

     4346, 4337, 4351, 4349, 4341, 4355, 4389, 4369, 4370, 4375,
     4381, 4424, 4416, 4454, 4484, 4423, 4398, 4432, 4409, 4367,
     4364, 4380, 4442, 4413, 4414, 4415, 4445, 4416, 4455, 4458,
     4457, 4418, 4426, 4432, 4465, 4466, 4425, 4433, 4438, 4428,
     4436, 4441, 4449, 4458, 4466, 4431, 4450, 4457, 4489, 4492,
     4494, 4496, 4498, 4500, 4501, 4502, 4461, 4470, 4477, 4468,
     4476, 4481, 4471, 4479, 4484, 4496, 4515, 4517, 4518, 4513,
     4514, 4515, 4482, 4491, 4497, 4529, 4530, 4532, 4534, 4535,
     4491, 4493, 4497, 4497, 4498, 4501, 4501, 4502, 4506, 4523,
     4527, 4531, 4505, 4507, 4510, 4557, 4558, 4561, 4562, 4566,

     4567, 4513, 4524, 4530, 4530, 4531, 4534, 4533, 4534, 4537,
     5884, 4574, 4575, 4578, 4538, 4539, 4543, 4588, 4589, 4592,
     4555, 4556, 4586, 4559, 4560, 4589, 4562, 4563, 4592, 4572,
     4588, 4599, 4565, 4567, 4602, 4610, 4614, 4618, 4615, 4616,
     4619, 4589, 4592, 4623, 4596, 4597, 4626, 4602, 4603, 4632,
     4633, 4634, 4636, 4611, 4612, 4641, 4652, 4653, 4654, 4614,
     4615, 4626, 4617, 4618, 4629, 4621, 4622, 4633, 4636, 4637,
     4636, 4629, 4630, 4641, 4673, 4674, 4675, 4676, 4679, 4680,
     4640, 4641, 4652, 4643, 4644, 4655, 4648, 4649, 4660, 4684,
     4685, 4687, 4653, 4655, 4666, 4698, 4699, 4700, 4661, 4662,

     4663, 4664, 4665, 4667, 4668, 4669, 4670, 4683, 4687, 4692,
     4673, 4679, 4682, 4729, 4730, 4734, 4735, 4736, 4737, 4698,
     4701, 4702, 4703, 4704, 4705, 4706, 4707, 4708, 4741, 4742,
     4743, 4712, 4713, 4714, 4755, 4756, 4757, 4761, 4762, 4729,
     4763, 4767, 4730, 4768, 4771, 4731, 4772, 4773, 4757, 4787,
     4791, 4735, 4792, 4793, 4765, 4799, 4800, 4803, 4805, 4806,
     4737, 4807, 4811, 4783, 4818, 4819, 4786, 4821, 4825, 4812,
     4826, 4827, 4801, 4831, 4834, 4837, 4839, 4840, 4845, 4846,
     4806, 4808, 4809, 4823, 4853, 4854, 4814, 4857, 4858, 4859,
     4860, 4861, 4863, 4865, 4867, 4827, 4828, 4829, 4863, 4831,

     4873, 4875, 4877, 4878, 4879, 4881, 4883, 4854, 4855, 4856,
     4858, 4859, 4891, 4892, 4893, 4895, 4866, 4867, 4868, 4892,
     4871, 4903, 4905, 4906, 4872, 4874, 4875, 4883, 4876, 4913,
     4914, 4880, 4881, 4882, 4911, 4886, 4926, 4887, 4888, 4889,
     4901, 4891, 4932, 4933, 4894, 4895, 4897, 4930, 4899, 4940,
     4910, 4911, 4912, 4918, 4917, 4952, 4953, 4921, 4922, 4923,
     4949, 4925, 4960, 4962, 4964, 4966, 4967, 4971, 4974, 4975,
     4977, 4978, 4987, 4989, 4990, 4998, 4999, 4963, 4965, 5000,
     4968, 5001, 5002, 4969, 4976, 5003, 5005, 5884, 5024, 5033,
     5042, 5051, 5060, 5069, 5078, 5087, 5096, 5105, 5114, 5123,

     5132, 5141, 5146, 5155, 5164, 5169, 5178, 5187, 5192, 5197,
     5202, 5211, 5217, 5222, 5227, 5009, 5236, 5241, 5249, 5254,
     5260, 5269, 5278, 5286, 5295, 5304, 5313, 5322, 5331, 5340,
     5349, 5358, 5367, 5376, 5381, 5386, 5392, 5397, 5406, 5411,
     5420
    } ;

static const short int yy_def[2642] =
    {   0,
     2589, 2588, 2589,    2, 2590, 2588, 2591, 2588, 2588, 2588,
        3,    2, 2592, 2588, 2593, 2588, 2594, 2588, 2595, 2588,
     2596, 2588, 2597, 2588, 2598, 2588, 2599, 2588, 2600, 2588,
     2601, 2601,    3,    2, 2602, 2602, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2603, 2604, 2603, 2605, 2603, 2604, 2603,
     2605, 2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603,
     2603, 2606, 2607, 2606, 2608, 2606, 2607, 2606, 2608, 2606,

     2606, 2606, 2606, 2606, 2606, 2606, 2606, 2606, 2606, 2609,
     2609, 2610, 2609, 2609, 2610, 2610, 2610,  117,  117,  117,
      117,  117,  117,  117,  117, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2611, 2611, 2611, 2611,
     2611, 2611, 2611, 2611, 2611, 2611, 2588, 2611, 2611, 2611,
     2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611,
     2611, 2611, 2611, 2611, 2611, 2611, 2611, 2612, 2612, 2612,
     2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612,
     2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612,

     2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612,
     2613, 2613, 2613, 2613, 2613, 2613, 2613, 2613, 2613, 2613,
     2613, 2613, 2613, 2613, 2613, 2613, 2614, 2614, 2614, 2614,
     2614, 2614, 2614, 2614, 2614, 2614, 2614, 2614, 2614, 2614,
     2615, 2615, 2615, 2615, 2615, 2615, 2615, 2615, 2615, 2615,
     2615, 2615, 2615, 2615, 2616, 2617, 2616, 2617, 2616, 2616,
     2616, 2616, 2616, 2616, 2616, 2616, 2616, 2616, 2618, 2619,
     2618, 2619, 2618, 2618, 2618, 2618, 2618, 2618, 2618, 2618,
     2618, 2618, 2620, 2620, 2620, 2620, 2620, 2620, 2620, 2620,
     2620, 2620, 2620, 2620, 2620, 2620, 2621, 2622, 2621, 2621,

     2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2622, 2621,
     2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621,
     2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2623, 2623,
     2588, 2623, 2588, 2624, 2624, 2624, 2588, 2588, 2625, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2603, 2588, 2604, 2604, 2626, 2603, 2588,
     2605, 2605, 2627, 2603, 2603, 2603, 2603, 2603, 2603, 2603,
     2603, 2603, 2603, 2603, 2603, 2603, 2606, 2588, 2607, 2628,
     2588, 2608, 2629, 2606, 2606, 2606, 2606, 2606, 2606, 2606,

     2606, 2606, 2606, 2606, 2606, 2606, 2609,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2611, 2611, 2611, 2611,
     2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611,
     2611, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612,
     2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612,
     2612, 2612, 2612, 2612, 2612, 2613, 2613, 2613, 2613, 2613,
     2613, 2613, 2613, 2613, 2613, 2613, 2613, 2613, 2613, 2613,
     2613, 2613, 2614, 2614, 2614, 2614, 2614, 2614, 2614, 2614,

     2614, 2614, 2614, 2614, 2614, 2614, 2615, 2615, 2615, 2615,
     2615, 2615, 2615, 2615, 2615, 2615, 2615, 2615, 2615, 2615,
     2616, 2588, 2617, 2617, 2630, 2616, 2616, 2616, 2616, 2616,
     2616, 2616, 2616, 2616, 2616, 2616, 2616, 2616, 2618, 2618,
     2588, 2619, 2619, 2619, 2631, 2618, 2618, 2618, 2618, 2618,
     2618, 2618, 2618, 2618, 2618, 2618, 2618, 2618, 2620, 2620,
     2620, 2620, 2620, 2620, 2620, 2620, 2620, 2620, 2620, 2620,
     2620, 2620, 2621, 2621, 2588, 2622, 2622, 2621, 2632, 2621,
     2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621,
     2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621,

     2621, 2623, 2623, 2623, 2624, 2624, 2624, 2625, 2624, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2604,
     2603, 2603, 2588, 2588, 2605, 2603, 2603, 2603, 2603, 2603,
     2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603, 2588,
     2588, 2607, 2588, 2588, 2608, 2606, 2606, 2606, 2606, 2606,
     2606, 2606, 2606, 2606, 2606, 2606, 2606, 2606, 2606,  117,
      117,  117,  117,  117,  408,  117,  117,  117,  117,  117,
      117,  117,  117, 2588, 2588, 2588, 2611, 2611, 2611, 2611,
     2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611,

     2611, 2611, 2611, 2611, 2612, 2612, 2612, 2612, 2612, 2612,
     2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612,
     2612, 2612, 2613, 2613, 2613, 2613, 2613, 2613, 2613, 2613,
     2613, 2613, 2613, 2613, 2613, 2613, 2613, 2613, 2614, 2614,
     2614, 2614, 2614, 2614, 2614, 2614, 2614, 2614, 2614, 2614,
     2614, 2614, 2615, 2615, 2615, 2615, 2615, 2615, 2615, 2615,
     2615, 2615, 2615, 2615, 2615, 2615, 2588, 2588, 2617, 2616,
     2616, 2616, 2616, 2616, 2616, 2616, 2616, 2616, 2616, 2616,
     2616, 2616, 2616, 2588, 2588, 2619, 2619, 2618, 2618, 2618,
     2618, 2618, 2618, 2618, 2618, 2618, 2618, 2618, 2618, 2618,

     2618, 2620, 2620, 2620, 2620, 2620, 2620, 2620, 2620, 2620,
     2620, 2620, 2620, 2620, 2620, 2588, 2621, 2621, 2633, 2622,
     2622, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621,
     2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621,
     2621, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2603, 2603,
     2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603,
     2603, 2603, 2603, 2603, 2606, 2606, 2606, 2606, 2606, 2606,
     2606, 2606, 2606, 2606, 2606, 2606, 2606,  117,  117,  117,
      117,  117,  117,  117,  117,  117,  117,  117,  117,  117,

     2588, 2588, 2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611,
     2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611, 2612,
     2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612,
     2612, 2612, 2612, 2612, 2612, 2612, 2613, 2613, 2613, 2613,
     2613, 2613, 2613, 2613, 2613, 2613, 2613, 2613, 2613, 2613,
     2614, 2614, 2614, 2614, 2614, 2614, 2614, 2614, 2614, 2614,
     2614, 2614, 2614, 2615, 2615, 2615, 2615, 2615, 2615, 2615,
     2615, 2615, 2615, 2615, 2615, 2615, 2616, 2616, 2616, 2616,
     2616, 2616, 2616, 2616, 2616, 2616, 2616, 2616, 2616, 2619,
     2619, 2618, 2618, 2618, 2618, 2618, 2618, 2618, 2618, 2618,

     2618, 2618, 2618, 2618, 2620, 2620, 2620, 2620, 2620, 2620,
     2620, 2620, 2620, 2620, 2620, 2620, 2620, 2633, 2633, 2634,
     2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621,
     2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2603, 2603, 2603, 2603,
     2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603,
     2606, 2606, 2606, 2606, 2606, 2606, 2606, 2606, 2606, 2606,
     2606,  117,  117,  117,  117,  117,  408,  117,  117,  117,
      117,  117, 2588, 2611, 2611, 2611, 2611, 2611, 2611, 2611,

     2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611, 2612,
     2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612,
     2612, 2612, 2612, 2612, 2612, 2613, 2613, 2613, 2613, 2613,
     2613, 2613, 2613, 2613, 2613, 2613, 2613, 2613, 2614, 2614,
     2614, 2614, 2614, 2614, 2614, 2614, 2614, 2614, 2614, 2615,
     2615, 2615, 2615, 2615, 2615, 2615, 2615, 2615, 2615, 2615,
     2616, 2616, 2616, 2616, 2616, 2616, 2616, 2616, 2616, 2616,
     2616, 2619, 2619, 2619, 2618, 2618, 2618, 2618, 2618, 2618,
     2618, 2618, 2618, 2618, 2618, 2620, 2620, 2620, 2620, 2620,
     2620, 2620, 2620, 2620, 2620, 2620, 2588, 2621, 2621, 2621,

     2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621,
     2621, 2621, 2621, 2621, 2621, 2621, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2603,
     2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603,
     2603, 2603, 2603, 2606, 2606, 2606, 2606, 2606, 2606, 2606,
     2606, 2606, 2606, 2606,  117,  117,  117,  117,  117,  117,
      117,  117,  408,  117,  117, 2611, 2611, 2611, 2611, 2611,
     2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611, 2612,
     2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612,
     2612, 2612, 2613, 2613, 2613, 2613, 2613, 2613, 2613, 2613,

     2613, 2613, 2613, 2614, 2614, 2614, 2614, 2614, 2614, 2614,
     2614, 2614, 2614, 2614, 2615, 2615, 2615, 2615, 2615, 2615,
     2615, 2615, 2615, 2615, 2615, 2616, 2616, 2616, 2616, 2616,
     2616, 2616, 2616, 2616, 2616, 2616, 2619, 2619, 2619, 2618,
     2618, 2618, 2618, 2618, 2618, 2618, 2618, 2618, 2618, 2618,
     2620, 2620, 2620, 2620, 2620, 2620, 2620, 2620, 2620, 2620,
     2620, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621,
     2621, 2621, 2621, 2621, 2621, 2621, 2621, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2603,
     2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603,

     2603, 2603, 2606, 2606, 2606, 2606, 2606, 2606, 2606, 2606,
     2606, 2606,  117,  117,  117,  117,  117,  117,  117,  117,
      117,  117, 2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611,
     2611, 2611, 2611, 2611, 2611, 2611, 2612, 2612, 2612, 2612,
     2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2613, 2613,
     2613, 2613, 2613, 2613, 2613, 2613, 2613, 2613, 2613, 2614,
     2614, 2614, 2614, 2614, 2614, 2614, 2614, 2614, 2614, 2615,
     2615, 2615, 2615, 2615, 2615, 2615, 2615, 2615, 2615, 2616,
     2616, 2616, 2616, 2616, 2616, 2616, 2616, 2616, 2616, 2619,
     2619, 2619, 2618, 2618, 2618, 2618, 2618, 2618, 2618, 2618,

     2618, 2618, 2620, 2620, 2620, 2620, 2620, 2620, 2620, 2620,
     2620, 2620, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621,
     2621, 2621, 2621, 2621, 2621, 2621, 2621, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2603,
     2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603,
     2603, 2606, 2606, 2606, 2606, 2606, 2606, 2606, 2606, 2606,
      117,  408,  117,  117,  408,  117,  117,  117,  117, 2611,
     2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611,
     2611, 2611, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612,
     2612, 2612, 2612, 2612, 2613, 2613, 2613, 2613, 2613, 2613,

     2613, 2613, 2613, 2613, 2614, 2614, 2614, 2614, 2614, 2614,
     2614, 2614, 2614, 2615, 2615, 2615, 2615, 2615, 2615, 2615,
     2615, 2615, 2616, 2616, 2616, 2616, 2616, 2616, 2616, 2616,
     2616, 2619, 2619, 2619, 2618, 2618, 2618, 2618, 2618, 2618,
     2618, 2618, 2618, 2620, 2620, 2620, 2620, 2620, 2620, 2620,
     2620, 2620, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621,
     2621, 2621, 2621, 2621, 2621, 2621, 2621, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2603, 2603, 2603, 2603, 2603, 2603, 2603,
     2603, 2603, 2603, 2606, 2606, 2606, 2606, 2606, 2606, 2606,

      117,  117,  117,  408,  117,  117,  117, 2611, 2611, 2611,
     2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611,
     2611, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612,
     2612, 2612, 2612, 2612, 2612, 2612, 2612, 2613, 2613, 2613,
     2613, 2613, 2613, 2613, 2613, 2613, 2613, 2613, 2614, 2614,
     2614, 2614, 2614, 2614, 2614, 2615, 2615, 2615, 2615, 2615,
     2615, 2615, 2616, 2616, 2616, 2616, 2616, 2616, 2616, 2619,
     2619, 2619, 2618, 2618, 2618, 2618, 2618, 2618, 2618, 2620,
     2620, 2620, 2620, 2620, 2620, 2620, 2621, 2621, 2621, 2621,
     2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621,

     2621, 2621, 2621, 2621, 2621, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2603, 2635,
     2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603, 2603, 2606,
     2606, 2606, 2606, 2606, 2606, 2606, 2606, 2606,  117,  117,
      117,  117,  117,  117,  117,  117,  117, 2611, 2636, 2611,
     2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611, 2612, 2612,
     2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612,
     2612, 2613, 2613, 2613, 2613, 2613, 2613, 2613, 2613, 2613,
     2614, 2614, 2614, 2614, 2614, 2614, 2614, 2614, 2614, 2615,
     2615, 2615, 2615, 2615, 2615, 2615, 2615, 2615, 2616, 2616,

     2616, 2616, 2616, 2616, 2616, 2616, 2616, 2619, 2619, 2619,
     2618, 2618, 2618, 2618, 2618, 2618, 2618, 2618, 2618, 2620,
     2620, 2620, 2620, 2620, 2620, 2620, 2620, 2620, 2621, 2637,
     2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621,
     2621, 2621, 2621, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2603, 2635, 2638, 1957, 2603,
     2603, 2603, 2603, 2603, 2603, 2603, 2606, 2606, 2606, 2606,
     2606, 2606,  117,  117,  117,  117,  117,  117, 2611, 2636,
     2636, 2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611, 2611,
     2611, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612,

     2612, 2612, 2612, 2613, 2613, 2613, 2613, 2613, 2613, 2613,
     2613, 2613, 2614, 2614, 2614, 2614, 2614, 2614, 2615, 2615,
     2615, 2615, 2615, 2615, 2616, 2616, 2616, 2616, 2616, 2616,
     2619, 2639, 2618, 2618, 2618, 2618, 2618, 2618, 2620, 2620,
     2620, 2620, 2620, 2620, 2621, 2637, 2637, 2621, 2621, 2621,
     2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2603, 2638, 2588, 1957, 2603, 2603, 2603, 2603, 2603, 2603,
     2606, 2606, 2606, 2606, 2606,  117,  117,  117,  117,  117,
     2611, 2636, 2611, 2611, 2611, 2611, 2611, 2611, 2611, 2612,

     2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2612, 2613,
     2613, 2613, 2613, 2613, 2613, 2614, 2614, 2614, 2614, 2614,
     2615, 2615, 2615, 2615, 2615, 2616, 2616, 2616, 2616, 2616,
     2619, 2639, 2640, 2639, 2131, 2641, 2618, 2618, 2618, 2618,
     2618, 2620, 2620, 2620, 2620, 2620, 2621, 2637, 2621, 2621,
     2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2638, 2588, 2603,
     2603, 2603, 2606, 2606, 2606,  117,  117,  117, 2611, 2611,
     2611, 2611, 2611, 2611, 2612, 2612, 2612, 2612, 2612, 2612,
     2612, 2612, 2613, 2613, 2613, 2613, 2613, 2614, 2614, 2614,

     2615, 2615, 2615, 2616, 2616, 2616, 2131, 2640, 2640, 2640,
     2588, 2639, 2131, 2639, 2639, 2131, 2618, 2618, 2618, 2620,
     2620, 2620, 2621, 2621, 2621, 2621, 2621, 2621, 2621, 2621,
     2621, 2588, 2588, 2588, 2588, 2588, 2603, 2603, 2603, 2606,
     2606, 2606,  117,  117,  117, 2611, 2611, 2611, 2612, 2612,
     2612, 2612, 2612, 2613, 2613, 2613, 2614, 2614, 2614, 2615,
     2615, 2615, 2616, 2616, 2616, 2640, 2588, 2588, 2640, 2618,
     2618, 2618, 2620, 2620, 2620, 2621, 2621, 2621, 2621, 2621,
     2588, 2588, 2588, 2603, 2603, 2603, 2606, 2606, 2606,  117,
      117,  117, 2611, 2611, 2611, 2612, 2612, 2612, 2613, 2613,

     2613, 2614, 2614, 2614, 2615, 2615, 2615, 2616, 2616, 2616,
     2588, 2618, 2618, 2618, 2620, 2620, 2620, 2621, 2621, 2621,
     2588, 2588, 2588, 2603, 2603, 2603, 2606, 2606, 2606,  117,
      117,  117, 2611, 2611, 2611, 2612, 2612, 2612, 2613, 2613,
     2613, 2614, 2614, 2614, 2615, 2615, 2615, 2616, 2616, 2616,
     2618, 2618, 2618, 2620, 2620, 2620, 2621, 2621, 2621, 2588,
     2588, 2588, 2603, 2603, 2603, 2606, 2606, 2606,  117,  117,
      408, 2611, 2611, 2611, 2612, 2612, 2612, 2613, 2613, 2613,
     2614, 2614, 2614, 2615, 2615, 2615, 2616, 2616, 2616, 2618,
     2618, 2618, 2620, 2620, 2620, 2621, 2621, 2621, 2588, 2588,

     2588, 2603, 2603, 2603, 2606, 2606, 2606,  117,  117,  117,
     2611, 2611, 2611, 2612, 2612, 2612, 2613, 2613, 2613, 2614,
     2614, 2614, 2615, 2615, 2615, 2616, 2616, 2616, 2618, 2618,
     2618, 2620, 2620, 2620, 2621, 2621, 2621, 2588, 2588, 2588,
     2603, 2603, 2603, 2606, 2606, 2606,  117,  117,  117, 2611,
     2611, 2611, 2612, 2612, 2612, 2613, 2613, 2613, 2614, 2614,
     2614, 2615, 2615, 2615, 2616, 2616, 2616, 2618, 2618, 2618,
     2620, 2620, 2620, 2621, 2621, 2621, 2588, 2588, 2588, 2588,
     2588, 2603, 2606,  117, 2611, 2611, 2611, 2612, 2612, 2612,
     2612, 2612, 2613, 2613, 2613, 2614, 2615, 2616, 2618, 2620,

     2621, 2621, 2621, 2621, 2621, 2588, 2588, 2588, 2603, 2606,
      117, 2611, 2612, 2612, 2612, 2613, 2614, 2615, 2616, 2618,
     2620, 2621, 2621, 2621, 2588, 2603, 2606,  117, 2611, 2612,
     2613, 2614, 2615, 2616, 2618, 2620, 2621, 2588, 2603, 2606,
      117, 2611, 2612, 2613, 2614, 2615, 2616, 2618, 2620, 2621,
     2588, 2603, 2606,  117, 2611, 2612, 2613, 2614, 2615, 2616,
     2618, 2620, 2621, 2588, 2603, 2606,  117, 2611, 2612, 2613,
     2614, 2615, 2616, 2618, 2620, 2621, 2588, 2588, 2611, 2612,
     2612, 2613, 2621, 2621, 2588, 2612, 2621,    0, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,

     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588
    } ;

static const short int yy_nxt[5940] =
    {   0,
     2588, 2588,   39,   40,   41,  603,  603,   42,  604,  604,
       43, 2588,   44,  330,   39,  331,  332,  330,   39,  331,
      332,   45,   46,   47,   48,   49, 2588,   50,   51,   52,
       39,   53,   54,   51,   51,   55,   51,   51,   56,   51,
       57,   51,   51,   51,   51,   51,   51,   51,   51,   58,
       59,   60,   61,   62,   51,   63,   51,   51,   51,   51,
       64,   65,   66,   51,   67,   51,   51,   68,   51,   69,
       51,   70,   51,   51,   51,   51,   71,   72,   73,   51,
       51,   51,   51,   39,   40,   41,  352,  375,   42,  453,
      358,   43,  347,   44,  359,  425,  347,  381,  353,  376,

      426,  382,   45,   46,   47,   48,   49,  361,   50,   38,
       38,   39,   40,   41,  369,   75,   42,   38,  369,   43,
      401,   44,  425,  362,  402,  354,  686,  426,  686,  427,
       45,   46,   47,   76,   49,  710,   50,   77,   38,   38,
       51,   52,   39,   53,   54,   78,   79,   55,   51,   78,
       56,   78,   57,   78,   78,   78,   78,   78,   78,   78,
       78,   58,   59,   60,   80,   62,   78,   63,   81,   51,
       51,   78,   82,   83,   84,   78,   85,   78,   78,   86,
       78,   87,   78,   88,   78,   78,   78,   78,   89,   90,
       91,   78,   78,   78,   78,   38,   38,   39,   40,   41,

      395,   93,   42,   38,  446,   43,  431,   44,  447,  409,
      358,  416,  396,  624,  359,  686,   45,   46,   47,   94,
       49,  409,   50,   95,   38,   38,   51,   52,   39,   53,
       54,   96,   97,   55,   51,   96,   56,   96,   57,   96,
       96,   96,   96,   96,   96,   96,   96,   58,   59,   60,
       98,   62,   96,   63,   99,   51,   51,   96,  100,  101,
      102,   96,  103,   96,   96,  104,   96,  105,   96,  106,
       96,   96,   96,   96,  107,  108,  109,   96,   96,   96,
       96,   38,   38,   39,   40,   41,  110,   38,   42,   38,
      110,   43,  110,   44,  110,  110,  110,  110,  110,  110,

      110,  110,   45,   46,   47,  111,   49,  110,   50,   38,
       38,   38,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,  112,  112,  112,  112,
      112,  112,  112,  112,  112,  112,   51,   52,   39,   53,
       54,  113,   51,   55,   51,  113,   56,  113,   57,  113,
      113,  113,  113,  113,  113,  113,  113,   58,   59,   60,
      114,   62,  113,   63,   51,   51,   51,  115,  116,  117,
      118,  115,  119,  115,  115,  120,  115,  121,  115,  122,
      115,  115,  115,  115,  123,  124,  125,  115,  115,  115,
      115,  126,  429,  126,  429,  384,  127,  127,  127,  127,

      127,  127,  127,  404,  365,  365,  365,  365,  366,  409,
      365,  385,  430,  128,  430,  413,  129,  409,  130,  405,
      540,  409,  131,  347,  414,  132,  133,  134,  435,  409,
      453,  135,  136,  368,  136,  409,  409,  137,  137,  137,
      137,  137,  137,  137,  362,  438,  415,  409,  422,  365,
      365,  365,  365,  366,  138,  365,  550,  139,  409,  140,
      417,  469,  347,  141,  418, 1189,  142,  143,  144,  409,
      409,  419,  145,   38,   38,   39,   40,  146,  368,  603,
      148,  409,  604,  149,  438,  150,  423,  423,  423,  423,
      423,  423,  423,  686,  151,  152,  153,  154,  155,  686,

      156,   51,   52,   39,   53,  157,  158,  158,  159,  158,
      158,  160,  158,  161,  158,  158,  158,  158,  158,  158,
      158,  158,  162,  163,  164,  165,  166,  158,  167,  158,
      158,  158,  158,  168,  169,  170,  158,  171,  158,  158,
      172,  158,  173,  158,  174,  158,  158,  158,  158,  175,
      176,  177,  158,  158,  158,  158,   39,   40,  179,  501,
      540,  180,  440,  502,  181, 1190,  182,  424,  424,  424,
      424,  424,  424,  424,  441,  183,  184,  185,  186,  187,
      801,  188,  189,  190,   39,   53,  191,  189,  189,  192,
      189,  189,  193,  189,  194,  189,  189,  189,  189,  189,

      189,  189,  189,  195,  196,  197,  198,  199,  189,  200,
      189,  189,  189,  189,  201,  202,  203,  189,  204,  189,
      189,  205,  189,  206,  189,  207,  189,  189,  189,  189,
      208,  209,  210,  189,  189,  189,  189,   38,   38,   39,
       40,  211,  515,   38,   42,   38,  516,   43, 1191,   44,
      423,  423,  423,  423,  423,  423,  423, 1192,   45,   46,
       47,  213,   49, 1193,   50,   38,   38,   38,   51,   52,
       39,   53,  214,  215,   51,   55,   51,  215,   56,  215,
       57,  215,  215,  215,  215,  215,  215,  215,  215,   58,
       59,   60,  216,   62,  215,   63,   51,   51,   51,  215,

      217,  218,  219,  215,  220,  215,  215,  221,  215,  222,
      215,  223,  215,  215,  215,  215,  224,  225,  226,  215,
      215,  215,  215,   38,   38,   39,   40,   41,  533,   38,
       42,   38,  534,   43, 1194,   44,  424,  424,  424,  424,
      424,  424,  424, 1195,   45,   46,   47,  228,   49, 1196,
       50,   38,   38,   38,   51,   52,   39,   53,   54,  229,
       51,   55,   51,  229,   56,  229,   57,  229,  229,  229,
      229,  229,  229,  229,  229,   58,   59,   60,  230,   62,
      229,   63,   51,   51,   51,  229,  231,  232,  233,  229,
      234,  229,  229,  235,  229,  236,  229,  237,  229,  229,

      229,  229,  238,  239,  240,  229,  229,  229,  229,   38,
       38,   39,   40,   41,  428,   38,   42,   38,  567,   43,
     1201,   44,  568,  495,  613,  614, 1026,  355,  637,  638,
       45,   46,   47,  242,   49,  496,   50,   38,   38,   38,
       51,   52,   39,   53,   54,  243,   51,   55,   51,  243,
       56,  243,   57,  243,  243,  243,  243,  243,  243,  243,
      243,   58,   59,   60,  244,   62,  243,   63,   51,   51,
       51,  243,  245,  246,  247,  243,  248,  243,  243,  249,
      243,  250,  243,  251,  243,  243,  243,  243,  252,  253,
      254,  243,  243,  243,  243,   38,   38,   39,   40,   41,

      509,  256,   42,   38,  573,   43,  818,   44,   38,  527,
      657,  658,  510,  691,  692, 1040,   45,   46,   47,   48,
       49,  528,   50,   38,   38,   38,   51,   52,   39,   53,
       54,  257,  258,   55,   51,  257,   56,  257,   57,   51,
      257,  257,  257,  257,  257,  257,  257,   58,   59,   60,
       61,   62,  257,   63,   51,   51,   51,  257,  259,  260,
      261,  257,  262,  257,  257,  263,  257,  264,  257,  265,
      257,  257,  257,  257,  266,  267,  268,  257,  257,  257,
      257,   38,   38,   39,   40,   41,  540,  270,   42,   38,
      573,   43,  818,   44,   38,  684,  684,  684,  684,  684,

      684,  684,   45,   46,   47,   48,   49,  546,   50,   38,
       38,   38,   51,   52,   39,   53,   54,  271,  272,   55,
       51,  271,   56,  271,   57,   51,  271,  271,  271,  271,
      271,  271,  271,   58,   59,   60,   61,   62,  271,   63,
       51,   51,   51,  271,  273,  274,  275,  271,  276,  271,
      271,  277,  271,  278,  271,  279,  271,  271,  271,  271,
      280,  281,  282,  271,  271,  271,  271,   38,   38,   39,
       40,   41,  561,   38,   42,   38,  611,   43,  453,   44,
      478,  740,  741,  603,  562,  712,  604,  729,   45,   46,
       47,  284,   49,  612,   50,   38,   38,   38,   51,   52,

       39,   53,   54,  285,   51,   55,   51,  285,   56,  285,
       57,  285,  285,  285,  285,  285,  285,  285,  285,   58,
       59,   60,  286,   62,  285,   63,   51,   51,   51,  285,
      287,  288,  289,  285,  290,  285,  285,  291,  285,  292,
      285,  293,  285,  285,  285,  285,  294,  295,  296,  285,
      285,  285,  285,   38,   38,   39,   40,   41,  621,  298,
      299,  622,  626,  300, 1041,  301,  754,  755,  771,  772,
     1217,  623,  793,  540,  302,  303,  304,  305,  306,  627,
      307,   51,   52,   39,   53,   54,  308,  309,  310,  308,
      308,  311,  308,  312,  308,  308,  308,  308,  308,  308,

      308,  308,  313,  314,  315,  316,  317,  308,  318,  308,
      308,  308,  308,  319,  320,  321,  308,  322,  308,  308,
      323,  308,  324,  308,  325,  308,  308,  308,  308,  326,
      327,  328,  308,  308,  308,  308,  333,  334,   39,  333,
      335,  453,  333,  337,  338, 1218,  449,  370,  370,  370,
      370,  371,  370,  370,  370,  370,  371,  388,  388,  388,
      388,  388,  450,  388,  453,  339,  333,  334,   39,  333,
      335,  540,  333,  337,  338,  370,  373,  370,  453,  453,
      370,  373,  370,  453,  478,  467,  390,  391,  391,  391,
      391,  391,  453,  463,  552,  339,  388,  388,  388,  388,

      388,  453,  388,  391,  391,  391,  391,  391,  464,  409,
      466,  420,  453,  480, 1219,  391,  393,  391,  407,  475,
      465,  409,  407,  472,  408,  390,  407,  421,  478,  453,
      407,  391,  393,  391,  407,  478,  408,  407,  407,  407,
      407,  468,  478,  470,  407,  478,  408,  471,  407,  407,
      407,  407,  478,  478,  407,  483,  408,  478,  407,  407,
      473,  407,  478,  478,  504,  518,  540,  453,  410,  407,
      585,  407,  540,  536,  481,  540,  474,  573,  411,  484,
      505,  519,  485,  486,  487,  549,  482,  585,  488,  537,
      412,  570,  586,  489,  490,  720,  547,  573,  492,  522,

      522,  522,  522,  523,  551,  522,  589,  571,  548,  586,
      491,  522,  522,  522,  522,  523,  540,  522,  541,  541,
      541,  541,  542,  540,  541,  540,  540,  573,  525,  541,
      541,  541,  541,  542,  611,  541,  573,  594,  573,  553,
      525,  573,  544,  554,  631,  626,  555,  545,  556,  409,
      573,  612,  573,  544,  592,  573,  632,  573,  545,  558,
      611,  409,  627, 1220,  557,  575,  575,  575,  575,  576,
      590,  578,  575,  575,  575,  575,  576,  612,  578,  601,
      593,  595,  591,  596,  670,  626,  598,  597,  599,  605,
      605,  409,  606,  606,  579,  605,  409,  645,  606,  540,

      646,  579,  627,  674,  600,  365,  365,  365,  365,  366,
      647,  629,  370,  370,  370,  370,  371,  608,  608,  665,
      788,  453,  666,  608,  365,  365,  365,  365,  366, 1221,
      629,  478,  667,  611,  368,  370,  370,  370,  370,  371,
      370,  373,  634,  388,  388,  388,  388,  388,  687,  651,
      612,  611,  453,  368,  391,  391,  391,  391,  391,  409,
      688,  409,  409,  370,  373,  634,  714,  409,  690,  671,
      672,  409,  390,  409,  409,  675,  731,  678,  673,  409,
      453,  705,  391,  393,  654,  407,  409,  409,  407,  407,
      407,  407,  407,  407,  407,  478,  453,  409,  409,  409,

      679,  453,  677,  680,  409,  683,  409,  409,  676,  409,
      626,  453,  409,  681,  453,  682,  409,  626,  409,  409,
      685,  685,  685,  685,  685,  685,  685,  627,  699,  706,
      713,  700,  453,  478,  704,  708,  709,  478,  721,  409,
      724,  701,  711,  478,  478,  730,  707,  478,  478,  478,
      715,  409,  478,  738,  719,  722,  611,  612,  626,  803,
      804,  716,  723, 1222,  717,  611,  748,  819,  819,  749,
      627,  820, 1223,  612,  718,  627,  725,  726,  733,  750,
      737,  734,  612,  626,  762,  728,  732,  763,  736,  727,
      540,  735,  522,  522,  522,  522,  523,  764,  768,  611,

      627,  522,  522,  522,  522,  523,  779,  768,  626,  780,
      611,  541,  541,  541,  541,  542,  612,  785,  540,  781,
      540,  525,  540,  540,  540,  627,  540,  612,  791,  540,
      525,  541,  541,  541,  541,  542,  540,  785,  573,  611,
      545,  541,  541,  541,  541,  542,  811,  785,  573,  812,
      797,  789,  790,  798,  626,  792,  612,  796,  626,  813,
      545,  795,  540,  799,  573,  794,  573,  786,  800,  573,
      545,  627,  573,  825,  573,  627,  575,  575,  575,  575,
      576,  831,  817,  575,  575,  575,  575,  576,  832,  817,
      826,  573,  573,  573,  829,  824,  573,  573,  840,  822,

      603,  603,  453,  604,  604,  579,  860,  861,  827,  828,
      842,  823,  579,  830,  605,  841,  605,  606,  605,  606,
      605,  606,  835,  606,  839,  836,  611,  843,  626,  409,
      842,  834,  904,  905,  453,  837,  833,  838,  478,  888,
      933,  409,  608,  612,  608,  627,  608,  843,  608,  365,
      365,  365,  365,  366, 1224,  365,  370,  370,  370,  370,
      371,  388,  388,  388,  388,  388,  842,  388,  391,  391,
      391,  391,  391,  923,  842,  409,  948,  409,  368,  890,
     1225,  409,  842,  843,  370,  373,  370,  409,  920,  409,
      390,  843,  889,  409,  409,  409,  391,  393,  391,  906,

      409,  893,  895,  409,  891,  921,  409,  409,  409,  409,
      896,  894,  409,  706,  409,  409,  897,  409,  898,  453,
      409,  409,  409,  899,  900,  453,  409,  453,  453,  409,
      707,  453,  453,  453,  409,  901,  901,  901,  901,  901,
      901,  901,  902,  902,  902,  902,  902,  902,  902,  453,
      453,  453,  453,  721,  937,  478,  925,  724,  478,  478,
      478,  478,  478,  478,  930,  924,  926,  478,  738,  478,
      722,  843,  927,  478,  612,  478,  478,  929,  842,  934,
      928,  931,  932, 1226,  842,  627, 1227,  540,  935,  540,
      940,  540,  842,  540,  938,  843,  540,  540,  945,  941,

      946,  843,  540,  949,  939,  942,  947,  540,  944,  843,
      994,  943,  950,  522,  522,  522,  522,  523,  842,  522,
      992,  541,  541,  541,  541,  542,  540,  541,  995,  993,
      999,  540,  996,  540,  997,  843,  540,  540,  842,  998,
      540, 1024,  525,  541,  541,  541,  541,  542,  573,  785,
      545,  573,  825,  573, 1000,  843, 1001,  573, 1025, 1003,
      573,  575,  575,  575,  575, 1018, 1002,  575, 1004,  826,
      573,  573,  545,  575,  575,  575,  575,  576,  573,  578,
      573,  573,  990,  575,  575,  575,  575,  576,  573,  578,
     1020, 1029, 1027, 1021,  991,  573, 1022, 1023,  573,  573,

      573,  840,  579, 1028,  842, 1044, 1046, 1044,  409, 1030,
     1082, 1038,  579, 1046, 1044, 1031, 1046,  453,  841, 1034,
      409,  843, 1045, 1047, 1045, 1033, 1035, 1032, 1044, 1036,
     1047, 1045,  409, 1047, 1083, 1046, 1039, 1037,  409,  409,
     1084, 1086,  409,  409,  409, 1045, 1087,  409, 1088,  409,
      409, 1085, 1047, 1228,  409,  409,  453,  409, 1118,  409,
     1044,  409, 1089,  409,  409, 1091,  453,  453,  409,  409,
     1090,  409,  453, 1092, 1046,  409,  409, 1099,  920, 1113,
      409,  453, 1115,  409, 1093, 1093, 1093, 1093, 1093, 1093,
     1093, 1100,  453,  453,  453,  921, 1114, 1111, 1112, 1116,

     1120,  453,  453, 1117,  937,  478, 1123, 1128, 1119,  478,
      478, 1129,  478,  478,  478,  478,  478,  478, 1044,  478,
     1133,  843, 1046,  478, 1045, 1229, 1044, 1121, 1047, 1046,
     1044, 1046, 1124, 1125,  540, 1045, 1126,  540, 1122, 1047,
     1127, 1130, 1132, 1045,  540,  540, 1047, 1045, 1047, 1134,
     1137,  540,  540, 1131, 1138,  541,  541,  541,  541,  542,
     1135,  785, 1044, 1046,  540, 1180,  540, 1136, 1175,  540,
      540,  540,  540, 1182, 1176, 1177, 1183, 1178,  540, 1045,
     1047, 1044, 1046, 1179,  545,  575,  575,  575,  575, 1018,
      573, 1197,  573,  573,  573, 1184, 1181,  573, 1045, 1047,

     1199, 1185,  573, 1024, 1172,  541,  541,  541,  541,  542,
     1204,  785, 1206,  573, 1020,  575,  575,  575,  575, 1018,
     1025, 1197,  573,  573, 1200, 1202,  573, 1205, 1203, 1207,
     1211, 1198,  573, 1208,  545,  573,  573,  573, 1230, 1044,
     1210, 1046, 1231, 1232, 1020, 1233, 1234, 1235, 1236, 1237,
     1238, 1239, 1240, 1241, 1173, 1174, 1045, 1242, 1047, 1243,
     1244, 1212, 1245, 1209, 1246, 1247, 1248, 1215, 1216, 1249,
     1250, 1251, 1252, 1253, 1254,  409, 1213,  409,  409, 1260,
      409, 1263,  409, 1266, 1267, 1214, 1255,  409, 1256,  409,
      409, 1257,  409,  409,  409, 1258,  409, 1259, 1262,  409,

     1265, 1261, 1268,  409, 1269,  409, 1270, 1219,  409, 1220,
     1271,  409,  409, 1272, 1264,  409, 1273, 1274, 1275, 1276,
     1277, 1278, 1279, 1110,  453,  453, 1113, 1282, 1115, 1283,
      453,  453,  453,  453,  453,  453,  453,  453,  478,  453,
     1128, 1129, 1290, 1114,  478, 1116,  478,  478,  478,  478,
      478,  478,  478, 1304,  478, 1305, 1306, 1045, 1047, 1301,
      478, 1307, 1308, 1309, 1280, 1281, 1286, 1289, 1292, 1310,
     1311, 1312, 1284, 1313, 1314, 1285, 1315, 1316, 1293, 1317,
     1287, 1291, 1288, 1297, 1294, 1300, 1318, 1319, 1295, 1303,
     1320, 1296, 1321, 1322, 1323, 1302, 1298, 1299, 1324, 1325,

     1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335,
     1336,  541,  541,  541,  541,  542,  540,  785,  541,  541,
      541,  541,  542,  540,  785,  540,  540,  540,  540, 1338,
      541,  541,  541,  541,  542,  540,  785, 1348,  540,  540,
      545,  540,  540, 1351, 1352, 1353, 1354,  545, 1340, 1355,
     1356, 1357, 1344, 1358, 1359, 1341, 1337, 1360, 1361,  545,
     1342, 1343, 1347, 1350,  816,  573, 1339,  573, 1345,  573,
     1201,  573, 1362,  573, 1204, 1346, 1364, 1349, 1367, 1206,
     1368,  573,  573,  573,  573,  573,  573,  573,  573,  573,
     1378, 1205, 1379, 1219, 1363, 1375, 1207, 1220, 1380, 1381,

     1382, 1383, 1384, 1385, 1386, 1387, 1389, 1390, 1391, 1392,
     1393, 1365, 1394, 1366, 1395, 1396, 1371, 1374, 1377, 1397,
     1398, 1399, 1388, 1369, 1400, 1401, 1370, 1387, 1402, 1403,
     1404, 1376, 1372, 1373, 1405, 1406, 1407, 1408, 1409, 1410,
     1411, 1387, 1412,  409, 1388,  409, 1421,  409, 1423,  409,
     1416,  409,  409, 1417, 1418,  409, 1415,  409, 1388,  409,
     1413,  409, 1414,  409,  409,  409, 1387, 1419,  409,  409,
     1424, 1425, 1426, 1427, 1428, 1429, 1430,  409, 1431, 1420,
      409,  409, 1432, 1388, 1433, 1434, 1422, 1387, 1436,  453,
      453, 1282, 1283,  453,  453,  409,  453,  453,  453,  453,

      453, 1446,  453,  478, 1435,  478,  478,  409,  478,  478,
      478,  478,  478,  478,  478, 1458, 1460, 1461, 1447, 1462,
     1463, 1464, 1465, 1466, 1440, 1467, 1468, 1441, 1442, 1443,
     1387, 1439, 1388, 1469, 1470, 1437, 1438, 1471, 1452, 1444,
     1453, 1454, 1455, 1472, 1451, 1473, 1445, 1388, 1448, 1449,
     1474, 1450, 1456, 1475, 1476, 1477, 1478, 1387, 1479, 1457,
     1459, 1480, 1481, 1482, 1483, 1484, 1485, 1486, 1487, 1488,
     1387, 1489,  540,  540, 1388,  541,  541,  541,  541,  542,
      540,  785,  540,  540,  540,  540, 1490, 1388,  541,  541,
      541,  541,  542,  540,  785,  541,  541,  541,  541,  542,

      540,  785, 1496,  540,  545, 1387, 1492, 1497, 1498, 1503,
     1493, 1494, 1495,  540, 1504, 1500, 1499,  545, 1505, 1491,
     1506, 1507, 1388, 1508,  545, 1509, 1510, 1511, 1387, 1512,
      573,  573,  573,  573,  573, 1367, 1368,  573, 1501,  573,
      573, 1502,  573,  573,  573, 1388, 1513, 1515,  573, 1525,
      573, 1528, 1529, 1530, 1531, 1532, 1533, 1534, 1535, 1536,
     1537, 1387, 1540, 1541, 1538, 1542, 1526, 1519, 1543, 1544,
     1545, 1520, 1546, 1521, 1522, 1514, 1547, 1518, 1388, 1516,
     1517, 1539, 1548, 1549, 1523, 1550, 1551, 1538, 1552, 1553,
     1554, 1555, 1556, 1557, 1524, 1558, 1527, 1559, 1560, 1538,

     1562,  409,  409,  409, 1539, 1565,  409, 1570,  409, 1567,
     1571, 1538, 1568,  409,  409,  409, 1539, 1561,  409, 1564,
      409, 1566,  409, 1563,  409,  409, 1572,  409, 1539, 1573,
     1574, 1575, 1576, 1577,  409, 1578, 1579, 1569, 1580,  409,
      409, 1581, 1537, 1538,  453,  453,  453,  453,  453,  453,
      453, 1446,  409, 1584,  453, 1587,  453, 1592, 1593,  478,
     1582,  478,  478,  478,  478,  478,  478, 1458, 1447, 1596,
      478, 1599,  478, 1604, 1605, 1594, 1606, 1607, 1608, 1609,
     1589, 1610, 1611, 1590, 1388, 1612, 1613, 1614, 1538, 1583,
     1539, 1615, 1586, 1588, 1616, 1585, 1601, 1591, 1617, 1602,

     1618, 1619, 1620, 1621, 1595, 1539, 1622, 1538, 1598, 1600,
     1623, 1597, 1624, 1603, 1625, 1626, 1627, 1628, 1629, 1630,
     1631, 1538,  540,  540, 1539,  541,  541,  541,  541,  542,
      540,  785,  540,  541,  541,  541,  541,  542, 1539,  785,
     1636,  540, 1639,  540, 1632,  541,  541,  541,  541,  542,
      540,  785,  540,  540,  545, 1644, 1645, 1646, 1538, 1635,
     1647, 1648,  545, 1649, 1634, 1637,  540, 1638, 1640, 1650,
     1651, 1652, 1641, 1642,  545, 1539, 1538,  573,  573,  573,
      573,  573, 1633,  573,  573,  573, 1643,  573, 1657,  573,
      573,  573, 1653, 1539, 1660, 1525, 1665, 1666, 1673, 1668,

     1674, 1655, 1676, 1670, 1677, 1678, 1680, 1654, 1671, 1681,
     1537, 1538, 1526, 1683, 1667, 1662, 1669, 1675, 1663, 1672,
     1684, 1685, 1679, 1686, 1668, 1656, 1682, 1690, 1539, 1659,
     1687, 1674, 1664, 1658, 1661, 1688, 1691, 1692, 1686, 1678,
     1693, 1669, 1681, 1668, 1697, 1694, 1689, 1674, 1675, 1698,
     1695, 1699, 1678, 1700, 1681, 1668, 1679, 1701, 1704, 1682,
     1669, 1696, 1702, 1705, 1675, 1674, 1708,  409, 1678, 1679,
     1681, 1682, 1669, 1703,  409, 1709, 1707, 1715, 1710,  409,
      409, 1668, 1675, 1706,  409, 1679,  409, 1682, 1717, 1718,
     1674, 1678,  409, 1710,  409, 1720,  409,  409, 1711,  409,

     1712, 1681, 1683, 1722,  453, 1713,  409, 1716, 1719,  409,
      453,  409, 1728,  453,  453, 1732, 1714, 1727, 1721, 1735,
     1723,  453, 1592, 1593, 1737, 1738,  478, 1743,  478, 1729,
      478,  478, 1733,  478, 1724, 1742, 1736, 1746, 1748, 1725,
     1594, 1604, 1669, 1668, 1675, 1752, 1749, 1753, 1730, 1674,
     1726, 1750, 1734, 1754, 1679, 1682, 1739, 1678, 1539, 1731,
     1669, 1740, 1751, 1755, 1747, 1744, 1675, 1681, 1668, 1759,
     1756, 1674, 1741, 1760, 1679, 1757, 1745, 1761, 1678, 1762,
     1681, 1668, 1766, 1674, 1682, 1669, 1758, 1763, 1675, 1767,
     1768, 1678, 1764, 1769, 1681, 1679, 1783, 1682, 1669, 1784,

     1675,  540,  540, 1765, 1776,  540,  540,  540, 1679, 1668,
     1668, 1682,  541,  541,  541,  541,  542,  540,  785,  541,
      541,  541,  541,  542, 1773,  785, 1669, 1669, 1777, 1774,
     1779, 1770,  541,  541,  541,  541,  542, 1674,  785, 1678,
     1775,  545, 1681, 1778, 1780,  540, 1674,  540,  545, 1781,
      540, 1785, 1771, 1678, 1675, 1786, 1679, 1681, 1772, 1682,
     1782,  545,  573, 1675,  573,  573, 1790,  573, 1796,  573,
     1679,  573,  573, 1800, 1682, 1787, 1795, 1803,  573, 1665,
     1805, 1666, 1806, 1791, 1668, 1797, 1809, 1807, 1812, 1810,
     1801, 1808, 1813, 1789, 1804, 1811, 1814, 1792, 1667, 1788,

     1815, 1669, 1793, 1674, 1678, 1816, 1798, 1817, 1789, 1802,
     1681, 1818, 1683, 1794, 1819, 1392, 1820, 1799, 1821, 1823,
     1675, 1679, 1822, 1824, 1826, 1827, 1828, 1682, 1829, 1825,
     1830, 1832, 1833, 1835, 1831, 1836, 1837, 1838, 1834,  409,
      409, 1839,  409, 1841, 1844, 1840,  409, 1845,  409, 1848,
      409,  409,  409, 1425,  409, 1842, 1846, 1849,  409, 1806,
      409, 1843,  409, 1850, 1847, 1852, 1853, 1851, 1855, 1813,
     1856, 1857, 1854, 1816, 1858, 1818, 1722, 1859,  453,  453,
      453,  453, 1728, 1866,  453,  453, 1732, 1869,  453, 1735,
     1871, 1737,  478, 1723, 1738,  478,  478,  478, 1743, 1729,

      478,  478, 1746, 1733,  478, 1883, 1736, 1748, 1881, 1860,
     1862, 1669, 1882, 1861, 1867, 1675, 1886, 1887, 1888, 1679,
     1868, 1889, 1874, 1863, 1682, 1892, 1872, 1865, 1884, 1864,
     1873, 1878, 1890, 1870, 1885, 1879, 1891, 1895, 1893, 1896,
     1875, 1897, 1898, 1877, 1894, 1901, 1876, 1899, 1902, 1880,
     1904, 1900, 1905, 1906, 1903, 1907,  541,  541,  541,  541,
      542,  540,  785,  541,  541,  541,  541,  542,  540,  785,
      540,  540,  540, 1908,  540, 1920,  540, 1922, 1925, 1921,
     1923, 1926, 1927, 1928, 1911,  545, 1924,  573, 1912,  573,
     1913, 1931,  545, 1917,  573,  573,  573, 1918, 1790,  573,

     1796,  573, 1909,  541,  541,  541,  541,  542, 1914,  785,
     1929, 1930, 1916, 1919, 1915, 1791, 1938, 1797,  573,  573,
     1800, 1941, 1515,  573, 1803, 1943, 1932, 1805, 1806, 1934,
     1933, 1944,  545, 1945, 1946, 1910, 1948, 1801, 1949, 1950,
     1935, 1804, 1813, 1951, 1953, 1816, 1936, 1937, 1939, 1954,
     1910, 1947, 1818, 1956, 1940, 1961, 1962, 1946, 1963, 1964,
     1952, 1965, 1951, 1966, 1954, 1967, 1955, 1968, 1942, 1958,
     1958, 1958, 1969, 1958, 1947, 1958, 1970, 1946, 1971, 1952,
     1951, 1955, 1972, 1954, 1958, 1958, 1958, 1959, 1958, 1960,
     1958, 1958, 1958, 1958, 1947,  409,  409, 1952, 1946, 1975,

     1955,  409,  409, 1951,  409, 1954,  409,  409,  409, 1979,
     1983, 1973, 1974,  409, 1977, 1947,  409, 1976, 1978, 1981,
     1952, 1982, 1955, 1984, 1946, 1986, 1987,  409, 1988, 1990,
     1951, 1954,  409, 1859,  409,  453,  453, 1994,  453,  409,
      453, 1985,  453, 1866,  409, 1999,  409, 1989, 1991,  453,
     1869, 2002, 1871,  478, 1995,  478, 2006,  478,  478,  478,
     2010,  478, 2000, 2013, 2014, 1996, 2015, 2016, 2003, 2012,
     1946, 2017, 1951, 1947, 2018, 1954, 2019, 1952, 2020, 1946,
     1992, 1993, 1997, 1998, 2007, 2021, 1955, 1947, 2022, 1952,
     2001, 2023, 1955, 1951, 2024, 1954, 1947, 2025, 2004, 2009,

     2005, 2008, 2011, 2026, 1946, 2027, 2028, 2029, 1951, 2030,
     1952, 1954, 1955,  541,  541,  541,  541,  542,  540,  785,
      540, 1947, 1946,  540,  540, 1952, 2039,  540, 1955,  540,
      540, 2040, 2041, 2031,  541,  541,  541,  541,  542, 1947,
      785, 2042,  545,  541,  541,  541,  541,  542, 2035,  785,
     1946, 1951, 2043, 1954, 1951, 2033, 2037, 2034, 2036,  540,
     2038,  540, 2044,  545, 1954,  573, 1931, 1947, 1952, 2032,
     1955, 1952,  545, 1634,  573,  573,  573, 2051,  573,  573,
      573, 1955, 2045, 1938, 2056, 2047,  573, 2048, 1941, 2059,
     1943, 2061, 2062, 1946, 2052, 2063, 2064, 2065, 2066, 1951,

     2068, 2057, 2069, 2070, 2074, 2053, 2060, 1954, 2075, 2072,
     1947, 2073, 2076, 2077, 2078, 2067, 1952, 2079, 2080, 2049,
     2055, 2050, 2054, 2081, 1955, 2066, 2082, 2058, 2071, 1392,
     1392, 1392, 1392, 1392, 1958, 1958, 1958, 2083, 1958, 2084,
     1958, 2085, 2067, 2066, 1981, 2093, 1982, 2086, 2094, 1958,
     1958, 1958, 1959, 1958, 1960, 1958, 1958, 1958, 1958,  409,
     2067,  409, 2066, 2095,  409,  409, 2092, 2089, 1982,  409,
     2063, 2096, 2097,  409, 2087, 2088,  409,  409, 2066, 2067,
     2090,  409, 2091, 1425, 1425, 1425, 1425, 1425, 2068, 2099,
     2070,  409,  453,  453, 1994, 2098, 2102,  453,  453, 2105,

     1999, 2107,  453,  409, 2109, 2002,  478,  478, 2006,  478,
      478, 1995,  478, 2114, 2010, 2012, 2106, 2000, 2116, 2117,
     2118, 2100, 2003, 2119, 2120, 1947, 2066, 2121, 2122, 2104,
     2067, 1952, 1955, 2123, 2124, 2101, 2110, 2103, 2066, 2125,
     2126, 2113, 2108, 2067, 2127, 2128, 2129, 2066, 2111, 2112,
     2130,  540, 2115,  540, 2142, 2067,  541,  541,  541,  541,
      542,  540,  785, 2066, 2067,  540,  540, 2131, 2143, 2144,
     2145,  540, 2137, 2146, 2066,  573, 2140, 2152,  573,  573,
     2067, 2157,  573, 2051,  573,  545,  541,  541,  541,  541,
      542, 2067, 2133,  573,  573, 2138,  573, 2139, 2141, 2047,

     2052, 2048, 2149, 2155, 2147, 1515, 1515, 1515, 1515, 1515,
     2134, 2056, 2135, 2150, 2148, 2136, 2048, 2151, 2153,  573,
     2156, 2059, 2159, 2160, 2161, 2063, 2162, 2154, 2057, 2163,
     2066, 2165, 2068, 2166, 2070, 2168, 2169, 2073, 2060, 1392,
     1392, 1392, 1392, 2074, 2170, 2171, 2164, 2067, 2172, 2163,
     2167, 1542, 2166, 2173, 2174, 2175, 2163, 2166,  409, 2158,
      409, 2163, 2166, 2092,  409, 1982, 2164, 2179, 2180, 2167,
     2177, 2181,  409, 2164, 2167, 2176,  409, 2182, 2164, 2167,
     2178, 1425, 1425, 1425, 1425, 2165,  453, 2163, 2166, 2102,
      409,  409,  453, 1572,  453, 2188, 2105, 2190, 2107, 2191,

     2109,  478,  409,  409, 2183, 2184,  478,  478, 2196, 2114,
     2197, 2198, 2189, 2106, 2199, 2200, 2192, 2163, 2166, 2201,
     2202, 2203, 2204, 2163, 2166, 2164, 2067, 2167, 2205, 2206,
     2185, 2163, 2166, 2186, 2164, 2167, 2220, 2221, 2222, 2187,
     2164, 2167, 2209,  540,  540, 2193, 2163, 2194, 2164, 2167,
     2163,  540, 2195,  541,  541,  541,  541,  542,  540,  785,
     2210,  573, 2211, 2164, 2166,  573, 2152, 2164, 2207, 1634,
     1634, 1634, 1634, 1634,  787,  787,  573, 2218,  787, 2217,
      573, 2167,  545,  541,  541,  541,  541,  542, 2219, 2133,
      543,  543,  543,  543,  543,  543, 2223, 2229, 2215, 2213,

     2216,  573, 2157, 2166, 2159, 2224, 2225, 2134, 2232, 2135,
     2227,  540, 2136,  541,  541,  541,  541,  542,  573, 2133,
     2167, 2148, 2233, 2048, 2155, 2226, 2230, 2228, 1515, 1515,
     1515, 1515, 2234, 2163, 2235, 2165, 2166, 2212, 2236, 2135,
     1655, 2156, 2136, 2231, 2168, 2237, 2073, 2238, 2239, 2240,
     2164, 2241, 2242, 2167,  409,  409,  409,  438, 2246, 2245,
     2243, 2247, 2248, 2235, 2236,  453,  409,  409,  409,  453,
      453, 2244, 2188, 2252, 2190, 2191, 2253,  478,  478,  478,
     2196, 2197, 2257, 2258, 2259, 2260, 2261, 2262, 2263, 2189,
     2264, 2265, 2192, 2210, 2210, 2211, 2211, 2164, 2167, 2266,

     2249, 2211, 2251, 1634, 1634, 2267, 2273,  543,  543,  543,
      540, 2256, 2254, 2274, 2250, 1772, 2275,  573,  573,  573,
     2279,  540, 2268, 2255,  541,  541,  541,  541,  542,  541,
     2133,  543,  543,  543,  543,  543,  543, 2270,  543,  543,
      543,  543,  543,  543,  540, 2272,  573, 2213, 2212, 2227,
     2135, 2278, 2276, 2136,  541,  541,  541,  541,  542, 2229,
     2269, 2280, 2230, 2277, 2281, 2282, 2228, 2283,  586, 2235,
     2236, 2284, 2285, 2286, 2287, 2288, 2289, 2293, 2134, 2231,
     2135, 2271,  409, 2136,  541,  541,  541,  541,  542, 2294,
     2269,  409, 2295,  453,  409, 2290,  453, 2291,  453,  409,

     2252, 2292, 2253,  409,  478,  478,  478, 2302, 2212, 2303,
     2135,  409, 2304, 2136, 2305, 2306, 2307, 2308, 2309, 2310,
     2266, 2311, 2211,  784, 2209,  540,  540,  540, 2315, 2298,
     2316, 2297, 2317,  573,  573, 2296,  573, 2301, 2279, 2280,
     2300, 2321, 2210, 2322, 2211, 2323, 2299, 2324, 2325, 2326,
     2314, 2327, 2328, 2313, 2329, 2333,  409, 2334, 2335, 2312,
      409,  453,  453, 2342,  409,  453,  478, 2320,  409, 2319,
      478,  478,  409, 2330, 2343, 2318,  409, 2331, 2344, 2332,
     2345, 2346, 2347, 2348, 2349, 2350,  540,  540, 2354, 2355,
      540, 2356,  573,  573, 2360, 2361,  573, 2362, 2363, 2364,

     2365, 2366, 2367, 2368, 2372,  409, 2373, 2336, 2337, 2338,
     2371, 2369, 2339, 2374,  453, 2341, 2340,  409,  453,  478,
      478,  409,  453,  478, 2351, 2352, 2353, 2370, 2381, 2377,
     2380, 2382,  409,  409, 2383, 2384, 2385, 2386, 2357, 2358,
     2359, 2387, 2388, 2389,  409,  540,  540, 2392,  540, 2375,
     2393, 2394, 2395, 2376, 2378, 2379,  573,  573,  573, 2399,
     2400, 2401, 2402, 2403, 2404, 2398, 2405, 2406, 2407,  409,
      409, 2410, 2390, 2391, 2411, 2412, 2413,  453,  453,  453,
      478, 2408, 2409,  478,  478, 2420, 2421, 2422, 2423, 2424,
     2425, 2396, 2397, 2426, 2427, 2428,  540,  540, 2432,  540,

     2433, 2434,  573,  573,  573, 2438, 2439, 2440, 2441, 2442,
     2416, 2443, 2444, 2445, 2446, 2419,  409, 2450, 2414, 2415,
      409, 2417, 2431, 2451, 2418,  409, 2452, 2447,  409, 2429,
     2430, 2448,  409,  453,  453, 2437, 2449,  409,  453,  478,
      478,  478, 2459, 2435, 2436, 2460, 2461, 2462, 2463, 2464,
     2465, 2466, 2467,  540,  540,  540, 2471, 2472, 2473,  573,
      573,  573, 2481, 2482, 2483, 2477, 2479, 2477, 2487,  453,
     2496, 2479, 2477, 2453, 2454, 2479, 2477, 2479, 2455, 2456,
     2457, 2458, 2478, 2480, 2478, 2468, 2469, 2470, 2480, 2478,
     2484, 2477, 2480, 2478, 2480, 2479, 2488, 2490, 2492, 2474,

     2475, 2476,  409, 2493, 2494,  409,  409,  478, 2485, 2477,
     2479, 2477, 2486, 2489, 2491, 2479, 2497,  409,  409, 2498,
     2478, 2480, 2477, 2479,  540, 2477, 2478, 2480, 2478, 2479,
     2477, 2479, 2480,  540, 2500, 2501, 2495,  540, 2503, 2478,
     2480,  573, 2478, 2477, 2506, 2499, 2480, 2478, 2480, 2479,
     2507, 2508, 2502, 2509, 2510, 2504,  409, 2506, 2507, 2512,
     2478, 2488, 2513, 2490, 2514,  453, 2480, 2493, 2511, 2494,
     2505,  478, 2517, 2518, 2519,  540, 2521, 2501, 2489, 2522,
     2491, 2503, 2523,  573, 2478, 2506, 2480, 2507, 2525, 2526,
     2527,  409, 2528, 2529, 2502, 2513, 2514,  453, 2504,  478,

     2532, 2533, 2534,  409,  540, 2536, 2515, 2522, 2520, 2523,
      573, 2538, 2516, 2539, 2540, 2542,  409,  453,  478, 2545,
     2546, 2547, 2541,  540, 2524, 2549, 2535, 2530,  409, 2531,
      573, 2551, 2552, 2553,  409, 2555,  453,  478, 2558, 2559,
     2537, 2560,  540, 2562,  573, 2554,  409, 2564, 2565, 2566,
     2548,  409, 2543, 2544, 2568, 2567,  453,  478, 2571, 2572,
     2573,  540, 2575,  409,  573, 2550, 2577, 2585, 2577, 2585,
     2577, 2577, 2586, 2587, 2561, 2577, 2556, 2557, 2580, 2582,
     2585, 2577, 2577, 2578, 2563, 2578, 2574, 2578, 2578, 2569,
     2570, 2577, 2579, 2577, 2577, 2581, 2578, 2576, 2578, 2578,

      409,  540, 2583, 2577, 2580, 2582, 2583, 2586, 2578, 2587,
     2578, 2578,  409,  521, 1188, 1187, 1186, 1171, 1170, 2584,
     2578, 2581, 2578, 2584,   38,   38,   38,   38,   38,   38,
       38,   38,   38,   74,   74,   74,   74,   74,   74,   74,
       74,   74,   92,   92,   92,   92,   92,   92,   92,   92,
       92,  147,  147,  147,  147,  147,  147,  147,  147,  147,
      178,  178,  178,  178,  178,  178,  178,  178,  178,  212,
      212,  212,  212,  212,  212,  212,  212,  212,  227,  227,
      227,  227,  227,  227,  227,  227,  227,  241,  241,  241,
      241,  241,  241,  241,  241,  241,  255,  255,  255,  255,

      255,  255,  255,  255,  255,  269,  269,  269,  269,  269,
      269,  269,  269,  269,  283,  283,  283,  283,  283,  283,
      283,  283,  283,  297,  297,  297,  297,  297,  297,  297,
      297,  297,  329,  329,  329,  329,  329,  329,  329,  329,
      329,  336,  336,  336,  336,  336,  336,  336,  336,  336,
      364, 1169, 1168, 1167,  364,  367,  367,  367,  367,  367,
      367,  367,  367,  367,  372,  372,  372,  372,  372,  372,
      372,  372,  372,  387, 1166, 1165, 1164,  387,  389,  389,
      389,  389,  389,  389,  389,  389,  389,  392,  392,  392,
      392,  392,  392,  392,  392,  392,  407, 1163, 1162, 1161,

      407,  409, 1160, 1159, 1158,  409,  437,  437,  437,  437,
      437,  452,  452, 1157,  452,  452,  452,  452,  452,  452,
      477,  477, 1156, 1155, 1154,  477,  493, 1153, 1152, 1151,
      493,  507, 1150, 1149, 1148,  507,  524,  524,  524,  524,
      524,  524,  524,  524,  524,  539, 1147, 1146,  539,  543,
      543,  543,  543,  543,  543,  543,  543,  543,  559, 1145,
     1144, 1143,  559,  574,  574,  574,  574,  574,  574,  577,
      577,  577,  577,  577,  577,  577,  577,  577,  602,  602,
     1142,  602,  602,  602,  602,  602,  602,  607, 1141,  607,
      607, 1140,  607,  607,  607,  609,  609, 1139,  609,  609,

      609,  609,  609,  609,  630,  630,  936,  630,  630,  630,
      630,  630,  630,  635,  635,  922,  635,  635,  635,  635,
      635,  635,  652,  652, 1110,  652,  652,  652,  652,  652,
      652,  655,  655, 1109,  655,  655,  655,  655,  655,  655,
      769,  769, 1108,  769,  769,  769,  769,  769,  769,  787,
      787, 1107,  787,  787,  787,  787,  787,  787,  821,  821,
     1106,  821,  821,  821,  821,  821,  821, 1019, 1019, 1019,
     1019, 1019, 1019, 1019, 1019, 1019,  819,  819, 1105,  819,
      819,  819,  819,  819,  819, 1957, 1957, 1957, 1957, 1957,
     1980, 1980, 1980, 1980, 1980, 2046, 2046, 2046, 2046, 2046,

     2046, 1958, 1958, 1958, 1958, 1958, 2132, 2132, 2132, 2132,
     2132, 2132, 2132, 2132, 2132, 2208, 2208, 2208, 2208, 2208,
     2214, 2214, 1104, 2214, 2214, 2214, 2214, 2214, 2214, 1103,
     1102, 1101, 1098, 1097, 1041, 1096, 1095, 1094, 1081, 1080,
     1079, 1078, 1077, 1076, 1075, 1074, 1073, 1072, 1071, 1070,
     1069, 1068, 1067, 1066, 1065, 1064, 1063, 1062, 1061, 1060,
     1059, 1058, 1057,  858, 1056, 1055, 1054, 1053, 1052, 1051,
     1050, 1049, 1048, 1043, 1042,  844, 1041, 1040, 1026,  573,
     1017, 1016, 1015, 1014, 1013, 1012, 1011, 1010, 1009, 1008,
     1007, 1006, 1005,  784,  989,  988,  987,  986,  985,  984,

      983,  982,  981,  980,  979,  978,  977,  767,  976,  975,
      974,  973,  972,  971,  970,  969,  968,  967,  966,  965,
      964,  963,  962,  961,  960,  959,  958,  957,  956,  955,
      954,  953,  952,  951,  936,  922,  858,  919,  918,  917,
      916,  915,  914,  913,  912,  911,  910,  909,  908,  907,
      844,  903,  892,  887,  886,  885,  884,  883,  882,  881,
      880,  879,  878,  877,  876,  875,  653,  650,  874,  873,
      872,  871,  870,  869,  868,  867,  866,  865,  864,  863,
      862,  633,  859,  628,  858,  857,  856,  855,  854,  853,
      852,  851,  850,  849,  848,  847,  846,  845,  844,  588,

      587,  585,  584,  583,  582,  581,  580,  816,  573,  573,
      815,  814,  810,  809,  808,  807,  806,  805,  802,  784,
     2588,  540,  783,  782,  778,  777,  776,  775,  774,  773,
      770,  767,  766,  765,  761,  760,  759,  758,  757,  756,
      753,  752,  751,  747,  746,  745,  744,  743,  742,  739,
      479,  478,  478,  476,  462,  461,  460,  459,  458,  457,
      456,  455,  454,  453,  453,  703,  702,  698,  697,  696,
      695,  694,  693,  689,  436,  686,  686,  686,  686,  686,
      686,  686,  686,  669,  668,  664,  663,  662,  661,  660,
      659,  656,  653,  650,  649,  648,  644,  643,  642,  641,

      640,  639,  636,  633,  628,  625,  624,  620,  619,  618,
      617,  616,  615,  610,  349,  348,  347,  346,  345,  344,
      343,  342,  341,  588,  587,  584,  583,  582,  581,  580,
      573,  573,  588,  587,  584,  583,  582,  581,  580,  573,
      573,  572,  569,  566,  565,  564,  563,  560,  347,  347,
      540,  540,  538,  535,  532,  531,  530,  529,  526,  520,
      517,  514,  513,  512,  511,  508,  347,  347,  506,  503,
      500,  499,  498,  497,  494,  347,  347,  479,  478,  476,
      479,  478,  476,  462,  461,  460,  459,  458,  457,  456,
      455,  453,  454,  453,  453,  462,  461,  460,  459,  458,

      457,  456,  455,  453,  454,  453,  451,  448,  445,  444,
      443,  442,  439,  349,  348,  346,  345,  344,  343,  342,
      436,  349,  348,  346,  345,  344,  343,  342,  436,  433,
      432,  434,  433,  432,  431,  428,  427,  347,  347,  406,
      403,  400,  399,  398,  397,  394,  347,  347,  386,  383,
      380,  379,  378,  377,  374,  363,  360,  357,  356,  355,
      354,  351,  349,  348,  347,  346,  345,  344,  343,  342,
      341,  350,  349,  348,  347,  346,  345,  344,  343,  342,
      341,  340, 2588,   37, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,

     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588
    } ;

static const short int yy_chk[5940] =
    {   0,
        0,    0,    1,    1,    1,  329,  330,    1,  329,  330,
        1,    0,    1,   31,   31,   31,   31,   32,   32,   32,
       32,    1,    1,    1,    1,    1,    0,    1,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    3,    3,    3,   65,   83,    3,  466,
       70,    3,   76,    3,   70,  128,   80,   88,   65,   83,

      128,   88,    3,    3,    3,    3,    3,   72,    3,    5,
        5,    5,    5,    5,   76,    5,    5,    5,   80,    5,
      106,    5,  138,   72,  106,  139,  430,  138,  430,  139,
        5,    5,    5,    5,    5,  466,    5,    5,    5,    5,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    6,    6,    6,    6,    6,
        6,    6,    6,    6,    6,    7,    7,    7,    7,    7,

      101,    7,    7,    7,  174,    7,  142,    7,  174,  121,
      142,  121,  101,  435,  142,  435,    7,    7,    7,    7,
        7,  121,    7,    7,    7,    7,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   10,   10,   10,   10,   10,   10,   10,   10,   10,
       10,   11,  131,   11,  141,   90,   11,   11,   11,   11,

       11,   11,   11,  108,   75,   75,   75,   75,   75,  119,
       75,   90,  131,   11,  141,  118,   11,  118,   11,  108,
      276,  119,   11,  154,  119,   11,   11,   11,  145,  118,
      206,   11,   12,   75,   12,  120,  125,   12,   12,   12,
       12,   12,   12,   12,  145,  154,  120,  120,  125,   79,
       79,   79,   79,   79,   12,   79,  276,   12,  122,   12,
      122,  206,  165,   12,  122, 1010,   12,   12,   12,  123,
      122,  123,   12,   13,   13,   13,   13,   13,   79,  332,
       13,  123,  332,   13,  165,   13,  126,  126,  126,  126,
      126,  126,  126,  431,   13,   13,   13,   13,   13,  431,

       13,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   14,   14,   14,   14,   14,   15,   15,   15,  237,
      557,   15,  169,  237,   15, 1011,   15,  127,  127,  127,
      127,  127,  127,  127,  169,   15,   15,   15,   15,   15,
      557,   15,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,

       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   17,   17,   17,
       17,   17,  251,   17,   17,   17,  251,   17, 1012,   17,
      136,  136,  136,  136,  136,  136,  136, 1013,   17,   17,
       17,   17,   17, 1014,   17,   17,   17,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,

       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   18,   18,   18,
       18,   18,   18,   19,   19,   19,   19,   19,  265,   19,
       19,   19,  265,   19, 1015,   19,  137,  137,  137,  137,
      137,  137,  137, 1016,   19,   19,   19,   19,   19, 1017,
       19,   19,   19,   19,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   20,   20,   20,   21,
       21,   21,   21,   21,  140,   21,   21,   21,  293,   21,
     1025,   21,  293,  232,  353,  353, 1026,  140,  376,  376,
       21,   21,   21,   21,   21,  232,   21,   21,   21,   21,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   22,   22,   22,   22,   22,
       22,   22,   22,   22,   22,   23,   23,   23,   23,   23,

      246,   23,   23,   23,  578,   23,  578,   23,   23,  260,
      396,  396,  246,  441,  441, 1040,   23,   23,   23,   23,
       23,  260,   23,   23,   23,   23,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   24,   24,   24,   24,   24,   24,   24,   24,   24,
       24,   25,   25,   25,   25,   25,  273,   25,   25,   25,
      817,   25,  817,   25,   25,  423,  423,  423,  423,  423,

      423,  423,   25,   25,   25,   25,   25,  273,   25,   25,
       25,   25,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   26,   26,   26,
       26,   26,   26,   26,   26,   26,   26,   27,   27,   27,
       27,   27,  288,   27,   27,   27,  352,   27,  468,   27,
      485,  496,  496,  602,  288,  468,  602,  485,   27,   27,
       27,   27,   27,  352,   27,   27,   27,   27,   28,   28,

       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   28,   28,   28,   28,   28,   28,   28,
       28,   28,   28,   29,   29,   29,   29,   29,  360,   29,
       29,  360,  363,   29, 1041,   29,  510,  510,  528,  528,
     1042,  360,  551,  551,   29,   29,   29,   29,   29,  363,
       29,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,

       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   30,   30,   30,   30,   35,   35,   35,   35,
       35,  204,   35,   35,   35, 1043,  176,   77,   77,   77,
       77,   77,   81,   81,   81,   81,   81,   93,   93,   93,
       93,   93,  176,   93,  201,   35,   36,   36,   36,   36,
       36,  278,   36,   36,   36,   77,   77,   77,  210,  202,
       81,   81,   81,  203,  217,  204,   93,   95,   95,   95,
       95,   95,  208,  201,  278,   36,   97,   97,   97,   97,

       97,  205,   97,   99,   99,   99,   99,   99,  202,  124,
      203,  124,  207,  217, 1045,   95,   95,   95,  112,  210,
      202,  124,  112,  208,  112,   97,  112,  124,  219,  209,
      115,   99,   99,   99,  115,  220,  115,  112,  115,  112,
      116,  205,  221,  207,  116,  218,  116,  207,  116,  115,
      117,  115,  222,  223,  117,  219,  117,  226,  117,  116,
      209,  116,  224,  225,  239,  253,  275,  474,  116,  117,
      305,  117,  277,  267,  218,  274,  209,  319,  117,  220,
      239,  253,  221,  222,  223,  275,  218,  316,  223,  267,
      117,  295,  305,  224,  225,  474,  274,  323,  226,  256,

      256,  256,  256,  256,  277,  256,  319,  295,  274,  316,
      225,  258,  258,  258,  258,  258,  279,  258,  270,  270,
      270,  270,  270,  280,  270,  281,  282,  321,  256,  272,
      272,  272,  272,  272,  375,  272,  322,  323,  328,  279,
      258,  320,  270,  279,  369,  386,  280,  270,  281,  409,
      324,  375,  325,  272,  321,  326,  369,  327,  272,  282,
      395,  409,  386, 1047,  281,  298,  298,  298,  298,  298,
      320,  298,  309,  309,  309,  309,  309,  395,  309,  328,
      322,  324,  320,  325,  410,  406,  326,  325,  327,  334,
      335,  414,  334,  335,  298,  336,  410,  383,  336,  546,

      383,  309,  406,  414,  327,  366,  366,  366,  366,  366,
      383,  366,  371,  371,  371,  371,  371,  334,  335,  403,
      546,  470,  403,  336,  367,  367,  367,  367,  367, 1048,
      367,  487,  403,  411,  366,  372,  372,  372,  372,  372,
      371,  371,  371,  389,  389,  389,  389,  389,  438,  389,
      411,  440,  463,  367,  392,  392,  392,  392,  392,  412,
      438,  413,  411,  372,  372,  372,  470,  418,  440,  412,
      412,  412,  389,  413,  411,  415,  487,  418,  413,  418,
      469,  463,  392,  392,  392,  408,  417,  416,  408,  408,
      408,  408,  408,  408,  408,  486,  465,  415,  417,  416,

      419,  467,  417,  419,  420,  421,  421,  408,  416,  415,
      422,  471,  419,  419,  473,  420,  420,  451,  421,  408,
      424,  424,  424,  424,  424,  424,  424,  422,  448,  464,
      469,  448,  472,  480,  451,  465,  465,  482,  475,  422,
      481,  448,  467,  483,  484,  486,  464,  488,  490,  489,
      471,  422,  491,  492,  473,  475,  495,  481,  506,  562,
      562,  472,  480, 1049,  472,  509,  503,  579,  579,  503,
      492,  579, 1050,  495,  472,  506,  482,  482,  489,  503,
      491,  489,  509,  520,  517,  484,  488,  517,  490,  483,
      549,  489,  523,  523,  523,  523,  523,  517,  523,  527,

      520,  524,  524,  524,  524,  524,  535,  524,  538,  535,
      547,  542,  542,  542,  542,  542,  527,  542,  547,  535,
      548,  523,  550,  552,  553,  538,  554,  547,  549,  555,
      524,  543,  543,  543,  543,  543,  556,  543,  595,  561,
      542,  544,  544,  544,  544,  544,  569,  544,  592,  569,
      555,  548,  548,  555,  558,  550,  561,  554,  572,  569,
      543,  553,  558,  555,  586,  552,  589,  544,  556,  591,
      544,  558,  593,  590,  594,  572,  576,  576,  576,  576,
      576,  594,  576,  577,  577,  577,  577,  577,  595,  577,
      590,  596,  597,  598,  592,  589,  600,  599,  601,  586,

      603,  604,  718,  603,  604,  576,  632,  632,  591,  591,
      610,  586,  577,  593,  605,  601,  606,  605,  607,  606,
      609,  607,  598,  609,  600,  598,  611,  610,  626,  671,
      636,  597,  688,  688,  708,  598,  596,  599,  735,  671,
      718,  671,  605,  611,  606,  626,  607,  636,  609,  630,
      630,  630,  630,  630, 1051,  630,  635,  635,  635,  635,
      635,  652,  652,  652,  652,  652,  656,  652,  655,  655,
      655,  655,  655,  708,  670,  672,  735,  673,  630,  673,
     1052,  676,  689,  656,  635,  635,  635,  672,  705,  673,
      652,  670,  672,  676,  674,  677,  655,  655,  655,  689,

      678,  676,  678,  670,  674,  705,  674,  677,  679,  681,
      679,  677,  678,  706,  680,  670,  680,  683,  681,  709,
      679,  681,  682,  682,  683,  710,  680,  711,  712,  683,
      706,  713,  714,  715,  682,  684,  684,  684,  684,  684,
      684,  684,  685,  685,  685,  685,  685,  685,  685,  719,
      716,  717,  720,  721,  723,  725,  710,  724,  726,  727,
      728,  729,  730,  731,  715,  709,  711,  732,  738,  733,
      721,  723,  712,  736,  724,  734,  737,  714,  739,  719,
      713,  716,  717, 1053,  753,  738, 1054,  791,  720,  789,
      727,  790,  770,  794,  725,  739,  793,  792,  732,  728,

      733,  753,  795,  736,  726,  729,  734,  796,  731,  770,
      791,  730,  737,  769,  769,  769,  769,  769,  788,  769,
      789,  787,  787,  787,  787,  787,  788,  787,  792,  790,
      796,  797,  793,  798,  794,  788,  799,  800,  802,  795,
      801,  824,  769,  786,  786,  786,  786,  786,  822,  786,
      787,  823,  825,  827,  797,  802,  798,  828,  824,  800,
      829,  819,  819,  819,  819,  819,  799,  819,  801,  825,
      830,  831,  786,  820,  820,  820,  820,  820,  832,  820,
      833,  838,  786,  821,  821,  821,  821,  821,  834,  821,
      819,  829,  827,  822,  786,  835,  823,  823,  836,  837,

      839,  840,  820,  828,  842,  847,  848,  864,  888,  830,
      888,  838,  821,  865,  877,  831,  878,  928,  840,  834,
      888,  842,  847,  848,  864,  833,  835,  832,  890,  836,
      865,  877,  889,  878,  889,  891,  839,  837,  892,  893,
      892,  894,  896,  894,  889,  890,  895,  897,  896,  898,
      892,  893,  891, 1055,  896,  894,  933,  890,  928,  897,
      909,  898,  897,  899,  891,  899,  923,  924,  895,  890,
      898,  900,  927,  900,  910,  899,  891,  909,  920,  925,
      895,  929,  926,  900,  901,  901,  901,  901,  901,  901,
      901,  910,  931,  930,  932,  920,  925,  923,  924,  926,

      930,  934,  935,  927,  937,  938,  933,  940,  929,  939,
      942,  941,  943,  945,  946,  944,  947,  948,  953,  949,
      945,  937,  954,  950,  940, 1056,  966,  931,  941,  967,
      979,  980,  934,  935, 1002,  953,  938, 1001,  932,  954,
      939,  942,  944,  966,  997,  992,  967,  979,  980,  946,
      949,  993,  996,  943,  950,  990,  990,  990,  990,  990,
      947,  990,  994,  995,  998,  999,  999,  948,  992, 1000,
      994,  995, 1003, 1001,  993,  996, 1002,  997, 1004,  994,
      995, 1007, 1008,  998,  990, 1018, 1018, 1018, 1018, 1018,
     1021, 1018, 1023, 1022, 1027, 1003, 1000, 1028, 1007, 1008,

     1022, 1004, 1031, 1024,  990,  991,  991,  991,  991,  991,
     1029,  991, 1030, 1033, 1018, 1019, 1019, 1019, 1019, 1019,
     1024, 1019, 1032, 1034, 1023, 1027, 1035, 1029, 1028, 1030,
     1034, 1021, 1036, 1031,  991, 1037, 1038, 1039, 1057, 1044,
     1033, 1046, 1058, 1059, 1019, 1060, 1061, 1062, 1063, 1064,
     1065, 1066, 1067, 1068,  991,  991, 1044, 1069, 1046, 1070,
     1071, 1035, 1072, 1032, 1073, 1074, 1075, 1038, 1039, 1076,
     1077, 1078, 1079, 1080, 1081, 1082, 1036, 1083, 1084, 1087,
     1085, 1090, 1088, 1094, 1095, 1037, 1082, 1082, 1083, 1083,
     1084, 1084, 1085, 1086, 1088, 1085, 1089, 1086, 1089, 1091,

     1092, 1088, 1096, 1090, 1097, 1086, 1098, 1099, 1089, 1100,
     1101, 1091, 1092, 1102, 1091, 1090, 1103, 1104, 1105, 1106,
     1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116,
     1117, 1118, 1120, 1119, 1121, 1123, 1122, 1124, 1126, 1125,
     1128, 1129, 1123, 1113, 1127, 1115, 1130, 1131, 1133, 1134,
     1132, 1137, 1136, 1139, 1135, 1140, 1141, 1128, 1129, 1136,
     1138, 1142, 1143, 1144, 1111, 1112, 1119, 1122, 1125, 1145,
     1146, 1147, 1117, 1148, 1149, 1118, 1150, 1151, 1126, 1152,
     1120, 1124, 1121, 1132, 1127, 1135, 1153, 1154, 1130, 1138,
     1155, 1131, 1156, 1157, 1158, 1137, 1133, 1134, 1159, 1160,

     1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170,
     1171, 1172, 1172, 1172, 1172, 1172, 1175, 1172, 1173, 1173,
     1173, 1173, 1173, 1176, 1173, 1178, 1177, 1179, 1180, 1173,
     1174, 1174, 1174, 1174, 1174, 1181, 1174, 1183, 1183, 1182,
     1172, 1184, 1185, 1186, 1187, 1188, 1189, 1173, 1175, 1190,
     1191, 1192, 1179, 1193, 1194, 1176, 1172, 1195, 1196, 1174,
     1177, 1178, 1182, 1185, 1197, 1198, 1174, 1199, 1180, 1200,
     1201, 1202, 1198, 1203, 1204, 1181, 1200, 1184, 1205, 1206,
     1207, 1208, 1209, 1210, 1211, 1212, 1213, 1215, 1214, 1216,
     1217, 1204, 1218, 1219, 1199, 1214, 1206, 1220, 1221, 1222,

     1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232,
     1233, 1202, 1234, 1203, 1235, 1236, 1210, 1213, 1216, 1237,
     1238, 1239, 1228, 1208, 1240, 1241, 1209, 1242, 1243, 1244,
     1245, 1215, 1211, 1212, 1246, 1247, 1248, 1249, 1250, 1251,
     1252, 1253, 1254, 1255, 1242, 1256, 1263, 1257, 1266, 1258,
     1258, 1259, 1260, 1259, 1260, 1255, 1257, 1256, 1253, 1257,
     1255, 1258, 1256, 1259, 1260, 1261, 1264, 1261, 1262, 1265,
     1267, 1268, 1269, 1270, 1271, 1272, 1273, 1261, 1274, 1262,
     1262, 1265, 1275, 1264, 1276, 1277, 1265, 1278, 1279, 1280,
     1281, 1282, 1283, 1284, 1285, 1264, 1286, 1287, 1288, 1289,

     1290, 1291, 1292, 1293, 1278, 1294, 1295, 1264, 1296, 1297,
     1298, 1299, 1300, 1301, 1303, 1302, 1304, 1305, 1291, 1306,
     1307, 1308, 1309, 1310, 1285, 1311, 1312, 1286, 1287, 1288,
     1313, 1284, 1302, 1314, 1315, 1280, 1281, 1316, 1296, 1289,
     1297, 1298, 1299, 1317, 1295, 1318, 1290, 1313, 1292, 1293,
     1319, 1294, 1300, 1320, 1321, 1322, 1323, 1324, 1325, 1301,
     1303, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334,
     1335, 1336, 1340, 1341, 1324, 1337, 1337, 1337, 1337, 1337,
     1343, 1337, 1342, 1347, 1344, 1345, 1337, 1335, 1338, 1338,
     1338, 1338, 1338, 1346, 1338, 1339, 1339, 1339, 1339, 1339,

     1348, 1339, 1343, 1350, 1337, 1349, 1339, 1344, 1345, 1351,
     1340, 1341, 1342, 1349, 1352, 1347, 1346, 1338, 1353, 1338,
     1354, 1355, 1349, 1356, 1339, 1357, 1358, 1359, 1360, 1361,
     1363, 1362, 1364, 1365, 1366, 1367, 1368, 1370, 1348, 1369,
     1371, 1350, 1372, 1373, 1374, 1360, 1362, 1364, 1375, 1376,
     1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386,
     1388, 1387, 1390, 1391, 1389, 1392, 1376, 1370, 1393, 1394,
     1395, 1371, 1396, 1372, 1373, 1363, 1397, 1369, 1387, 1365,
     1366, 1389, 1398, 1399, 1374, 1400, 1401, 1402, 1403, 1404,
     1405, 1406, 1407, 1408, 1375, 1409, 1377, 1410, 1411, 1412,

     1414, 1413, 1415, 1416, 1402, 1417, 1418, 1423, 1419, 1419,
     1424, 1422, 1420, 1413, 1415, 1416, 1412, 1413, 1418, 1416,
     1419, 1418, 1414, 1415, 1420, 1421, 1425, 1417, 1422, 1426,
     1427, 1428, 1429, 1430, 1414, 1431, 1432, 1421, 1433, 1417,
     1422, 1434, 1435, 1436, 1437, 1439, 1438, 1440, 1441, 1442,
     1443, 1446, 1422, 1438, 1444, 1441, 1445, 1447, 1448, 1449,
     1436, 1451, 1450, 1452, 1453, 1454, 1455, 1458, 1446, 1450,
     1456, 1453, 1457, 1459, 1460, 1448, 1461, 1462, 1463, 1464,
     1443, 1465, 1466, 1444, 1458, 1467, 1468, 1470, 1469, 1437,
     1459, 1471, 1440, 1442, 1472, 1439, 1455, 1445, 1473, 1456,

     1474, 1475, 1476, 1477, 1449, 1469, 1478, 1479, 1452, 1454,
     1480, 1451, 1481, 1457, 1482, 1483, 1484, 1485, 1486, 1487,
     1488, 1489, 1493, 1495, 1479, 1490, 1490, 1490, 1490, 1490,
     1496, 1490, 1498, 1491, 1491, 1491, 1491, 1491, 1489, 1491,
     1494, 1494, 1497, 1497, 1490, 1492, 1492, 1492, 1492, 1492,
     1499, 1492, 1500, 1501, 1490, 1503, 1504, 1505, 1502, 1493,
     1506, 1507, 1491, 1508, 1492, 1495, 1502, 1496, 1498, 1509,
     1510, 1511, 1499, 1500, 1492, 1502, 1512, 1513, 1514, 1515,
     1516, 1517, 1491, 1518, 1519, 1522, 1501, 1520, 1517, 1523,
     1521, 1524, 1513, 1512, 1520, 1525, 1526, 1527, 1530, 1528,

     1531, 1515, 1532, 1529, 1533, 1534, 1535, 1514, 1529, 1536,
     1537, 1538, 1525, 1539, 1527, 1522, 1528, 1531, 1523, 1529,
     1540, 1541, 1534, 1542, 1543, 1516, 1536, 1545, 1538, 1519,
     1544, 1546, 1524, 1518, 1521, 1544, 1547, 1548, 1542, 1549,
     1550, 1543, 1551, 1552, 1554, 1553, 1544, 1555, 1546, 1556,
     1553, 1557, 1558, 1559, 1560, 1561, 1549, 1562, 1563, 1551,
     1552, 1553, 1562, 1565, 1555, 1564, 1570, 1566, 1567, 1558,
     1569, 1560, 1561, 1562, 1568, 1571, 1568, 1575, 1572, 1566,
     1563, 1573, 1564, 1566, 1561, 1567, 1568, 1569, 1577, 1578,
     1576, 1579, 1563, 1572, 1564, 1580, 1561, 1567, 1573, 1569,

     1574, 1581, 1582, 1583, 1584, 1574, 1564, 1576, 1579, 1567,
     1585, 1569, 1586, 1587, 1588, 1589, 1574, 1585, 1581, 1591,
     1583, 1590, 1592, 1593, 1594, 1595, 1596, 1598, 1597, 1586,
     1599, 1600, 1589, 1602, 1584, 1597, 1591, 1601, 1603, 1584,
     1593, 1604, 1595, 1605, 1598, 1607, 1606, 1609, 1587, 1608,
     1584, 1606, 1590, 1610, 1601, 1603, 1596, 1611, 1604, 1588,
     1605, 1596, 1606, 1612, 1602, 1599, 1608, 1613, 1614, 1616,
     1615, 1617, 1596, 1618, 1611, 1615, 1600, 1619, 1620, 1621,
     1622, 1623, 1625, 1626, 1613, 1614, 1615, 1624, 1617, 1627,
     1628, 1629, 1624, 1630, 1631, 1620, 1646, 1622, 1623, 1648,

     1626, 1639, 1636, 1624, 1637, 1637, 1640, 1642, 1629, 1635,
     1644, 1631, 1632, 1632, 1632, 1632, 1632, 1635, 1632, 1633,
     1633, 1633, 1633, 1633, 1636, 1633, 1635, 1644, 1639, 1636,
     1642, 1632, 1634, 1634, 1634, 1634, 1634, 1638, 1634, 1641,
     1636, 1632, 1643, 1640, 1645, 1638, 1647, 1641, 1633, 1645,
     1643, 1649, 1633, 1650, 1638, 1651, 1641, 1652, 1634, 1643,
     1645, 1634, 1653, 1647, 1654, 1655, 1656, 1657, 1659, 1658,
     1650, 1660, 1661, 1662, 1652, 1653, 1658, 1664, 1663, 1665,
     1667, 1666, 1669, 1656, 1668, 1659, 1671, 1670, 1673, 1672,
     1662, 1670, 1675, 1655, 1664, 1672, 1676, 1657, 1666, 1654,

     1677, 1668, 1657, 1674, 1678, 1679, 1660, 1680, 1655, 1663,
     1681, 1682, 1683, 1657, 1684, 1685, 1686, 1661, 1687, 1688,
     1674, 1678, 1687, 1689, 1690, 1691, 1692, 1681, 1693, 1689,
     1694, 1695, 1696, 1697, 1694, 1698, 1699, 1700, 1696, 1701,
     1703, 1701, 1702, 1702, 1704, 1701, 1705, 1705, 1707, 1708,
     1706, 1701, 1703, 1709, 1702, 1703, 1706, 1710, 1705, 1711,
     1707, 1703, 1706, 1712, 1707, 1713, 1714, 1712, 1715, 1716,
     1717, 1718, 1714, 1719, 1720, 1721, 1722, 1723, 1724, 1726,
     1725, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735,
     1736, 1737, 1740, 1722, 1738, 1739, 1741, 1742, 1743, 1728,

     1745, 1744, 1746, 1732, 1747, 1750, 1735, 1748, 1749, 1724,
     1725, 1738, 1749, 1724, 1730, 1743, 1752, 1753, 1754, 1746,
     1731, 1755, 1740, 1726, 1748, 1757, 1739, 1727, 1751, 1726,
     1739, 1744, 1756, 1734, 1751, 1745, 1756, 1759, 1758, 1760,
     1741, 1761, 1762, 1742, 1758, 1764, 1741, 1763, 1765, 1747,
     1766, 1763, 1767, 1768, 1765, 1769, 1770, 1770, 1770, 1770,
     1770, 1773, 1770, 1771, 1771, 1771, 1771, 1771, 1774, 1771,
     1778, 1777, 1775, 1770, 1776, 1780, 1779, 1781, 1783, 1780,
     1782, 1784, 1785, 1786, 1773, 1770, 1782, 1788, 1773, 1789,
     1774, 1791, 1771, 1777, 1787, 1792, 1794, 1778, 1790, 1793,

     1796, 1795, 1771, 1772, 1772, 1772, 1772, 1772, 1775, 1772,
     1787, 1789, 1776, 1779, 1775, 1790, 1797, 1796, 1798, 1799,
     1800, 1801, 1788, 1802, 1803, 1804, 1792, 1805, 1806, 1793,
     1792, 1807, 1772, 1808, 1809, 1772, 1810, 1800, 1811, 1812,
     1794, 1803, 1813, 1814, 1815, 1816, 1794, 1795, 1798, 1817,
     1772, 1809, 1818, 1819, 1799, 1821, 1822, 1823, 1824, 1825,
     1814, 1826, 1827, 1828, 1829, 1830, 1817, 1831, 1802, 1820,
     1820, 1820, 1833, 1820, 1823, 1820, 1834, 1832, 1835, 1827,
     1836, 1829, 1837, 1838, 1820, 1820, 1820, 1820, 1820, 1820,
     1820, 1820, 1820, 1820, 1832, 1839, 1840, 1836, 1841, 1842,

     1838, 1842, 1844, 1845, 1843, 1847, 1846, 1839, 1840, 1848,
     1850, 1839, 1840, 1842, 1844, 1841, 1843, 1843, 1846, 1849,
     1845, 1849, 1847, 1851, 1852, 1853, 1854, 1841, 1855, 1857,
     1856, 1858, 1845, 1859, 1847, 1860, 1861, 1862, 1863, 1841,
     1864, 1852, 1865, 1866, 1845, 1867, 1847, 1856, 1858, 1868,
     1869, 1870, 1871, 1872, 1862, 1873, 1874, 1875, 1877, 1876,
     1878, 1879, 1867, 1881, 1882, 1863, 1884, 1885, 1870, 1880,
     1883, 1886, 1887, 1874, 1888, 1889, 1890, 1878, 1891, 1892,
     1860, 1861, 1864, 1865, 1875, 1893, 1880, 1883, 1894, 1887,
     1868, 1895, 1889, 1896, 1897, 1898, 1892, 1899, 1872, 1877,

     1873, 1876, 1879, 1900, 1901, 1902, 1903, 1904, 1905, 1906,
     1896, 1907, 1898, 1908, 1908, 1908, 1908, 1908, 1911, 1908,
     1912, 1901, 1913, 1916, 1915, 1905, 1920, 1918, 1907, 1914,
     1913, 1921, 1923, 1908, 1909, 1909, 1909, 1909, 1909, 1913,
     1909, 1924, 1908, 1910, 1910, 1910, 1910, 1910, 1914, 1910,
     1922, 1917, 1925, 1919, 1926, 1911, 1916, 1912, 1915, 1917,
     1918, 1919, 1927, 1909, 1928, 1930, 1931, 1922, 1917, 1910,
     1919, 1926, 1910, 1909, 1932, 1929, 1933, 1934, 1935, 1937,
     1936, 1928, 1929, 1938, 1939, 1930, 1940, 1930, 1941, 1942,
     1943, 1944, 1945, 1946, 1934, 1947, 1948, 1949, 1950, 1951,

     1952, 1939, 1953, 1955, 1959, 1935, 1942, 1954, 1960, 1958,
     1946, 1958, 1961, 1962, 1963, 1950, 1951, 1964, 1966, 1932,
     1937, 1933, 1936, 1967, 1954, 1965, 1968, 1940, 1956, 1956,
     1956, 1956, 1956, 1956, 1957, 1957, 1957, 1969, 1957, 1970,
     1957, 1972, 1965, 1971, 1980, 1982, 1980, 1973, 1983, 1957,
     1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957, 1957, 1973,
     1971, 1974, 1977, 1984, 1975, 1976, 1981, 1976, 1981, 1978,
     1985, 1986, 1987, 1974, 1974, 1975, 1975, 1976, 1988, 1977,
     1978, 1978, 1979, 1979, 1979, 1979, 1979, 1979, 1989, 1990,
     1991, 1977, 1992, 1993, 1994, 1988, 1995, 1996, 1997, 1998,

     1999, 2000, 2001, 1977, 2003, 2002, 2005, 2004, 2006, 2007,
     2008, 1994, 2011, 2009, 2010, 2012, 1998, 1999, 2013, 2014,
     2015, 1992, 2002, 2016, 2018, 2006, 2017, 2019, 2020, 1997,
     2009, 2010, 2012, 2021, 2022, 1993, 2004, 1996, 2023, 2024,
     2025, 2008, 2001, 2017, 2026, 2027, 2028, 2029, 2005, 2007,
     2030, 2033, 2011, 2036, 2039, 2023, 2031, 2031, 2031, 2031,
     2031, 2034, 2031, 2037, 2029, 2035, 2038, 2031, 2040, 2041,
     2042, 2037, 2033, 2044, 2043, 2050, 2036, 2052, 2053, 2046,
     2037, 2057, 2048, 2051, 2049, 2031, 2032, 2032, 2032, 2032,
     2032, 2043, 2032, 2045, 2047, 2034, 2054, 2035, 2038, 2046,

     2051, 2046, 2048, 2055, 2045, 2045, 2045, 2045, 2045, 2045,
     2032, 2056, 2032, 2049, 2047, 2032, 2047, 2050, 2053, 2058,
     2055, 2059, 2060, 2061, 2062, 2063, 2064, 2054, 2056, 2065,
     2066, 2067, 2068, 2069, 2070, 2072, 2073, 2072, 2059, 2071,
     2071, 2071, 2071, 2074, 2076, 2077, 2065, 2066, 2078, 2079,
     2069, 2071, 2080, 2081, 2082, 2083, 2084, 2085, 2087, 2058,
     2086, 2089, 2090, 2092, 2088, 2092, 2079, 2093, 2094, 2080,
     2087, 2095, 2086, 2084, 2085, 2086, 2088, 2096, 2089, 2090,
     2088, 2091, 2091, 2091, 2091, 2098, 2100, 2097, 2099, 2102,
     2089, 2090, 2101, 2091, 2103, 2104, 2105, 2106, 2107, 2108,

     2109, 2110, 2089, 2090, 2097, 2099, 2111, 2112, 2113, 2114,
     2115, 2116, 2104, 2105, 2117, 2118, 2108, 2119, 2120, 2121,
     2122, 2123, 2126, 2124, 2125, 2113, 2114, 2115, 2127, 2128,
     2100, 2129, 2130, 2101, 2119, 2120, 2142, 2143, 2144, 2103,
     2124, 2125, 2133, 2137, 2138, 2110, 2145, 2111, 2129, 2130,
     2140, 2139, 2112, 2131, 2131, 2131, 2131, 2131, 2140, 2131,
     2133, 2150, 2133, 2145, 2146, 2151, 2152, 2140, 2131, 2131,
     2131, 2131, 2131, 2131, 2136, 2136, 2149, 2138, 2136, 2137,
     2153, 2146, 2131, 2132, 2132, 2132, 2132, 2132, 2139, 2132,
     2135, 2135, 2135, 2135, 2135, 2135, 2149, 2156, 2136, 2135,

     2136, 2148, 2157, 2141, 2159, 2150, 2151, 2132, 2160, 2132,
     2154, 2141, 2132, 2134, 2134, 2134, 2134, 2134, 2147, 2134,
     2141, 2148, 2161, 2148, 2155, 2153, 2158, 2154, 2147, 2147,
     2147, 2147, 2162, 2163, 2164, 2165, 2166, 2134, 2167, 2134,
     2147, 2155, 2134, 2158, 2168, 2170, 2168, 2171, 2172, 2173,
     2163, 2174, 2175, 2166, 2176, 2177, 2178, 2179, 2180, 2178,
     2176, 2181, 2182, 2183, 2184, 2185, 2176, 2177, 2178, 2186,
     2187, 2177, 2188, 2189, 2190, 2191, 2192, 2193, 2194, 2195,
     2196, 2197, 2198, 2199, 2200, 2201, 2202, 2203, 2204, 2188,
     2205, 2206, 2191, 2208, 2209, 2208, 2209, 2196, 2197, 2210,

     2185, 2210, 2187, 2207, 2207, 2211, 2220, 2207, 2207, 2207,
     2217, 2195, 2193, 2221, 2186, 2207, 2222, 2224, 2225, 2226,
     2228, 2219, 2213, 2194, 2212, 2212, 2212, 2212, 2212, 2216,
     2212, 2213, 2213, 2213, 2213, 2213, 2213, 2217, 2216, 2216,
     2216, 2216, 2216, 2216, 2218, 2219, 2223, 2216, 2212, 2227,
     2212, 2226, 2224, 2212, 2214, 2214, 2214, 2214, 2214, 2229,
     2214, 2231, 2230, 2225, 2232, 2233, 2227, 2234, 2223, 2235,
     2236, 2237, 2238, 2239, 2240, 2241, 2242, 2246, 2214, 2230,
     2214, 2218, 2243, 2214, 2215, 2215, 2215, 2215, 2215, 2247,
     2215, 2244, 2248, 2249, 2243, 2243, 2250, 2244, 2251, 2245,

     2252, 2245, 2253, 2244, 2254, 2255, 2256, 2257, 2215, 2258,
     2215, 2245, 2259, 2215, 2260, 2261, 2262, 2263, 2264, 2265,
     2266, 2267, 2266, 2268, 2269, 2270, 2271, 2272, 2273, 2251,
     2274, 2250, 2275, 2276, 2277, 2249, 2278, 2256, 2279, 2280,
     2255, 2281, 2269, 2282, 2269, 2283, 2254, 2284, 2285, 2286,
     2272, 2287, 2288, 2271, 2289, 2293, 2290, 2294, 2295, 2270,
     2291, 2296, 2297, 2302, 2292, 2298, 2299, 2278, 2290, 2277,
     2300, 2301, 2291, 2290, 2303, 2276, 2292, 2291, 2304, 2292,
     2305, 2306, 2307, 2308, 2309, 2310, 2312, 2313, 2315, 2316,
     2314, 2317, 2318, 2319, 2321, 2322, 2320, 2323, 2324, 2325,

     2326, 2327, 2328, 2329, 2333, 2330, 2334, 2296, 2297, 2298,
     2332, 2330, 2299, 2335, 2336, 2301, 2300, 2330, 2337, 2339,
     2340, 2331, 2338, 2341, 2312, 2313, 2314, 2331, 2342, 2338,
     2341, 2343, 2332, 2331, 2344, 2345, 2346, 2347, 2318, 2319,
     2320, 2348, 2349, 2350, 2332, 2351, 2352, 2353, 2353, 2336,
     2354, 2355, 2356, 2337, 2339, 2340, 2357, 2358, 2359, 2360,
     2361, 2362, 2363, 2364, 2365, 2359, 2366, 2367, 2368, 2369,
     2370, 2371, 2351, 2352, 2372, 2373, 2374, 2375, 2376, 2377,
     2378, 2369, 2370, 2379, 2380, 2381, 2382, 2383, 2384, 2385,
     2386, 2357, 2358, 2387, 2388, 2389, 2390, 2391, 2393, 2392,

     2394, 2395, 2396, 2397, 2398, 2399, 2400, 2401, 2402, 2403,
     2377, 2404, 2405, 2406, 2407, 2380, 2408, 2411, 2375, 2376,
     2409, 2378, 2392, 2412, 2379, 2410, 2413, 2408, 2408, 2390,
     2391, 2409, 2409, 2414, 2415, 2398, 2410, 2410, 2416, 2417,
     2418, 2419, 2420, 2396, 2397, 2421, 2422, 2423, 2424, 2425,
     2426, 2427, 2428, 2429, 2430, 2431, 2432, 2433, 2434, 2435,
     2436, 2437, 2440, 2443, 2446, 2438, 2439, 2441, 2452, 2455,
     2461, 2442, 2444, 2414, 2415, 2445, 2447, 2448, 2416, 2417,
     2418, 2419, 2438, 2439, 2441, 2429, 2430, 2431, 2442, 2444,
     2449, 2450, 2445, 2447, 2448, 2451, 2453, 2454, 2455, 2435,

     2436, 2437, 2449, 2456, 2457, 2447, 2448, 2458, 2450, 2459,
     2460, 2462, 2451, 2453, 2454, 2463, 2464, 2447, 2448, 2467,
     2456, 2457, 2465, 2466, 2470, 2468, 2459, 2460, 2462, 2469,
     2471, 2472, 2463, 2468, 2473, 2474, 2458, 2469, 2475, 2465,
     2466, 2476, 2468, 2477, 2478, 2470, 2469, 2471, 2472, 2479,
     2480, 2481, 2474, 2482, 2483, 2475, 2484, 2485, 2486, 2487,
     2477, 2488, 2489, 2490, 2491, 2492, 2479, 2493, 2484, 2494,
     2476, 2495, 2496, 2497, 2498, 2499, 2500, 2501, 2488, 2502,
     2490, 2503, 2504, 2505, 2493, 2506, 2494, 2507, 2508, 2509,
     2510, 2511, 2511, 2512, 2501, 2513, 2514, 2515, 2503, 2516,

     2517, 2518, 2519, 2511, 2520, 2521, 2492, 2522, 2499, 2523,
     2524, 2525, 2495, 2526, 2527, 2529, 2528, 2530, 2531, 2532,
     2533, 2534, 2528, 2535, 2505, 2536, 2520, 2515, 2528, 2516,
     2537, 2538, 2539, 2540, 2541, 2542, 2543, 2544, 2545, 2546,
     2524, 2547, 2548, 2549, 2550, 2541, 2541, 2551, 2552, 2553,
     2535, 2554, 2530, 2531, 2555, 2554, 2556, 2557, 2558, 2559,
     2560, 2561, 2562, 2554, 2563, 2537, 2564, 2578, 2565, 2579,
     2566, 2567, 2581, 2584, 2548, 2568, 2543, 2544, 2569, 2570,
     2585, 2571, 2572, 2564, 2550, 2565, 2561, 2566, 2567, 2556,
     2557, 2573, 2568, 2574, 2575, 2569, 2570, 2563, 2571, 2572,

     2567, 2574, 2576, 2577, 2580, 2582, 2583, 2586, 2573, 2587,
     2574, 2575, 2567, 2616, 1009, 1006, 1005,  989,  988, 2576,
     2577, 2580, 2582, 2583, 2589, 2589, 2589, 2589, 2589, 2589,
     2589, 2589, 2589, 2590, 2590, 2590, 2590, 2590, 2590, 2590,
     2590, 2590, 2591, 2591, 2591, 2591, 2591, 2591, 2591, 2591,
     2591, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592, 2592,
     2593, 2593, 2593, 2593, 2593, 2593, 2593, 2593, 2593, 2594,
     2594, 2594, 2594, 2594, 2594, 2594, 2594, 2594, 2595, 2595,
     2595, 2595, 2595, 2595, 2595, 2595, 2595, 2596, 2596, 2596,
     2596, 2596, 2596, 2596, 2596, 2596, 2597, 2597, 2597, 2597,

     2597, 2597, 2597, 2597, 2597, 2598, 2598, 2598, 2598, 2598,
     2598, 2598, 2598, 2598, 2599, 2599, 2599, 2599, 2599, 2599,
     2599, 2599, 2599, 2600, 2600, 2600, 2600, 2600, 2600, 2600,
     2600, 2600, 2601, 2601, 2601, 2601, 2601, 2601, 2601, 2601,
     2601, 2602, 2602, 2602, 2602, 2602, 2602, 2602, 2602, 2602,
     2603,  987,  986,  985, 2603, 2604, 2604, 2604, 2604, 2604,
     2604, 2604, 2604, 2604, 2605, 2605, 2605, 2605, 2605, 2605,
     2605, 2605, 2605, 2606,  984,  983,  982, 2606, 2607, 2607,
     2607, 2607, 2607, 2607, 2607, 2607, 2607, 2608, 2608, 2608,
     2608, 2608, 2608, 2608, 2608, 2608, 2609,  981,  978,  977,

     2609, 2610,  976,  975,  974, 2610, 2611, 2611, 2611, 2611,
     2611, 2612, 2612,  973, 2612, 2612, 2612, 2612, 2612, 2612,
     2613, 2613,  972,  971,  970, 2613, 2614,  969,  968,  965,
     2614, 2615,  964,  963,  962, 2615, 2617, 2617, 2617, 2617,
     2617, 2617, 2617, 2617, 2617, 2618,  961,  960, 2618, 2619,
     2619, 2619, 2619, 2619, 2619, 2619, 2619, 2619, 2620,  959,
      958,  957, 2620, 2621, 2621, 2621, 2621, 2621, 2621, 2622,
     2622, 2622, 2622, 2622, 2622, 2622, 2622, 2622, 2623, 2623,
      956, 2623, 2623, 2623, 2623, 2623, 2623, 2624,  955, 2624,
     2624,  952, 2624, 2624, 2624, 2625, 2625,  951, 2625, 2625,

     2625, 2625, 2625, 2625, 2626, 2626,  936, 2626, 2626, 2626,
     2626, 2626, 2626, 2627, 2627,  922, 2627, 2627, 2627, 2627,
     2627, 2627, 2628, 2628,  921, 2628, 2628, 2628, 2628, 2628,
     2628, 2629, 2629,  919, 2629, 2629, 2629, 2629, 2629, 2629,
     2630, 2630,  918, 2630, 2630, 2630, 2630, 2630, 2630, 2631,
     2631,  917, 2631, 2631, 2631, 2631, 2631, 2631, 2632, 2632,
      916, 2632, 2632, 2632, 2632, 2632, 2632, 2633, 2633, 2633,
     2633, 2633, 2633, 2633, 2633, 2633, 2634, 2634,  915, 2634,
     2634, 2634, 2634, 2634, 2634, 2635, 2635, 2635, 2635, 2635,
     2636, 2636, 2636, 2636, 2636, 2637, 2637, 2637, 2637, 2637,

     2637, 2638, 2638, 2638, 2638, 2638, 2639, 2639, 2639, 2639,
     2639, 2639, 2639, 2639, 2639, 2640, 2640, 2640, 2640, 2640,
     2641, 2641,  914, 2641, 2641, 2641, 2641, 2641, 2641,  913,
      912,  911,  908,  907,  906,  905,  904,  903,  887,  886,
      885,  884,  883,  882,  881,  880,  879,  876,  875,  874,
      873,  872,  871,  870,  869,  868,  867,  866,  863,  862,
      861,  860,  859,  858,  857,  856,  855,  854,  853,  852,
      851,  850,  849,  846,  845,  844,  843,  841,  826,  818,
      815,  814,  813,  812,  811,  810,  809,  808,  807,  806,
      805,  804,  803,  785,  783,  782,  781,  780,  779,  778,

      777,  776,  775,  774,  773,  772,  771,  768,  766,  765,
      764,  763,  762,  761,  760,  759,  758,  757,  756,  755,
      754,  752,  751,  750,  749,  748,  747,  746,  745,  744,
      743,  742,  741,  740,  722,  707,  704,  703,  702,  701,
      700,  699,  698,  697,  696,  695,  694,  693,  692,  691,
      690,  687,  675,  669,  668,  667,  666,  665,  664,  663,
      662,  661,  660,  659,  658,  657,  654,  651,  649,  648,
      647,  646,  645,  644,  643,  642,  641,  640,  639,  638,
      637,  634,  631,  629,  627,  625,  624,  623,  622,  621,
      620,  619,  618,  617,  616,  615,  614,  613,  612,  588,

      587,  585,  584,  583,  582,  581,  580,  575,  574,  573,
      571,  570,  568,  567,  566,  565,  564,  563,  560,  541,
      540,  539,  537,  536,  534,  533,  532,  531,  530,  529,
      526,  522,  519,  518,  516,  515,  514,  513,  512,  511,
      508,  505,  504,  502,  501,  500,  499,  498,  497,  494,
      479,  478,  477,  476,  462,  461,  460,  459,  458,  457,
      456,  455,  454,  453,  452,  450,  449,  447,  446,  445,
      444,  443,  442,  439,  436,  434,  433,  432,  429,  428,
      427,  426,  425,  405,  404,  402,  401,  400,  399,  398,
      397,  394,  391,  388,  385,  384,  382,  381,  380,  379,

      378,  377,  374,  370,  365,  362,  361,  359,  358,  357,
      356,  355,  354,  351,  349,  348,  347,  346,  345,  344,
      343,  342,  341,  318,  317,  315,  314,  313,  312,  311,
      310,  308,  307,  306,  304,  303,  302,  301,  300,  299,
      297,  296,  294,  292,  291,  290,  289,  287,  286,  284,
      271,  269,  268,  266,  264,  263,  262,  261,  259,  254,
      252,  250,  249,  248,  247,  245,  244,  242,  240,  238,
      236,  235,  234,  233,  231,  230,  228,  216,  215,  214,
      213,  212,  211,  200,  199,  198,  197,  196,  195,  194,
      193,  192,  191,  190,  189,  188,  187,  186,  185,  184,

      183,  182,  181,  180,  179,  178,  177,  175,  173,  172,
      171,  170,  168,  167,  166,  164,  163,  162,  161,  160,
      157,  156,  155,  153,  152,  151,  150,  149,  146,  144,
      143,  135,  134,  133,  132,  130,  129,  114,  111,  109,
      107,  105,  104,  103,  102,  100,   98,   94,   91,   89,
       87,   86,   85,   84,   82,   73,   71,   69,   68,   67,
       66,   64,   63,   62,   61,   60,   59,   58,   57,   56,
       54,   53,   50,   49,   48,   47,   46,   45,   44,   43,
       41,   40,   37, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,

     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588,
     2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588, 2588
    } ;

static yy_state_type yy_last_accepting_state;
static YY_CHAR *yy_last_accepting_cpos;

#if YY_CMimeScannerGen_DEBUG != 0
static const short int yy_rule_linenum[71] =
    {   0,
      190,  201,  204,  210,  213,  216,  220,  226,  231,  238,
      248,  251,  254,  257,  262,  268,  277,  280,  285,  290,
      295,  300,  309,  312,  317,  322,  329,  332,  337,  340,
      348,  351,  356,  364,  367,  375,  378,  386,  390,  396,
      405,  408,  413,  420,  430,  433,  440,  443,  448,  454,
      465,  478,  494,  499,  501,  503,  507,  509,  514,  517,
      521,  525,  529,  533,  537,  541,  545,  551,  559,  562
    } ;

#endif
static yy_state_type yy_state_buf[YY_BUF_SIZE + 2], *yy_state_ptr;
static YY_CHAR *yy_full_match;
static int yy_lp;
#define REJECT \
{ \
*yy_cp = yy_hold_char; /* undo effects of setting up yytext */ \
yy_cp = yy_full_match; /* restore poss. backed-over text */ \
++yy_lp; \
goto find_rule; \
}
static int yy_more_flag = 0;
static int yy_doing_yy_more = 0;
static int yy_more_len = 0;
#define yymore() { yy_more_flag = 1; }
#define YY_MORE_ADJ (yy_doing_yy_more ? yy_more_len : 0)
#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
#else
#define yy_get_previous_state() ((yy_state_type)(yy_get_previous_state_()))
#define yy_try_NUL_trans(c) ((yy_state_type)(yy_try_NUL_trans_(c)))
#endif

#ifndef YY_USE_CLASS
#ifdef YY_CMimeScannerGen_LEX_DEFINED
YY_CMimeScannerGen_LEX_RETURN YY_CMimeScannerGen_LEX ( YY_CMimeScannerGen_LEX_PARAM )
YY_CMimeScannerGen_LEX_PARAM_DEF
#else
YY_DECL
#endif
#else
YY_CMimeScannerGen_LEX_RETURN YY_CMimeScannerGen_CLASS::YY_CMimeScannerGen_LEX ( YY_CMimeScannerGen_LEX_PARAM)

#endif
    {
    register yy_state_type yy_current_state;
    register YY_CMimeScannerGen_CHAR *yy_cp, *yy_bp;
    register int yy_act;

/* % user's declarations go here */ 


   /* ------------------ Originator fields ----------------- */

/* % end of prolog */ 

    if ( yy_init )
	{
	 
	 {
	 YY_USER_INIT;
	 }
	if ( ! yy_start )
	    yy_start = 1;       /* first start state */

	if ( ! yy___in )
	    yy___in = YY_CMimeScannerGen_IFILE_DEFAULT;

	if ( ! yy___out )
	    yy___out = YY_CMimeScannerGen_OFILE_DEFAULT;

	if ( YY_CMimeScannerGen_CURRENT_BUFFER )
	    YY_CMimeScannerGen_INIT_BUFFER( YY_CMimeScannerGen_CURRENT_BUFFER, yy___in );
	else
	    YY_CMimeScannerGen_CURRENT_BUFFER = YY_CMimeScannerGen_CREATE_BUFFER( yy___in, YY_BUF_SIZE );

	YY_CMimeScannerGen_LOAD_BUFFER_STATE();
	yy_init=0;
	}

    while ( 1 )         /* loops until end-of-file is reached */
	{
/* % yymore()-related code goes here */ 
	yy_more_len = 0;
	yy_doing_yy_more = yy_more_flag;
	if ( yy_doing_yy_more )
	    {
	    yy_more_len = yy___leng;
	    yy_more_flag = 0;
	    }
	yy_cp = yy_c_buf_p;

	/* support of yy___text */
	*yy_cp = yy_hold_char;

	/* yy_bp points to the position in yy_ch_buf of the start of the
	 * current run.
	 */
	yy_bp = yy_cp;

/* % code to set up and find next match goes here */ 
	yy_current_state = yy_start;
	if ( yy_bp[-1] == '\n' )
	    ++yy_current_state;
	yy_state_ptr = yy_state_buf;
	*yy_state_ptr++ = yy_current_state;
yy_match:
	do
	    {
	    register YY_CHAR yy_c = yy_ec[*yy_cp];
	    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = yy_def[yy_current_state];
		if ( yy_current_state >= 2589 )
		    yy_c = yy_meta[yy_c];
		}
	    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	    *yy_state_ptr++ = yy_current_state;
	    ++yy_cp;
	    }
	while ( yy_current_state != 2588 );

yy_find_action:
/* % code to find the action number goes here */ 
	yy_current_state = *--yy_state_ptr;
	yy_lp = yy_accept[yy_current_state];
find_rule: /* we branch to this label when backtracking */
	for ( ; ; ) /* until we find what rule we matched */
	    {
	    if ( yy_lp && yy_lp < yy_accept[yy_current_state + 1] )
		{
		yy_act = yy_acclist[yy_lp];
		    {
		    yy_full_match = yy_cp;
		    break;
		    }
		}
	    --yy_cp;
	    yy_current_state = *--yy_state_ptr;
	    yy_lp = yy_accept[yy_current_state];
	    }

	YY_DO_BEFORE_ACTION;
	YY_USER_ACTION;

do_action:      /* this label is used only to access EOF actions */
#if YY_CMimeScannerGen_DEBUG != 0
	if ( yy___flex_debug )
		{
		if ( yy_act == 0 )
#ifndef YY_CMimeScannerGen_IOSTREAM
			fprintf( yy___stderr , "LEX: --scanner backtracking\n" );
#else
			yy___stderr <<"LEX: --scanner backtracking"<<endl;
#endif
		else if ( yy_act < YY_END_OF_BUFFER -1 )
#ifndef YY_CMimeScannerGen_IOSTREAM
			fprintf( yy___stderr , 
			 "LEX: --accepting rule at line %d (\"%s\")\n",
			 yy_rule_linenum[yy_act], yy___text );
#else
			yy___stderr <<"--accepting rule at line "
                          <<(int)yy_rule_linenum[yy_act]
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER -1 )
#ifndef YY_CMimeScannerGen_IOSTREAM
			fprintf( yy___stderr , 
			 "LEX: --accepting default rule (\"%s\")\n",
			 yy___text );
#else
			yy___stderr <<"--accepting default rule"
                          <<" (\""<<(char *)yy___text<<"\")"<<endl;
#endif
		else if ( yy_act == YY_END_OF_BUFFER )
#ifndef YY_CMimeScannerGen_IOSTREAM
			fprintf( yy___stderr , "LEX: --(end of buffer or a NUL)\n" );
#else
			yy___stderr <<"--(end of buffer or a NUL)"<<endl;
#endif
		else
#ifndef YY_CMimeScannerGen_IOSTREAM
			fprintf( yy___stderr , "LEX: --EOF\n" );
#else
			yy___stderr <<"--EOF"<<endl;
#endif
		}
#endif
	switch ( yy_act )
	    {
/* % actions go here */ 
case 1:
{  if( insideBody )           //inside a body
                                             {                          //and not following a boundary -> body
                                                yymore();
                                                BEGIN STATE_BODY;
                                                REJECT;
                                             }
                                             BEGIN STATE_ADDRESSES;              //else parse 'From:'
                                             commentState = STATE_ADDRESSES;
                                             return CMimeParserGen::TOK_FROM;
                                          }
	YY_BREAK
case 2:
{  if( insideBody ) { yymore(); BEGIN STATE_BODY; REJECT; }  //inside a body
                                             BEGIN STATE_ADDRESSES; commentState = STATE_ADDRESSES; return CMimeParserGen::TOK_SENDER;   }
	YY_BREAK
case 3:
{  if( insideBody ) { yymore(); BEGIN STATE_BODY; REJECT; }  //inside a body
                                             BEGIN STATE_ADDRESSES; commentState = STATE_ADDRESSES; return CMimeParserGen::TOK_REPLY_TO; }
	YY_BREAK
   /* ------------------ Destination address fields ----------------- */
case 4:
{  if( insideBody ) { yymore(); BEGIN STATE_BODY; REJECT; }  //inside a body
                                             BEGIN STATE_ADDRESSES; commentState = STATE_ADDRESSES; return CMimeParserGen::TOK_TO;    }
	YY_BREAK
case 5:
{  if( insideBody ) { yymore(); BEGIN STATE_BODY; REJECT; }  //inside a body
                                             BEGIN STATE_ADDRESSES; commentState = STATE_ADDRESSES; return CMimeParserGen::TOK_CC;    }
	YY_BREAK
case 6:
{  if( insideBody ) { yymore(); BEGIN STATE_BODY; REJECT; }  //inside a body
                                             BEGIN STATE_ADDRESSES; commentState = STATE_ADDRESSES; return CMimeParserGen::TOK_BCC;   }
	YY_BREAK
case 7:
{
                                                    val->token.charptr = (StarRec_Char*)yytext;
                                                    val->token.length = yyleng;
                                                    return CMimeParserGen::TOK_ENCODED_WORD;
                                                 }
	YY_BREAK
case 8:
{
                                                                     val->token.charptr = (StarRec_Char*) yytext;
                                                                     val->token.length = yyleng;
                                                                     return CMimeParserGen::TOK_ATOM; }
	YY_BREAK
case 9:
{
                                                                     val->token.charptr = (StarRec_Char*)&yytext[1];
                                                                     val->token.charptr[ (int)StarRec_PAL_strlen(val->token.charptr)-1 ] = '\0';
                                                                     val->token.length = yyleng-2;
                                                                     return CMimeParserGen::TOK_QUOTED_STRING;
                                                                  }
	YY_BREAK
case 10:
{
                                                                     val->token.charptr = (StarRec_Char*)&yytext[1];
                                                                     val->token.charptr[ (int)StarRec_PAL_strlen(val->token.charptr)-1 ] = '\0';
                                                                     val->token.length = yyleng-2;
                                                                     return CMimeParserGen::TOK_DOMAIN_LITERAL;
                                                                  }
	YY_BREAK
   /* ------------------ Identification fields ----------------- */
case 11:
{  if( insideBody ) { yymore(); BEGIN STATE_BODY; REJECT; }  //inside a body
                                             BEGIN STATE_IDENTIFICATION; commentState = STATE_IDENTIFICATION; return CMimeParserGen::TOK_MESSAGE_ID;  }
	YY_BREAK
case 12:
{  if( insideBody ) { yymore(); BEGIN STATE_BODY; REJECT; }  //inside a body
                                             BEGIN STATE_IDENTIFICATION; commentState = STATE_IDENTIFICATION; return CMimeParserGen::TOK_IN_REPLY_TO; }
	YY_BREAK
case 13:
{  if( insideBody ) { yymore(); BEGIN STATE_BODY; REJECT; }  //inside a body
                                             BEGIN STATE_IDENTIFICATION; commentState = STATE_IDENTIFICATION; return CMimeParserGen::TOK_REFERENCES;  }
	YY_BREAK
case 14:
{
                                             val->token.charptr = (StarRec_Char*) yytext;
                                             val->token.length = yyleng;
                                             return CMimeParserGen::TOK_ATOM; }
	YY_BREAK
case 15:
{
                                                                              val->token.charptr = (StarRec_Char*)&yytext[1];
                                                                              val->token.charptr[ (int)StarRec_PAL_strlen(val->token.charptr)-1 ] = '\0';
                                                                              val->token.length = yyleng-2;
                                                                              return CMimeParserGen::TOK_NO_FOLD_QUOTE; }
	YY_BREAK
case 16:
{
                                                                              val->token.charptr = (StarRec_Char*)&yytext[1];
                                                                              val->token.charptr[ (int)StarRec_PAL_strlen(val->token.charptr)-1 ] = '\0';
                                                                              val->token.length = yyleng-2;
                                                                              return CMimeParserGen::TOK_NO_FOLD_LITERAL; }
	YY_BREAK
   /* ------------------------- Date and Time Specification ----------------------- */
case 17:
{  if( insideBody ) { yymore(); BEGIN STATE_BODY; REJECT; }    //inside a body
                                             BEGIN STATE_DATE; commentState = STATE_DATE; return CMimeParserGen::TOK_DATE; }
	YY_BREAK
case 18:
{
                                                   val->token.charptr = (StarRec_Char*) yytext;
                                                   val->token.length = yyleng;
                                                   return CMimeParserGen::TOK_TIMEZONE; }
	YY_BREAK
case 19:
{
                                             val->token.charptr = (StarRec_Char*) yytext;
                                             val->token.length = yyleng;
                                             return CMimeParserGen::TOK_DIGIT_1; }
	YY_BREAK
case 20:
{
                                             val->token.charptr = (StarRec_Char*) yytext;
                                             val->token.length = yyleng;
                                             return CMimeParserGen::TOK_DIGIT_2; }
	YY_BREAK
case 21:
{
                                             val->token.charptr = (StarRec_Char*) yytext;
                                             val->token.length = yyleng;
                                             return CMimeParserGen::TOK_DIGIT_4; }
	YY_BREAK
case 22:
{
                                             val->token.charptr = (StarRec_Char*) yytext;
                                             val->token.length = yyleng;
                                             return CMimeParserGen::TOK_MONTH;
                                          }
	YY_BREAK
   /* ---------------------------- Informational fields --------------------------- */
case 23:
{ if( insideBody ) { yymore(); BEGIN STATE_BODY; REJECT; }  //inside a body
                                      BEGIN STATE_SUBJECT; commentState = STATE_SUBJECT; return CMimeParserGen::TOK_SUBJECT; }
	YY_BREAK
case 24:
{
                                      val->token.charptr = (StarRec_Char*) yytext;
                                      val->token.length = yyleng;
                                      return CMimeParserGen::TOK_SUBJECT_SPACE; }
	YY_BREAK
case 25:
{
                                      val->token.charptr = (StarRec_Char*) yytext;
                                      val->token.length = yyleng;
                                      return CMimeParserGen::TOK_ENCODED_WORD; }
	YY_BREAK
case 26:
{
                                      val->token.charptr = (StarRec_Char*) yytext;
                                      val->token.length = yyleng;
                                      return CMimeParserGen::TOK_SUBJECT_TEXT; }
	YY_BREAK
case 27:
{ if( insideBody ) { yymore(); BEGIN STATE_BODY; REJECT; }  //inside a body
                                       BEGIN STATE_COMMENTS; commentState = STATE_COMMENTS; }
	YY_BREAK
case 28:
{
                                       val->token.charptr = (StarRec_Char*) yytext;
                                       val->token.length = yyleng;
                                       return CMimeParserGen::TOK_COMMENTS; }
	YY_BREAK
case 29:
{ if( insideBody ) { yymore(); BEGIN STATE_BODY; REJECT; }  //inside a body
                                       BEGIN STATE_KEYWORDS; commentState = STATE_KEYWORDS; }
	YY_BREAK
case 30:
{
                                       val->token.charptr = (StarRec_Char*) yytext;
                                       val->token.length = yyleng;
                                       return CMimeParserGen::TOK_KEYWORD; }
	YY_BREAK
   /* -------------------------------- Trace fields ------------------------------- */
case 31:
{  if( insideBody ) { yymore(); BEGIN STATE_BODY; REJECT; }  //inside a body
                                                BEGIN STATE_TRACE; commentState = STATE_TRACE; return CMimeParserGen::TOK_RECEIVED; }
	YY_BREAK
case 32:
{  if( receivedDate ) { yymore(); BEGIN STATE_DATE; REJECT; }
                                                val->token.charptr = (StarRec_Char*) yytext;
                                                val->token.length = yyleng;
                                                return CMimeParserGen::TOK_ITEM_NAME; }
	YY_BREAK
case 33:
{  if( receivedDate ) { yymore(); BEGIN STATE_DATE; REJECT; }
                                                val->token.charptr = (StarRec_Char*) yytext;
                                                val->token.length = yyleng;
                                                return CMimeParserGen::TOK_ATOM; }
	YY_BREAK
   /* -------------------------------- MIME fields ------------------------------- */
case 34:
{  if( insideBody ) { yymore(); BEGIN STATE_BODY; REJECT; }  //inside a body
                                                BEGIN STATE_MIME_VERSION; commentState = STATE_MIME_VERSION; return CMimeParserGen::TOK_MIME_VERSION; }
	YY_BREAK
case 35:
{
                                                  val->token.charptr = (StarRec_Char*) yytext;
                                                  val->token.length = yyleng;
                                                  return CMimeParserGen::TOK_ATOM; }
	YY_BREAK
   /* -------------------------------- Content ID fields ------------------------------- */
case 36:
{  if( entity && !boundaryBefore ) { yymore(); BEGIN STATE_BODY; REJECT; }  //inside an entity -> body
                                                BEGIN STATE_CONTENT_ID; commentState = STATE_CONTENT_TYPE; return CMimeParserGen::TOK_CONTENT_ID; }
	YY_BREAK
case 37:
{
                                                val->token.charptr = (StarRec_Char*) yytext;
                                                val->token.length = yyleng;
                                                return CMimeParserGen::TOK_ATOM; }
	YY_BREAK
   /* -------------------------------- Content Type fields ------------------------------- */
case 38:
{  if( insideBody ) { yymore(); BEGIN STATE_BODY; REJECT; }  //inside a body
                                                BEGIN STATE_CONTENT_TYPE; commentState = STATE_CONTENT_TYPE; return CMimeParserGen::TOK_CONTENT_TYPE; }
	YY_BREAK
case 39:
{
                                                val->token.charptr = (StarRec_Char*) yytext;
                                                val->token.length = yyleng;
                                                return CMimeParserGen::TOK_TOKEN;
                                             }
	YY_BREAK
case 40:
{
                                                                     val->token.charptr = (StarRec_Char*)&yytext[1];
                                                                     val->token.charptr[ (int)StarRec_PAL_strlen(val->token.charptr)-1 ] = '\0';
                                                                     val->token.length = yyleng-2;
                                                                     return CMimeParserGen::TOK_QUOTED_STRING;
                                                                  }
	YY_BREAK
   /* ------------------------------- ContentDisposition fields ----------------------------- */
case 41:
{  if( insideBody ) { yymore(); BEGIN STATE_BODY; REJECT; }  //inside a body
                                                   BEGIN STATE_DISPOSITION; commentState = STATE_DISPOSITION; return CMimeParserGen::TOK_DISPOSITION; }
	YY_BREAK
case 42:
{
                                                   val->token.charptr = (StarRec_Char*) yytext;
                                                   val->token.length = yyleng;
                                                   return CMimeParserGen::TOK_TOKEN; }
	YY_BREAK
case 43:
{
                                                   val->token.charptr = (StarRec_Char*)&yytext[1];
                                                   val->token.charptr[ (int)StarRec_PAL_strlen(val->token.charptr)-1 ] = '\0';
                                                   val->token.length = yyleng-2;
                                                   return CMimeParserGen::TOK_QUOTED_ENCODED_WORD;
                                                }
	YY_BREAK
case 44:
{
                                                   val->token.charptr = (StarRec_Char*)&yytext[1];
                                                   val->token.charptr[ (int)StarRec_PAL_strlen(val->token.charptr)-1 ] = '\0';
                                                   val->token.length = yyleng-2;
                                                   return CMimeParserGen::TOK_QUOTED_STRING;
                                                }
	YY_BREAK
   /* ------------------------------- Content Encoding fields ----------------------------- */
case 45:
{  if( insideBody ) { yymore(); BEGIN STATE_BODY; REJECT; }  //inside a body
                                                         BEGIN STATE_TRANSFER_ENCODING; commentState = STATE_TRANSFER_ENCODING; return CMimeParserGen::TOK_TRANSFER_ENCODING; }
	YY_BREAK
case 46:
{
                                                         val->token.charptr = (StarRec_Char*) yytext;
                                                         val->token.length = yyleng;
                                                         return CMimeParserGen::TOK_ATOM; }
	YY_BREAK
   /* ------------------------------- Content Description fields ----------------------------- */
case 47:
{  if( insideBody ) { yymore(); BEGIN STATE_BODY; REJECT; }  //inside a body
                                                         BEGIN STATE_CONTENT_DESCRIPTION; commentState = STATE_CONTENT_DESCRIPTION; return CMimeParserGen::TOK_CONTENT_DESCRIPTION; }
	YY_BREAK
case 48:
{
                                                         val->token.charptr = (StarRec_Char*) yytext;
                                                         val->token.length = yyleng;
                                                         return CMimeParserGen::TOK_ENCODED_WORD; }
	YY_BREAK
case 49:
{
                                                         val->token.charptr = (StarRec_Char*)&yytext[1];
                                                         val->token.charptr[ (int)StarRec_PAL_strlen(val->token.charptr)-1 ] = '\0';
                                                         val->token.length = yyleng-2;
                                                         return CMimeParserGen::TOK_QUOTED_STRING; }
	YY_BREAK
case 50:
{
                                                         val->token.charptr = (StarRec_Char*) yytext;
                                                         val->token.length = yyleng;
                                                         return CMimeParserGen::TOK_ATOM; }                                                       
	YY_BREAK
   /* --------------------------------- Body fields ---------------------------------- */
   /*{SPACE}+                      {
                                 if( insideBody ) { yymore(); BEGIN STATE_BODY; }  //inside a body
                              }*/
case 51:
{
                                                //yyless(0);
                                                //yymore();
                                                if( 0 < yyleng )
                                                {
                                                   unput( yytext[0] );
                                                   BEGIN STATE_BODY;
                                                }
                                                //val->token.charptr = (StarRec_Char*) yytext;
                                                //val->token.length = yyleng;
                                                //REJECT;
                                             }
	YY_BREAK
case 52:
{
                                                if( 0 != pCharTemp )
                                                {
                                                   StarRec_PAL_free( pCharTemp );
                                                }
                                                pCharTemp = (StarRec_Char*) StarRec_PAL_malloc( (yyleng+1) * sizeof(StarRec_Char), RC_PCCHAR("MimeScannerGen"), RC_PCCHAR("BODY") );
                                                StarRec_PAL_strcpy( pCharTemp, (StarRec_Char*)yytext  );

                                                //val->token.charptr = (StarRec_Char*) yytext;
                                                val->token.charptr = pCharTemp;
                                                val->token.length = yyleng;

                                                BEGIN 0;
                                                return CMimeParserGen::TOK_BODY_TEXT;
                                             }
	YY_BREAK
case 53:
/* ignore unknown chars */
	YY_BREAK
   /* ----------------------------------- Comments ------------------------------------ */
case 54:
{  BEGIN STATE_COMMENT; commentCount = 1;  }
	YY_BREAK
case 55:
{  commentCount++;  }
	YY_BREAK
case 56:
{  commentCount--;
                                                if( 0 >= commentCount ) { commentCount = 0; BEGIN commentState; }  }
	YY_BREAK
case 57:
{}
	YY_BREAK
case 58:
/* ignore unknown chars */
	YY_BREAK
   /* ----------------------------------- Symbols ------------------------------------ */
case 59:
{
                                 if( insideBody ) { yymore(); BEGIN STATE_BODY; }  //inside a body
                                 else { return CMimeParserGen::TOK_COLON; } }
	YY_BREAK
case 60:
{
                                 if( insideBody ) { yymore(); BEGIN STATE_BODY; }  //inside a body
                                 else { return CMimeParserGen::TOK_SEMICOLON; } }
	YY_BREAK
case 61:
{
                                 if( insideBody ) { yymore(); BEGIN STATE_BODY; }  //inside a body
                                 else { return CMimeParserGen::TOK_COMMA; } }
	YY_BREAK
case 62:
{
                                 if( insideBody ) { yymore(); BEGIN STATE_BODY; }  //inside a body
                                 else { return CMimeParserGen::TOK_DOT; } }
	YY_BREAK
case 63:
{
                                 if( insideBody ) { yymore(); BEGIN STATE_BODY; }  //inside a body
                                 else { return CMimeParserGen::TOK_ANGLE_LEFT; } }
	YY_BREAK
case 64:
{
                                 if( insideBody ) { yymore(); BEGIN STATE_BODY; }  //inside a body
                                 else { return CMimeParserGen::TOK_ANGLE_RIGHT; } }
	YY_BREAK
case 65:
{
                                 if( insideBody ) { yymore(); BEGIN STATE_BODY; }  //inside a body
                                 else { return CMimeParserGen::TOK_AT; } }
	YY_BREAK
case 66:
{
                                 if( insideBody ) { yymore(); BEGIN STATE_BODY; }  //inside a body
                                 else { return CMimeParserGen::TOK_EQUAL; } }
	YY_BREAK
case 67:
{
                                 if( insideBody ) { yymore(); BEGIN STATE_BODY; }  //inside a body
                              }
	YY_BREAK
   /* ----------------------------------- Linefeeds ------------------------------------ */
case 68:
{
                                 return CMimeParserGen::TOK_EMPTY_LINE;
                              }
	YY_BREAK
  /*{CRLF}+                       {
                                 return CMimeParserGen::TOK_CRLF;
                              }*/
case 69:
{
                              }
	YY_BREAK
case 70:
/* ignore unknown chars */
	YY_BREAK
case 71:
ECHO;
	YY_BREAK
	    case YY_STATE_EOF(INITIAL):
	    case YY_STATE_EOF(STATE_EMPTY_LINE):
	    case YY_STATE_EOF(STATE_ADDRESSES):
	    case YY_STATE_EOF(STATE_IDENTIFICATION):
	    case YY_STATE_EOF(STATE_TRACE):
	    case YY_STATE_EOF(STATE_DATE):
	    case YY_STATE_EOF(STATE_SUBJECT):
	    case YY_STATE_EOF(STATE_COMMENTS):
	    case YY_STATE_EOF(STATE_KEYWORDS):
	    case YY_STATE_EOF(STATE_MIME_VERSION):
	    case YY_STATE_EOF(STATE_CONTENT_ID):
	    case YY_STATE_EOF(STATE_CONTENT_TYPE):
	    case YY_STATE_EOF(STATE_DISPOSITION):
	    case YY_STATE_EOF(STATE_TRANSFER_ENCODING):
	    case YY_STATE_EOF(STATE_CONTENT_DESCRIPTION):
	    case YY_STATE_EOF(STATE_BODY):
	    case YY_STATE_EOF(STATE_BOUNDARY):
	    case YY_STATE_EOF(STATE_COMMENT):
		yyterminate();

	    case YY_END_OF_BUFFER:
		{
		/* amount of text matched not including the EOB char */
		int yy_amount_of_matched_text = yy_cp - yy___text - 1;

		/* undo the effects of YY_DO_BEFORE_ACTION */
		*yy_cp = yy_hold_char;

		/* note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the end-
		 * of-buffer state).  Contrast this with the test in yyinput().
		 */
		if ( yy_c_buf_p <= &YY_CMimeScannerGen_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
		    /* this was really a NUL */
		    {
		    yy_state_type yy_next_state;

		    yy_c_buf_p = yy___text + yy_amount_of_matched_text;

		    yy_current_state = yy_get_previous_state();

		    /* okay, we're now positioned to make the
		     * NUL transition.  We couldn't have
		     * yy_get_previous_state() go ahead and do it
		     * for us because it doesn't know how to deal
		     * with the possibility of jamming (and we
		     * don't want to build jamming into it because
		     * then it will run more slowly)
		     */

		    yy_next_state = yy_try_NUL_trans( yy_current_state );

		    yy_bp = yy___text + YY_MORE_ADJ;

		    if ( yy_next_state )
			{
			/* consume the NUL */
			yy_cp = ++yy_c_buf_p;
			yy_current_state = yy_next_state;
			goto yy_match;
			}

		    else
			{
/* % code to do backtracking for compressed tables and set up yy_cp goes here */ 
			goto yy_find_action;
			}
		    }

		else switch ( yy_get_next_buffer() )
		    {
		    case EOB_ACT_END_OF_FILE:
			{
			yy_did_buffer_switch_on_eof = 0;

			if ( yywrap() )
			    {
			    /* note: because we've taken care in
			     * yy_get_next_buffer() to have set up yy___text,
			     * we can now set up yy_c_buf_p so that if some
			     * total hoser (like flex itself) wants
			     * to call the scanner after we return the
			     * YY_NULL, it'll still work - another YY_NULL
			     * will get returned.
			     */
			    yy_c_buf_p = yy___text + YY_MORE_ADJ;

			    yy_act = YY_STATE_EOF((yy_start - 1) / 2);
			    goto do_action;
			    }

			else
			    {
			    if ( ! yy_did_buffer_switch_on_eof )
				YY_NEW_FILE;
			    }
			}
			break;

		    case EOB_ACT_CONTINUE_SCAN:
			yy_c_buf_p = yy___text + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_match;

		    case EOB_ACT_LAST_MATCH:
			yy_c_buf_p =
			    &YY_CMimeScannerGen_CURRENT_BUFFER->yy_ch_buf[yy_n_chars];

			yy_current_state = yy_get_previous_state();

			yy_cp = yy_c_buf_p;
			yy_bp = yy___text + YY_MORE_ADJ;
			goto yy_find_action;
		    }
		break;
		}

	    default:
#if YY_CMimeScannerGen_DEBUG != 0
#ifndef YY_CMimeScannerGen_IOSTREAM
		fprintf(yy___stderr , "action # %d\n", yy_act );
#else
		yy___stderr <<"action # "<<(int)yy_act<<endl;
#endif
#endif
		YY_FATAL_ERROR(
			"LEX: fatal flex scanner internal error--no action found" );
	    }
	}
	yyterminate();/* avoid the no return value error message on MS-C7/dos */
    }


/* yy_get_next_buffer - try to read in a new buffer
 *
 * synopsis
 *     int yy_get_next_buffer();
 *     
 * returns a code representing an action
 *     EOB_ACT_LAST_MATCH - 
 *     EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *     EOB_ACT_END_OF_FILE - end of file
 */
#ifndef YY_USE_CLASS
static int yy_get_next_buffer()
#else
int YY_CMimeScannerGen_CLASS::yy_get_next_buffer()
#endif
    {
    register YY_CMimeScannerGen_CHAR *dest = YY_CMimeScannerGen_CURRENT_BUFFER->yy_ch_buf;
    register YY_CMimeScannerGen_CHAR *source = yy___text - 1; /* copy prev. char, too */
    register int number_to_move, i;
    int ret_val;

    if ( yy_c_buf_p > &YY_CMimeScannerGen_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] )
	YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

    /* try to read more data */

    /* first move last chars to start of buffer */
    number_to_move = yy_c_buf_p - yy___text;

    for ( i = 0; i < number_to_move; ++i )
	*(dest++) = *(source++);

    if ( YY_CMimeScannerGen_CURRENT_BUFFER->yy_eof_status != EOF_NOT_SEEN )
	/* don't do the read, it's not guaranteed to return an EOF,
	 * just force an EOF
	 */
	yy_n_chars = 0;

    else
	{
	int num_to_read = YY_CMimeScannerGen_CURRENT_BUFFER->yy_buf_size - number_to_move - 1;

	if ( num_to_read > YY_READ_BUF_SIZE )
	    num_to_read = YY_READ_BUF_SIZE;

	else if ( num_to_read <= 0 )
	    YY_FATAL_ERROR( "fatal error - scanner input buffer overflow" );

	/* read in more data */
	YY_INPUT( (&YY_CMimeScannerGen_CURRENT_BUFFER->yy_ch_buf[number_to_move]),
		  yy_n_chars, num_to_read );
	}

    if ( yy_n_chars == 0 )
	{
	if ( number_to_move - YY_MORE_ADJ == 1 )
	    {
	    ret_val = EOB_ACT_END_OF_FILE;
	    YY_CMimeScannerGen_CURRENT_BUFFER->yy_eof_status = EOF_DONE;
	    }

	else
	    {
	    ret_val = EOB_ACT_LAST_MATCH;
	    YY_CMimeScannerGen_CURRENT_BUFFER->yy_eof_status = EOF_PENDING;
	    }
	}

    else
	ret_val = EOB_ACT_CONTINUE_SCAN;

    yy_n_chars += number_to_move;
    YY_CMimeScannerGen_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
    YY_CMimeScannerGen_CURRENT_BUFFER->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

    /* yy___text begins at the second character in yy_ch_buf; the first
     * character is the one which preceded it before reading in the latest
     * buffer; it needs to be kept around in case it's a newline, so
     * yy_get_previous_state() will have with '^' rules active
     */

    yy___text = &YY_CMimeScannerGen_CURRENT_BUFFER->yy_ch_buf[1];

    return ( ret_val );
    }


/* yy_get_previous_state - get the state just before the EOB char was reached
 *
 * synopsis
 *     yy_state_type yy_get_previous_state();
 */

#ifndef YY_USE_CLASS
static yy_state_type yy_get_previous_state()
#else
long YY_CMimeScannerGen_CLASS::yy_get_previous_state_()
#endif
    {
    register yy_state_type yy_current_state;
    register YY_CMimeScannerGen_CHAR *yy_cp;

/* % code to get the start state into yy_current_state goes here */ 
    register YY_CHAR *yy_bp = yy___text;

    yy_current_state = yy_start;
    if ( yy_bp[-1] == '\n' )
	++yy_current_state;
    yy_state_ptr = yy_state_buf;
    *yy_state_ptr++ = yy_current_state;

    for ( yy_cp = yy___text + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
	{
/* % code to find the next state goes here */ 
	register YY_CHAR yy_c = (*yy_cp ? yy_ec[*yy_cp] : 1);
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	    {
	    yy_current_state = yy_def[yy_current_state];
	    if ( yy_current_state >= 2589 )
		yy_c = yy_meta[yy_c];
	    }
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	*yy_state_ptr++ = yy_current_state;
	}

#ifndef YY_USE_CLASS
    return ( yy_current_state );
#else
    return (long)( yy_current_state );
#endif
    }


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *     next_state = yy_try_NUL_trans( current_state );
 */

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( register yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
register yy_state_type yy_current_state;
#endif
#else
long YY_CMimeScannerGen_CLASS::yy_try_NUL_trans_(long yy_current_state_)
#endif

    {
#ifndef YY_USE_CLASS
#else
    yy_state_type yy_current_state=(yy_state_type)yy_current_state_;
#endif
    register int yy_is_jam;
/* % code to find the next state, and perhaps do backtracking, goes here */ 

    register YY_CHAR yy_c = 1;
    while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
	{
	yy_current_state = yy_def[yy_current_state];
	if ( yy_current_state >= 2589 )
	    yy_c = yy_meta[yy_c];
	}
    yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
    *yy_state_ptr++ = yy_current_state;
    yy_is_jam = (yy_current_state == 2588);

#ifndef YY_USE_CLASS
    return ( yy_is_jam ? 0 : yy_current_state );
#else
    return (long)( yy_is_jam ? 0 : yy_current_state );
#endif
    }

#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
static void yyunput( YY_CMimeScannerGen_CHAR c, register YY_CMimeScannerGen_CHAR *yy_bp )
#else
static void yyunput( c, yy_bp )
YY_CMimeScannerGen_CHAR c;
register YY_CMimeScannerGen_CHAR *yy_bp;
#endif
#else
void YY_CMimeScannerGen_CLASS::yyunput( YY_CMimeScannerGen_CHAR c, YY_CMimeScannerGen_CHAR *yy_bp )
#endif

    {
    register YY_CMimeScannerGen_CHAR *yy_cp = yy_c_buf_p;

    /* undo effects of setting up yy___text */
    *yy_cp = yy_hold_char;

    if ( yy_cp < YY_CMimeScannerGen_CURRENT_BUFFER->yy_ch_buf + 2 )
	{ /* need to shift things up to make room */
	register int number_to_move = yy_n_chars + 2; /* +2 for EOB chars */
	register YY_CMimeScannerGen_CHAR *dest =
	    &YY_CMimeScannerGen_CURRENT_BUFFER->yy_ch_buf[YY_CMimeScannerGen_CURRENT_BUFFER->yy_buf_size + 2];
	register YY_CMimeScannerGen_CHAR *source =
	    &YY_CMimeScannerGen_CURRENT_BUFFER->yy_ch_buf[number_to_move];

	while ( source > YY_CMimeScannerGen_CURRENT_BUFFER->yy_ch_buf )
	    *--dest = *--source;

	yy_cp += dest - source;
	yy_bp += dest - source;
	yy_n_chars = YY_CMimeScannerGen_CURRENT_BUFFER->yy_buf_size;

	if ( yy_cp < YY_CMimeScannerGen_CURRENT_BUFFER->yy_ch_buf + 2 )
	    YY_FATAL_ERROR( "flex scanner push-back overflow" );
	}

    if ( yy_cp > yy_bp && yy_cp[-1] == '\n' )
	yy_cp[-2] = '\n';

    *--yy_cp = c;

    /* note: the formal parameter *must* be called "yy_bp" for this
     *       macro to now work correctly
     */
    YY_DO_BEFORE_ACTION; /* set up yy___text again */
    }

#ifndef YY_USE_CLASS
#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
#else
int YY_CMimeScannerGen_CLASS::input()
#endif
    {
    int c;
    YY_CMimeScannerGen_CHAR *yy_cp = yy_c_buf_p;

    *yy_cp = yy_hold_char;

    if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
	{
	/* yy_c_buf_p now points to the character we want to return.
	 * If this occurs *before* the EOB characters, then it's a
	 * valid NUL; if not, then we've hit the end of the buffer.
	 */
	if ( yy_c_buf_p < &YY_CMimeScannerGen_CURRENT_BUFFER->yy_ch_buf[yy_n_chars] )
	    /* this was really a NUL */
	    *yy_c_buf_p = '\0';

	else
	    { /* need more input */
	    yy___text = yy_c_buf_p;
	    ++yy_c_buf_p;

	    switch ( yy_get_next_buffer() )
		{
		case EOB_ACT_END_OF_FILE:
		    {
		    if ( yywrap() )
			{
			yy_c_buf_p = yy___text + YY_MORE_ADJ;
			return ( EOF );
			}

		    YY_NEW_FILE;
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    return ( yyinput() );
#else
		    return ( input() );
#endif
#else
		    return ( input() );
#endif
		    }
		    break;

		case EOB_ACT_CONTINUE_SCAN:
		    yy_c_buf_p = yy___text + YY_MORE_ADJ;
		    break;

		case EOB_ACT_LAST_MATCH:
#ifndef YY_USE_CLASS
#ifdef __cplusplus
		    YY_FATAL_ERROR( "unexpected last match in yyinput()" );
#else
		    YY_FATAL_ERROR( "unexpected last match in input()" );
#endif
#else
		    YY_FATAL_ERROR( "unexpected last match in YY_CMimeScannerGen_CLASS::input()" );
#endif
		}
	    }
	}

    c = *yy_c_buf_p;
    yy_hold_char = *++yy_c_buf_p;

    return ( c );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_CMimeScannerGen_RESTART( YY_CMimeScannerGen_IFILE  *input_file )
#else
void YY_CMimeScannerGen_RESTART( input_file )
YY_CMimeScannerGen_IFILE  *input_file;
#endif
#else
void YY_CMimeScannerGen_CLASS::YY_CMimeScannerGen_RESTART ( YY_CMimeScannerGen_IFILE  *input_file )
#endif

    {
    YY_CMimeScannerGen_INIT_BUFFER( YY_CMimeScannerGen_CURRENT_BUFFER, input_file );
    YY_CMimeScannerGen_LOAD_BUFFER_STATE();
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_CMimeScannerGen_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#else
void YY_CMimeScannerGen_SWITCH_TO_BUFFER( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
#else
void YY_CMimeScannerGen_CLASS::YY_CMimeScannerGen_SWITCH_TO_BUFFER( YY_BUFFER_STATE new_buffer )
#endif

    {
    if ( YY_CMimeScannerGen_CURRENT_BUFFER == new_buffer )
	return;

    if ( YY_CMimeScannerGen_CURRENT_BUFFER )
	{
	/* flush out information for old buffer */
	*yy_c_buf_p = yy_hold_char;
	YY_CMimeScannerGen_CURRENT_BUFFER->yy_buf_pos = yy_c_buf_p;
	YY_CMimeScannerGen_CURRENT_BUFFER->yy_n_chars = yy_n_chars;
	}

    YY_CMimeScannerGen_CURRENT_BUFFER = new_buffer;
    YY_CMimeScannerGen_LOAD_BUFFER_STATE();

    /* we don't actually know whether we did this switch during
     * EOF (yywrap()) processing, but the only time this flag
     * is looked at is after yywrap() is called, so it's safe
     * to go ahead and always set it.
     */
    yy_did_buffer_switch_on_eof = 1;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_CMimeScannerGen_LOAD_BUFFER_STATE( void )
#else
void YY_CMimeScannerGen_LOAD_BUFFER_STATE()
#endif
#else
void YY_CMimeScannerGen_CLASS::YY_CMimeScannerGen_LOAD_BUFFER_STATE(  )
#endif

    {
    yy_n_chars = YY_CMimeScannerGen_CURRENT_BUFFER->yy_n_chars;
    yy___text = yy_c_buf_p = YY_CMimeScannerGen_CURRENT_BUFFER->yy_buf_pos;
    yy___in = YY_CMimeScannerGen_CURRENT_BUFFER->yy_input_file;
    yy_hold_char = *yy_c_buf_p;
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE YY_CMimeScannerGen_CREATE_BUFFER( YY_CMimeScannerGen_IFILE  *file, int size )
#else
YY_BUFFER_STATE YY_CMimeScannerGen_CREATE_BUFFER( file, size )
YY_CMimeScannerGen_IFILE  *file;
int size;
#endif
#else
YY_BUFFER_STATE YY_CMimeScannerGen_CLASS::YY_CMimeScannerGen_CREATE_BUFFER( YY_CMimeScannerGen_IFILE  *file, int size )
#endif

    {
    YY_BUFFER_STATE b;

    b = (YY_BUFFER_STATE) malloc( sizeof( struct yy_buffer_state ) );

    if ( ! b )
	YY_FATAL_ERROR( "out of dynamic memory in YY_CMimeScannerGen_CREATE_BUFFER()" );

    b->yy_buf_size = size;

    /* yy_ch_buf has to be 2 characters longer than the size given because
     * we need to put in 2 end-of-buffer characters.
     */
    b->yy_ch_buf = (YY_CMimeScannerGen_CHAR *) malloc( (unsigned) (b->yy_buf_size + 2) );

    if ( ! b->yy_ch_buf )
	YY_FATAL_ERROR( "out of dynamic memory in YY_CMimeScannerGen_CREATE_BUFFER()" );

    YY_CMimeScannerGen_INIT_BUFFER( b, file );

    return ( b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_CMimeScannerGen_DELETE_BUFFER( YY_BUFFER_STATE b )
#else
void YY_CMimeScannerGen_DELETE_BUFFER( b )
YY_BUFFER_STATE b;
#endif
#else
void YY_CMimeScannerGen_CLASS::YY_CMimeScannerGen_DELETE_BUFFER( YY_BUFFER_STATE b )
#endif

    {
    if ( b == YY_CMimeScannerGen_CURRENT_BUFFER )
	YY_CMimeScannerGen_CURRENT_BUFFER = (YY_BUFFER_STATE) 0;

    free( (char *) b->yy_ch_buf );
    free( (char *) b );
    }


#ifndef YY_USE_CLASS
#ifdef YY_USE_PROTOS
void YY_CMimeScannerGen_INIT_BUFFER( YY_BUFFER_STATE b, YY_CMimeScannerGen_IFILE  *file )
#else
void YY_CMimeScannerGen_INIT_BUFFER( b, file )
YY_BUFFER_STATE b;
YY_CMimeScannerGen_IFILE  *file;
#endif
#else
void YY_CMimeScannerGen_CLASS::YY_CMimeScannerGen_INIT_BUFFER( YY_BUFFER_STATE b, YY_CMimeScannerGen_IFILE  *file)
#endif

    {
    b->yy_input_file = file;

    /* we put in the '\n' and start reading from [1] so that an
     * initial match-at-newline will be true.
     */

    b->yy_ch_buf[0] = '\n';
    b->yy_n_chars = 1;

    /* we always need two end-of-buffer characters.  The first causes
     * a transition to the end-of-buffer state.  The second causes
     * a jam in that state.
     */
    b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;
    b->yy_ch_buf[2] = YY_END_OF_BUFFER_CHAR;

    b->yy_buf_pos = &b->yy_ch_buf[1];

    b->yy_eof_status = EOF_NOT_SEEN;
    }

